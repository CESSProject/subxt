[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 9,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 9,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 9,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 10,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "compact": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 12,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 15,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "sequence": {
                  "type": 16
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "sequence": {
                  "type": 19
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 20
                },
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 651,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 20,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 652,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "enjin_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 21,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 30,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Offences",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_offences::Event"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "type": 34,
                          "typeName": "pallet_election_provider_multi_phase::Event<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "pallet_staking::Event<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "pallet_grandpa::Event"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "pallet_im_online::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "VoterList",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "NominationPools",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "pallet_nomination_pools::Event<Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "StakeExchange",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "pallet_stake_exchange::Event<Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 87,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "pallet_multisig::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ParaInclusion",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "parachains_inclusion::Event<Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Paras",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "parachains_paras::Event"
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Hrmp",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "parachains_hrmp::Event<Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "ParasDisputes",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "parachains_disputes::Event<Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Registrar",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "paras_registrar::Event<Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Slots",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "slots::Event<Runtime>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Auctions",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "auctions::Event<Runtime>"
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Crowdloan",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "crowdloan::Event<Runtime>"
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "XcmPallet",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 167,
                          "typeName": "pallet_message_queue::Event<Runtime>"
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "AssignedSlots",
                      "fields": [
                        {
                          "type": 171,
                          "typeName": "assigned_slots::Event<Runtime>"
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "ValidatorManager",
                      "fields": [
                        {
                          "type": 172,
                          "typeName": "pallet_validator_manager::Event<Runtime>"
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "MultiTokens",
                      "fields": [
                        {
                          "type": 173,
                          "typeName": "pallet_multi_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "FuelTanks",
                      "fields": [
                        {
                          "type": 249,
                          "typeName": "pallet_fuel_tanks::Event<Runtime>"
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "ExtrinsicPause",
                      "fields": [
                        {
                          "type": 270,
                          "typeName": "pallet_extrinsic_pause::Event<Runtime>"
                        }
                      ],
                      "index": 255
                    },
                    {
                      "name": "Marketplace",
                      "fields": [
                        {
                          "type": 274,
                          "typeName": "pallet_marketplace::Event<Runtime>"
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 284,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 287,
                          "typeName": "pallet_preimage::Event<Runtime>"
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "ConvictionVoting",
                      "fields": [
                        {
                          "type": 288,
                          "typeName": "pallet_conviction_voting::Event<Runtime>"
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Referenda",
                      "fields": [
                        {
                          "type": 289,
                          "typeName": "pallet_referenda::Event<Runtime>"
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Whitelist",
                      "fields": [
                        {
                          "type": 640,
                          "typeName": "pallet_whitelist::Event<Runtime>"
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "FellowshipCollective",
                      "fields": [
                        {
                          "type": 645,
                          "typeName": "pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>"
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "FellowshipReferenda",
                      "fields": [
                        {
                          "type": 648,
                          "typeName": "pallet_referenda::Event<Runtime, pallet_referenda::Instance2>"
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 649,
                          "typeName": "pallet_identity::Event<Runtime>"
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "VoteManager",
                      "fields": [
                        {
                          "type": 650,
                          "typeName": "pallet_vote_manager::Event<Runtime>"
                        }
                      ],
                      "index": 109
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 25,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    },
                    {
                      "name": "RootNotAllowed",
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 17,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "index": 0
                    },
                    {
                      "name": "OnlyProvider",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    },
                    {
                      "name": "CannotCreateHold",
                      "index": 7
                    },
                    {
                      "name": "NotExpendable",
                      "index": 8
                    },
                    {
                      "name": "Blocked",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 31,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_offences",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Offence",
                      "fields": [
                        {
                          "name": "kind",
                          "type": 33,
                          "typeName": "Kind"
                        },
                        {
                          "name": "timeslot",
                          "type": 13,
                          "typeName": "OpaqueTimeSlot"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "There is an offence reported of the given `kind` happened at the `session_index` and",
                        "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                        "\\[kind, timeslot\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SolutionStored",
                      "fields": [
                        {
                          "name": "compute",
                          "type": 35,
                          "typeName": "ElectionCompute"
                        },
                        {
                          "name": "origin",
                          "type": 36,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "prev_ejected",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A solution was stored with the given compute.",
                        "",
                        "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                        "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
                        "Otherwise, the solution was stored either during the unsigned phase or by",
                        "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                        "room for this one."
                      ]
                    },
                    {
                      "name": "ElectionFinalized",
                      "fields": [
                        {
                          "name": "compute",
                          "type": 35,
                          "typeName": "ElectionCompute"
                        },
                        {
                          "name": "score",
                          "type": 38,
                          "typeName": "ElectionScore"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The election has been finalized, with the given computation and score."
                      ]
                    },
                    {
                      "name": "ElectionFailed",
                      "index": 2,
                      "docs": [
                        "An election failed.",
                        "",
                        "Not much can be said about which computes failed in the process."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An account has been rewarded for their signed submission being finalized."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account has been slashed for submitting an invalid signed submission."
                      ]
                    },
                    {
                      "name": "PhaseTransitioned",
                      "fields": [
                        {
                          "name": "from",
                          "type": 39,
                          "typeName": "Phase<T::BlockNumber>"
                        },
                        {
                          "name": "to",
                          "type": 39,
                          "typeName": "Phase<T::BlockNumber>"
                        },
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "There was a phase transition in a given round."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ElectionCompute"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OnChain",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "index": 1
                    },
                    {
                      "name": "Unsigned",
                      "index": 2
                    },
                    {
                      "name": "Fallback",
                      "index": 3
                    },
                    {
                      "name": "Emergency",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "sp_npos_elections",
                "ElectionScore"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "minimal_stake",
                      "type": 6,
                      "typeName": "ExtendedBalance"
                    },
                    {
                      "name": "sum_stake",
                      "type": 6,
                      "typeName": "ExtendedBalance"
                    },
                    {
                      "name": "sum_stake_squared",
                      "type": 6,
                      "typeName": "ExtendedBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "Phase"
              ],
              "params": [
                {
                  "name": "Bn",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Off",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "index": 1
                    },
                    {
                      "name": "Unsigned",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "(bool, Bn)"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Emergency",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "def": {
                "tuple": [
                  37,
                  4
                ]
              }
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EraPaid",
                      "fields": [
                        {
                          "name": "era_index",
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "name": "validator_payout",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "remainder",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The era payout has been set; the first balance is the validator-payout; the second is",
                        "the remainder from the maximum amount of reward."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The nominator has been rewarded by this amount."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "staker",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A staker (validator or nominator) has been slashed by the given amount."
                      ]
                    },
                    {
                      "name": "SlashReported",
                      "fields": [
                        {
                          "name": "validator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "fraction",
                          "type": 42,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "slash_era",
                          "type": 4,
                          "typeName": "EraIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A slash for the given validator, for the given percentage of their stake, at the given",
                        "era as been reported."
                      ]
                    },
                    {
                      "name": "OldSlashingReportDiscarded",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An old slashing report from a prior era was discarded because it could",
                        "not be processed."
                      ]
                    },
                    {
                      "name": "StakersElected",
                      "index": 5,
                      "docs": [
                        "A new set of stakers was elected."
                      ]
                    },
                    {
                      "name": "Bonded",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An account has bonded this amount. \\[stash, amount\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "Unbonded",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An account has unbonded this amount."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                        "from the unlocking queue."
                      ]
                    },
                    {
                      "name": "Kicked",
                      "fields": [
                        {
                          "name": "nominator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A nominator has been kicked from a validator."
                      ]
                    },
                    {
                      "name": "StakingElectionFailed",
                      "index": 10,
                      "docs": [
                        "The election failed. No new era is planned."
                      ]
                    },
                    {
                      "name": "Chilled",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "An account has stopped participating as either a validator or nominator."
                      ]
                    },
                    {
                      "name": "PayoutStarted",
                      "fields": [
                        {
                          "name": "era_index",
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "The stakers' rewards are getting paid."
                      ]
                    },
                    {
                      "name": "ValidatorPrefsSet",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "prefs",
                          "type": 43,
                          "typeName": "ValidatorPrefs"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A validator has set their preferences."
                      ]
                    },
                    {
                      "name": "ForceEra",
                      "fields": [
                        {
                          "name": "mode",
                          "type": 45,
                          "typeName": "Forcing"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A new force era mode was set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "pallet_staking",
                "ValidatorPrefs"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "commission",
                      "type": 44,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "blocked",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "def": {
                "compact": {
                  "type": 42
                }
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_staking",
                "Forcing"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotForcing",
                      "index": 0
                    },
                    {
                      "name": "ForceNew",
                      "index": 1
                    },
                    {
                      "name": "ForceNone",
                      "index": 2
                    },
                    {
                      "name": "ForceAlways",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 48,
                          "typeName": "AuthorityList"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "def": {
                "sequence": {
                  "type": 49
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "def": {
                "tuple": [
                  50,
                  11
                ]
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 51,
                      "typeName": "ed25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    },
                    {
                      "name": "UpdatedInactive",
                      "fields": [
                        {
                          "name": "reactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "deactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The inactive funds of the pallet have been updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 55,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 36,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 55,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 56
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 56
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HeartbeatReceived",
                      "fields": [
                        {
                          "name": "authority_id",
                          "type": 58,
                          "typeName": "T::AuthorityId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new heartbeat was received from `AuthorityId`."
                      ]
                    },
                    {
                      "name": "AllGood",
                      "index": 1,
                      "docs": [
                        "At the end of the session, no offence was committed."
                      ]
                    },
                    {
                      "name": "SomeOffline",
                      "fields": [
                        {
                          "name": "offline",
                          "type": 60,
                          "typeName": "Vec<IdentificationTuple<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "At the end of the session, at least one validator was found to be offline."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 59,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "def": {
                "sequence": {
                  "type": 61
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "def": {
                "tuple": [
                  0,
                  62
                ]
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_staking",
                "Exposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "own",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "others",
                      "type": 64,
                      "typeName": "Vec<IndividualExposure<AccountId, Balance>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "def": {
                "sequence": {
                  "type": 65
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "pallet_staking",
                "IndividualExposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 63,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Rebagged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "from",
                          "type": 11,
                          "typeName": "T::Score"
                        },
                        {
                          "name": "to",
                          "type": 11,
                          "typeName": "T::Score"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Moved an account from one bag to another."
                      ]
                    },
                    {
                      "name": "ScoreUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "new_score",
                          "type": 11,
                          "typeName": "T::Score"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Updated the score of some account to the given amount."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "capacity",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A pool has been created."
                      ]
                    },
                    {
                      "name": "Bonded",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "bonded",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A member has became bonded in a pool."
                      ]
                    },
                    {
                      "name": "Unbonded",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The member that unbonded"
                          ]
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId",
                          "docs": [
                            "The id of the pool unbonded from"
                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "the corresponding balance of the number of points that has been requested to be",
                            "unbonded (the argument of the `unbond` transaction) from the bonded pool."
                          ]
                        },
                        {
                          "name": "points",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "the number of points that are issued as a result of `balance` being dissolved into",
                            "the corresponding unbonding pool."
                          ]
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [
                            "the era in which the balance will be unbonded. In the absence of slashing,",
                            "these values will match. In the presence of slashing, the number of points that are",
                            "issued in the unbonding pool will be less than the amount requested to be unbonded."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A member has unbonded from their pool."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "points",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has withdrawn from their pool.",
                        "",
                        "The given number of `points` have been dissolved in return of `balance`.",
                        "",
                        "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                        "will be 1."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A pool has been destroyed."
                      ]
                    },
                    {
                      "name": "StateChanged",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "new_state",
                          "type": 68,
                          "typeName": "PoolState"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The state of a pool has changed"
                      ]
                    },
                    {
                      "name": "PoolSlashed",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The active balance of pool `pool_id` has been slashed to `balance`."
                      ]
                    },
                    {
                      "name": "UnbondingPoolSlashed",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                      ]
                    },
                    {
                      "name": "CommissionUpdated",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "current",
                          "type": 69,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A pool's commission rate has been changed."
                      ]
                    },
                    {
                      "name": "EraRewardsProcessed",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId",
                          "docs": [
                            "The id of the pool"
                          ]
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [
                            "The era that was processed."
                          ]
                        },
                        {
                          "name": "commission",
                          "type": 70,
                          "typeName": "Option<CommissionPaymentOf<T>>",
                          "docs": [
                            "The commission that was paid"
                          ]
                        },
                        {
                          "name": "bonus",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount of bonus that was unlocked"
                          ]
                        },
                        {
                          "name": "reinvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount that was bonded"
                          ]
                        },
                        {
                          "name": "bonus_cycle_ended",
                          "type": 37,
                          "typeName": "bool",
                          "docs": [
                            "The current bonus cycle ended"
                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "This event happens once per era on the previous era that rewards are paid out for. It",
                        "pays commission, distributes bonus, and reinvests rewards."
                      ]
                    },
                    {
                      "name": "RewardPaid",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId",
                          "docs": [
                            "The id of the pool"
                          ]
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [
                            "The era that was processed."
                          ]
                        },
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The validator that the payment was received from"
                          ]
                        },
                        {
                          "name": "reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount added to the pool's reward account"
                          ]
                        },
                        {
                          "name": "bonus",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount that was added to the pool's bonus account"
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Rewards were paid to a pool"
                      ]
                    },
                    {
                      "name": "PoolMutated",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "mutation",
                          "type": 72,
                          "typeName": "PoolMutationOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Pool has been mutated."
                      ]
                    },
                    {
                      "name": "Nominated",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId",
                          "docs": [
                            "The id of the pool"
                          ]
                        },
                        {
                          "name": "validators",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [
                            "The validators that were nominated"
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A nomination took place"
                      ]
                    },
                    {
                      "name": "EarlyBirdBonusQueued",
                      "fields": [
                        {
                          "name": "total_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The total amount to be distributed"
                          ]
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "EarlyBirdBonusDistributed",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId",
                          "docs": [
                            "The id of the pool"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount distributed"
                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "The early bird bonus has been distributed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events of this pallet."
              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "PoolState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Open",
                      "index": 0
                    },
                    {
                      "name": "Destroying",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 42
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 71
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "CommissionPayment"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "PoolMutation"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "duration",
                      "type": 73,
                      "typeName": "Option<EraIndex>"
                    },
                    {
                      "name": "new_commission",
                      "type": 74,
                      "typeName": "ShouldMutate<Option<Perbill>>"
                    },
                    {
                      "name": "max_commission",
                      "type": 69,
                      "typeName": "Option<Perbill>"
                    },
                    {
                      "name": "change_rate",
                      "type": 75,
                      "typeName": "Option<CommissionChangeRate<BlockNumber>>"
                    },
                    {
                      "name": "capacity",
                      "type": 77,
                      "typeName": "Option<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "ShouldMutate"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 69
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoMutation",
                      "index": 0
                    },
                    {
                      "name": "SomeMutation",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 76
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 76
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "CommissionChangeRate"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_delta",
                      "type": 42,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "min_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OfferCreated",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 6,
                          "typeName": "T::OfferId",
                          "docs": [
                            "ID of the offer"
                          ]
                        },
                        {
                          "name": "offer",
                          "type": 80,
                          "typeName": "OfferOf<T>",
                          "docs": [
                            "The offer that was placed"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A offer was placed"
                      ]
                    },
                    {
                      "name": "OfferCancelled",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 6,
                          "typeName": "T::OfferId",
                          "docs": [
                            "ID of the offer"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A offer was cancelled"
                      ]
                    },
                    {
                      "name": "LiquidityConfigUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "ID of the offer"
                          ]
                        },
                        {
                          "name": "config",
                          "type": 81,
                          "typeName": "LiquidityAccountConfigOf<T>",
                          "docs": [
                            "The offer that was placed"
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Liquidity config was set for account"
                      ]
                    },
                    {
                      "name": "LiquidityWithdrawn",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "ID of the account"
                          ]
                        },
                        {
                          "name": "offer_id",
                          "type": 6,
                          "typeName": "T::OfferId",
                          "docs": [
                            "ID of the offer"
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Liquidity was withdrawn from a offer"
                      ]
                    },
                    {
                      "name": "LiquidityAdded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "ID of the account"
                          ]
                        },
                        {
                          "name": "offer_id",
                          "type": 6,
                          "typeName": "T::OfferId",
                          "docs": [
                            "ID of the offer"
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Liquidity was added to a offer"
                      ]
                    },
                    {
                      "name": "BuyOrderCompleted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "AccountId of the buyer"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "TokenIdOf<T>",
                          "docs": [
                            "The tokenId that was exchanged"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount of tokens transferred"
                          ]
                        },
                        {
                          "name": "rate",
                          "type": 42,
                          "typeName": "Rate",
                          "docs": [
                            "The rate at which the order was completed"
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Buy order was completed"
                      ]
                    },
                    {
                      "name": "OfferCompleted",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 6,
                          "typeName": "T::OfferId",
                          "docs": [
                            "ID of the offer"
                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A offer was completed and removed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The pallet's event type."
              ]
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "types",
                "Offer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "total",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "rate",
                      "type": 44,
                      "typeName": "Rate"
                    },
                    {
                      "name": "min_average_reward_rate",
                      "type": 42,
                      "typeName": "Rate"
                    },
                    {
                      "name": "deposit",
                      "type": 63,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "types",
                "LiquidityAccountConfig"
              ],
              "params": [
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "MaxFilteredTokenCount",
                  "type": 82
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "token_filter",
                      "type": 83,
                      "typeName": "TokenFilter<TokenId, MaxFilteredTokenCount>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxFilteredTokenCount"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "types",
                "TokenFilter"
              ],
              "params": [
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "MaxFilteredTokenCount",
                  "type": 82
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "Whitelist",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "BoundedBTreeSet<TokenId, MaxFilteredTokenCount>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "BlockList",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "BoundedBTreeSet<TokenId, MaxFilteredTokenCount>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 85,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 86
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "def": {
                "sequence": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 55,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 89,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 89,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        },
                        {
                          "name": "result",
                          "type": 55,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 89,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CandidateBacked",
                      "fields": [
                        {
                          "type": 91,
                          "typeName": "CandidateReceipt<T::Hash>"
                        },
                        {
                          "type": 99,
                          "typeName": "HeadData"
                        },
                        {
                          "type": 100,
                          "typeName": "CoreIndex"
                        },
                        {
                          "type": 101,
                          "typeName": "GroupIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A candidate was backed. `[candidate, head_data]`"
                      ]
                    },
                    {
                      "name": "CandidateIncluded",
                      "fields": [
                        {
                          "type": 91,
                          "typeName": "CandidateReceipt<T::Hash>"
                        },
                        {
                          "type": 99,
                          "typeName": "HeadData"
                        },
                        {
                          "type": 100,
                          "typeName": "CoreIndex"
                        },
                        {
                          "type": 101,
                          "typeName": "GroupIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A candidate was included. `[candidate, head_data]`"
                      ]
                    },
                    {
                      "name": "CandidateTimedOut",
                      "fields": [
                        {
                          "type": 91,
                          "typeName": "CandidateReceipt<T::Hash>"
                        },
                        {
                          "type": 99,
                          "typeName": "HeadData"
                        },
                        {
                          "type": 100,
                          "typeName": "CoreIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A candidate timed out. `[candidate, head_data]`"
                      ]
                    },
                    {
                      "name": "UpwardMessagesReceived",
                      "fields": [
                        {
                          "name": "from",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some upward messages have been received and will be processed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "CandidateReceipt"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "descriptor",
                      "type": 92,
                      "typeName": "CandidateDescriptor<H>"
                    },
                    {
                      "name": "commitments_hash",
                      "type": 12,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "CandidateDescriptor"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 93,
                      "typeName": "Id"
                    },
                    {
                      "name": "relay_parent",
                      "type": 12,
                      "typeName": "H"
                    },
                    {
                      "name": "collator",
                      "type": 94,
                      "typeName": "CollatorId"
                    },
                    {
                      "name": "persisted_validation_data_hash",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "pov_hash",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "erasure_root",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "signature",
                      "type": 95,
                      "typeName": "CollatorSignature"
                    },
                    {
                      "name": "para_head",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "validation_code_hash",
                      "type": 98,
                      "typeName": "ValidationCodeHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "collator_app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 59,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "collator_app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 96,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 97,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "ValidationCodeHash"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "CoreIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "GroupIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CurrentCodeUpdated",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Current code has been updated for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "CurrentHeadUpdated",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Current head has been updated for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "CodeUpgradeScheduled",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A code upgrade has been scheduled for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "NewHeadNoted",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new head has been noted for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "ActionQueued",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A para has been queued to execute pending actions. `para_id`"
                      ]
                    },
                    {
                      "name": "PvfCheckStarted",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "ValidationCodeHash"
                        },
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The given para either initiated or subscribed to a PVF check for the given validation",
                        "code. `code_hash` `para_id`"
                      ]
                    },
                    {
                      "name": "PvfCheckAccepted",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "ValidationCodeHash"
                        },
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The given validation code was accepted by the PVF pre-checking vote.",
                        "`code_hash` `para_id`"
                      ]
                    },
                    {
                      "name": "PvfCheckRejected",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "ValidationCodeHash"
                        },
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The given validation code was rejected by the PVF pre-checking vote.",
                        "`code_hash` `para_id`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OpenChannelRequested",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Open HRMP channel requested.",
                        "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                      ]
                    },
                    {
                      "name": "OpenChannelCanceled",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 104,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An HRMP channel request sent by the receiver was canceled by either party.",
                        "`[by_parachain, channel_id]`"
                      ]
                    },
                    {
                      "name": "OpenChannelAccepted",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Open HRMP channel accepted. `[sender, recipient]`"
                      ]
                    },
                    {
                      "name": "ChannelClosed",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 104,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "HRMP channel closed. `[by_parachain, channel_id]`"
                      ]
                    },
                    {
                      "name": "HrmpChannelForceOpened",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An HRMP channel was opened via Root origin.",
                        "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HrmpChannelId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 93,
                      "typeName": "Id"
                    },
                    {
                      "name": "recipient",
                      "type": 93,
                      "typeName": "Id"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DisputeInitiated",
                      "fields": [
                        {
                          "type": 106,
                          "typeName": "CandidateHash"
                        },
                        {
                          "type": 107,
                          "typeName": "DisputeLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispute has been initiated. \\[candidate hash, dispute location\\]"
                      ]
                    },
                    {
                      "name": "DisputeConcluded",
                      "fields": [
                        {
                          "type": 106,
                          "typeName": "CandidateHash"
                        },
                        {
                          "type": 108,
                          "typeName": "DisputeResult"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A dispute has concluded for or against a candidate.",
                        "`\\[para id, candidate hash, dispute result\\]`"
                      ]
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A dispute has concluded with supermajority against a candidate.",
                        "Block authors should no longer build on top of this head and should",
                        "instead revert the block at the given height. This should be the",
                        "number of the child of the last known valid block in the chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "CandidateHash"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "DisputeLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Local",
                      "index": 0
                    },
                    {
                      "name": "Remote",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "DisputeResult"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Valid",
                      "index": 0
                    },
                    {
                      "name": "Invalid",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Registered",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "manager",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Deregistered",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Swapped",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "other_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewLeasePeriod",
                      "fields": [
                        {
                          "name": "lease_period",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new `[lease_period]` is beginning."
                      ]
                    },
                    {
                      "name": "Leased",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "leaser",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "period_begin",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "period_count",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "extra_reserved",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A para has won the right to a continuous set of lease periods as a parachain.",
                        "First balance is any extra amount reserved on top of the para's existing deposit.",
                        "Second balance is the total amount reserved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuctionStarted",
                      "fields": [
                        {
                          "name": "auction_index",
                          "type": 4,
                          "typeName": "AuctionIndex"
                        },
                        {
                          "name": "lease_period",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "ending",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An auction started. Provides its index and the block number where it will begin to",
                        "close and the first lease period of the quadruplet that is auctioned."
                      ]
                    },
                    {
                      "name": "AuctionClosed",
                      "fields": [
                        {
                          "name": "auction_index",
                          "type": 4,
                          "typeName": "AuctionIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An auction ended. All funds become unreserved."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "bidder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "extra_reserved",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                        "Second is the total."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "bidder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
                      ]
                    },
                    {
                      "name": "ReserveConfiscated",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "leaser",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve",
                        "but no parachain slot has been leased."
                      ]
                    },
                    {
                      "name": "BidAccepted",
                      "fields": [
                        {
                          "name": "bidder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_slot",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_slot",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A new bid has been accepted as the current winner."
                      ]
                    },
                    {
                      "name": "WinningOffset",
                      "fields": [
                        {
                          "name": "auction_index",
                          "type": 4,
                          "typeName": "AuctionIndex"
                        },
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The winning offset was chosen for an auction. This will map into the `Winning` storage map."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new crowdloaning campaign."
                      ]
                    },
                    {
                      "name": "Contributed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "fund_index",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contributed to a crowd sale."
                      ]
                    },
                    {
                      "name": "Withdrew",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "fund_index",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdrew full balance of a contributor."
                      ]
                    },
                    {
                      "name": "PartiallyRefunded",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The loans in a fund have been partially dissolved, i.e. there are some left",
                        "over child keys that still need to be killed."
                      ]
                    },
                    {
                      "name": "AllRefunded",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "All loans in a fund have been refunded."
                      ]
                    },
                    {
                      "name": "Dissolved",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Fund is dissolved."
                      ]
                    },
                    {
                      "name": "HandleBidResult",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "result",
                          "type": 55,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The result of trying to submit a new bid to the Slots pallet."
                      ]
                    },
                    {
                      "name": "Edited",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The configuration to a crowdloan has been edited."
                      ]
                    },
                    {
                      "name": "MemoUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "memo",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A memo has been updated."
                      ]
                    },
                    {
                      "name": "AddedToNewRaise",
                      "fields": [
                        {
                          "name": "para_id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A parachain has been moved to `NewRaise`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 135,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 152,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        },
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "The cost of sending it (borne by the chain) is included.",
                        "",
                        "\\[ destination, result, cost \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 115,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "type": 166,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    },
                    {
                      "name": "InvalidQuerierVersion",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Expected query response has been received but the expected querier location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "InvalidQuerier",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Expected query response has been received but the querier location of the response does",
                        "not match the expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected querier, maybe actual querier \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyStarted",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "A remote has requested XCM version change notification from us and we have honored it.",
                        "A version information message is sent to them and its cost is included.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyRequested",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "We have requested that a remote chain sends us XCM version change notifications.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyUnrequested",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "We have requested that a remote chain stops sending us XCM version change notifications.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "FeesPaid",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Fees were paid from a location for an operation (often for using `SendXcm`).",
                        "",
                        "\\[ paying location, fees \\]"
                      ]
                    },
                    {
                      "name": "AssetsClaimed",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 152,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some assets have been claimed from an asset trap",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "type": 115,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "LocationFull",
                      "index": 4
                    },
                    {
                      "name": "LocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ExpectationFalse",
                      "index": 22
                    },
                    {
                      "name": "PalletNotFound",
                      "index": 23
                    },
                    {
                      "name": "NameMismatch",
                      "index": 24
                    },
                    {
                      "name": "VersionIncompatible",
                      "index": 25
                    },
                    {
                      "name": "HoldingWouldOverflow",
                      "index": 26
                    },
                    {
                      "name": "ExportError",
                      "index": 27
                    },
                    {
                      "name": "ReanchorFailed",
                      "index": 28
                    },
                    {
                      "name": "NoDeal",
                      "index": 29
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 30
                    },
                    {
                      "name": "LockError",
                      "index": 31
                    },
                    {
                      "name": "NoPermission",
                      "index": 32
                    },
                    {
                      "name": "Unanchored",
                      "index": 33
                    },
                    {
                      "name": "NotDepositable",
                      "index": 34
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 35
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Barrier",
                      "index": 37
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 38
                    },
                    {
                      "name": "ExceedsStackLimit",
                      "index": 39
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 117,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junctions",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        },
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 120,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 120,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 120,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "key",
                          "type": 122,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "data",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 123,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 124,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "type": 121,
                          "typeName": "NetworkId"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 121
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 121
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "block_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    },
                    {
                      "name": "Westend",
                      "index": 4
                    },
                    {
                      "name": "Rococo",
                      "index": 5
                    },
                    {
                      "name": "Wococo",
                      "index": 6
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BitcoinCore",
                      "index": 8
                    },
                    {
                      "name": "BitcoinCash",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Moniker",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 126,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "def": {
                "sequence": {
                  "type": 127
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 135,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 145,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 146,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 151,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 121,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 117,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 151,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 129,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "def": {
                "sequence": {
                  "type": 130
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 131,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 132,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 133,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "type": 138,
                          "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 137
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 137
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "def": {
                "tuple": [
                  4,
                  115
                ]
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 139
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 141,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "xcm",
                "v3",
                "PalletInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 140,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "module_name",
                      "type": 140,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "major",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "minor",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "patch",
                      "type": 119,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "def": {
                "sequence": {
                  "type": 139
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "xcm",
                "v3",
                "MaybeErrorCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 143,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TruncatedError",
                      "fields": [
                        {
                          "type": 143,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 116
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 116
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "xcm",
                "v2",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "xcm",
                "v3",
                "QueryResponseInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 116,
                      "typeName": "MultiLocation"
                    },
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId"
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 149,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 131,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 150,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 131,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 150,
                          "typeName": "WildFungibility"
                        },
                        {
                          "name": "count",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "xcm",
                "v3",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "v2::MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "v3::MultiAssets"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 154,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "def": {
                "sequence": {
                  "type": 155
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 156,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 164,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 158,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        },
                        {
                          "type": 159,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "xcm",
                "v2",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 160,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 160,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 160,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 122,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 162,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 163,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "xcm",
                "v2",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 165,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 157,
                          "typeName": "v2::MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "v3::MultiLocation"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProcessingFailed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "origin",
                          "type": 168,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "error",
                          "type": 170,
                          "typeName": "ProcessMessageError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                      ]
                    },
                    {
                      "name": "Processed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "origin",
                          "type": 168,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "weight_used",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "success",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message is processed."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "origin",
                          "type": 168,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page_index",
                          "type": 4,
                          "typeName": "PageIndex"
                        },
                        {
                          "name": "message_index",
                          "type": 4,
                          "typeName": "T::Size"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Message placed in overweight queue."
                      ]
                    },
                    {
                      "name": "PageReaped",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 168,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PageIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This page was reaped."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "AggregateMessageOrigin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ump",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "UmpQueueId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "UmpQueueId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Para",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "messages",
                "ProcessMessageError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadFormat",
                      "index": 0
                    },
                    {
                      "name": "Corrupt",
                      "index": 1
                    },
                    {
                      "name": "Unsupported",
                      "index": 2
                    },
                    {
                      "name": "Overweight",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Yield",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "assigned_slots",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PermanentSlotAssigned",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A para was assigned a permanent parachain slot"
                      ]
                    },
                    {
                      "name": "TemporarySlotAssigned",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A para was assigned a temporary parachain slot"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "pallet_validator_manager",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidatorsRegistered",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Vec<T::ValidatorId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New validators were added to the set."
                      ]
                    },
                    {
                      "name": "ValidatorsDeregistered",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Vec<T::ValidatorId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Validators were removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollectionCreated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The id of the [`Collection`](ep_multi_tokens::Collection)"
                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The owner of the [`Collection`](ep_multi_tokens::Collection)"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new collection was created"
                      ]
                    },
                    {
                      "name": "CollectionDestroyed",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "id of collection destroyed"
                          ]
                        },
                        {
                          "name": "caller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that destroyed the collection"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A collection was destroyed."
                      ]
                    },
                    {
                      "name": "CollectionMutated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "[`CollectionId`](Config::CollectionId) of the",
                            "[`Collection`](ep_multi_tokens::Collection)"
                          ]
                        },
                        {
                          "name": "mutation",
                          "type": 174,
                          "typeName": "T::CollectionMutation",
                          "docs": [
                            "The mutation that was applied to the collection"
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A collection was mutated"
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "[`CollectionId`](Config::CollectionId) of minted token"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) minted"
                          ]
                        },
                        {
                          "name": "issuer",
                          "type": 182,
                          "typeName": "RootOrSigned<T::AccountId>",
                          "docs": [
                            "issuer of minted token"
                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The receiver of the token"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "the amount of units minted"
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Units of a token were minted"
                      ]
                    },
                    {
                      "name": "TokenCreated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) minted"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) minted"
                          ]
                        },
                        {
                          "name": "issuer",
                          "type": 182,
                          "typeName": "RootOrSigned<T::AccountId>",
                          "docs": [
                            "issuer of minted [`Token`](ep_multi_tokens::Token)"
                          ]
                        },
                        {
                          "name": "initial_supply",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "the initial supply of the [`Token`](ep_multi_tokens::Token)"
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A token was created"
                      ]
                    },
                    {
                      "name": "TokenMutated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) [`Token`](ep_multi_tokens::Token)",
                            "belongs to"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "Id of the [`Token`](ep_multi_tokens::Token) mutated"
                          ]
                        },
                        {
                          "name": "mutation",
                          "type": 183,
                          "typeName": "T::TokenMutation",
                          "docs": [
                            "mutation that was applied to the [`Token`](ep_multi_tokens::Token)"
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A token was mutated"
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "collection id of tokens burned"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "the token id that was burned"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account the tokens were burned from"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount that was burned for each token_id"
                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Units of a token were burned"
                      ]
                    },
                    {
                      "name": "TokenDestroyed",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) destroyed"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) destroyed"
                          ]
                        },
                        {
                          "name": "caller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the [`AccountId`](frame_system::Config::AccountId) that destroyed the",
                            "[`Token`](ep_multi_tokens::Token)"
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A token was destroyed"
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "collection_id of transferred collection"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "[`TokenId`](Config::TokenId) transferred"
                          ]
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that performed the transfer"
                          ]
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "transaction sender"
                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "transaction recipient"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "number of units transferred"
                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Units of a token were transferred"
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "FreezeOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Collection, token or account was frozen"
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "FreezeOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Collection, token or account was unfrozen"
                      ]
                    },
                    {
                      "name": "AttributeSet",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "collectionId of collection modified"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>",
                          "docs": [
                            "[`TokenId`](Config::TokenId) of [`Token`](ep_multi_tokens::Token) modified"
                          ]
                        },
                        {
                          "name": "key",
                          "type": 201,
                          "typeName": "T::AttributeKey",
                          "docs": [
                            "key of attribute set"
                          ]
                        },
                        {
                          "name": "value",
                          "type": 202,
                          "typeName": "T::AttributeValue",
                          "docs": [
                            "value of attribute set"
                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "New attribute has been set"
                      ]
                    },
                    {
                      "name": "AttributeRemoved",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "collectionId of collection modified"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>",
                          "docs": [
                            "tokenid of token modified"
                          ]
                        },
                        {
                          "name": "key",
                          "type": 201,
                          "typeName": "T::AttributeKey",
                          "docs": [
                            "key of attribute cleared"
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An attribute has been removed"
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The collection that was approved"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>",
                          "docs": [
                            "The token that was approved"
                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that made the approval"
                          ]
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that was approved to operate"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 77,
                          "typeName": "Option<T::TokenBalance>",
                          "docs": [
                            "The amount approved for"
                          ]
                        },
                        {
                          "name": "expiration",
                          "type": 73,
                          "typeName": "T::Expiration",
                          "docs": [
                            "The expiration of the approval"
                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An approval took place. If `token_id` is `None`, it applies to the whole collection."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The collection that was unapproved"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>",
                          "docs": [
                            "The token that was unapproved"
                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that `operator` was unapproved for"
                          ]
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that was unapproved to operate"
                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An unapproval took place. If `token_id` is `None`, it applies to the collection."
                      ]
                    },
                    {
                      "name": "CollectionAccountCreated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the account is created"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the account"
                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A new collection account was created"
                      ]
                    },
                    {
                      "name": "TokenAccountCreated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the account is created"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) for which the account is created"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the account"
                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The balance that this account holds"
                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A new token account was created"
                      ]
                    },
                    {
                      "name": "CollectionAccountDestroyed",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) of the destroyed account"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the destroyed account"
                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "A collection account was destroyed"
                      ]
                    },
                    {
                      "name": "TokenAccountDestroyed",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the account is created"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) fof the destroyed account"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the destroyed account"
                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "A token account was destroyed"
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The collection in which token was reserved"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The token that was reserved"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that reserved the tokens"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount that was reserved"
                          ]
                        },
                        {
                          "name": "reserve_id",
                          "type": 203,
                          "typeName": "Option<T::ReserveIdentifierType>",
                          "docs": [
                            "The identifier of the reserves"
                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Token units were reserved"
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) in which token was unreserved"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) that was unreserved"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that unreserved the tokens"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount that was unreserved"
                          ]
                        },
                        {
                          "name": "reserve_id",
                          "type": 203,
                          "typeName": "Option<T::ReserveIdentifierType>",
                          "docs": [
                            "The identifier of the unreserved tokens"
                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Token units were unreserved"
                      ]
                    },
                    {
                      "name": "MovedReserves",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) in which token was moved"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) that was moved"
                          ]
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that reserves were moved from"
                          ]
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that received the moved reserves"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount that was moved"
                          ]
                        },
                        {
                          "name": "reserve_id",
                          "type": 203,
                          "typeName": "Option<T::ReserveIdentifierType>",
                          "docs": [
                            "The identifier of the moved reserves"
                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Reserved token units were moved"
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) in which token was moved"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) that was moved"
                          ]
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that reserves were moved from"
                          ]
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that received the moved reserves"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount that was moved"
                          ]
                        },
                        {
                          "name": "reserve_id",
                          "type": 203,
                          "typeName": "Option<T::ReserveIdentifierType>",
                          "docs": [
                            "The identifier of the moved reserves"
                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Reserved token units were transferred"
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which balance was set"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) for which balance was set"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that balance was set for"
                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The balance of the account"
                          ]
                        },
                        {
                          "name": "reserved_balance",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The reserved balance of the account"
                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "The balance of an account was set"
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) of the tokens withdrawn"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) of the tokens withdrawn"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) withdrawn from"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount of tokens withdrawn"
                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Token units were withdrawn"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) of the tokens deposited"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) of the tokens deposited"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) deposited to"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount of tokens deposited"
                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Token units were deposited"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) of the tokens slashed"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) of the tokens slashed"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) slashed"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::TokenBalance",
                          "docs": [
                            "The amount of tokens slashed"
                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "An amount of tokens were slashed from account"
                      ]
                    },
                    {
                      "name": "CollectionUpdated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the value is set"
                          ]
                        },
                        {
                          "name": "value",
                          "type": 204,
                          "typeName": "Option<CollectionOf<T>>",
                          "docs": [
                            "new value of Collection storage"
                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Collection storage was set to `value`"
                      ]
                    },
                    {
                      "name": "TokenUpdated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the value is set"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) for which the value is set"
                          ]
                        },
                        {
                          "name": "value",
                          "type": 217,
                          "typeName": "Option<TokenOf<T>>",
                          "docs": [
                            "new value of Token storage"
                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Token storage was set to `value`"
                      ]
                    },
                    {
                      "name": "NextCollectionIdUpdated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "NextCollectionId storage was set to `collection_id`"
                      ]
                    },
                    {
                      "name": "CollectionAccountUpdated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the value is set"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that owned the token account"
                          ]
                        },
                        {
                          "name": "value",
                          "type": 222,
                          "typeName": "Option<CollectionAccountOf<T>>",
                          "docs": [
                            "new value of TokenAccount storage"
                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "TokenAccount storage was set to `value`"
                      ]
                    },
                    {
                      "name": "TokenAccountUpdated",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 6,
                          "typeName": "T::CollectionId",
                          "docs": [
                            "The [`CollectionId`](Config::CollectionId) for which the value is set"
                          ]
                        },
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "T::TokenId",
                          "docs": [
                            "The [`TokenId`](Config::TokenId) of the destroyed account"
                          ]
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that owned the token account"
                          ]
                        },
                        {
                          "name": "value",
                          "type": 229,
                          "typeName": "Option<TokenAccountOf<T>>",
                          "docs": [
                            "new value of TokenAccount storage"
                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "TokenAccount storage was set to `value`"
                      ]
                    },
                    {
                      "name": "MigrationStatusUpdated",
                      "fields": [
                        {
                          "name": "stage",
                          "type": 243,
                          "typeName": "MigrationStage"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Migration stage updated"
                      ]
                    },
                    {
                      "name": "ClaimedCollections",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that received the claim"
                          ]
                        },
                        {
                          "name": "ethereum_address",
                          "type": 244,
                          "typeName": "EthereumAddress",
                          "docs": [
                            "The ethereum address"
                          ]
                        },
                        {
                          "name": "collection_ids",
                          "type": 245,
                          "typeName": "Vec<CollectionIdPair<T::CollectionId>>",
                          "docs": [
                            "The collection ids that were claimed"
                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Collections were claimed"
                      ]
                    },
                    {
                      "name": "ClaimedTokens",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that received the tokens"
                          ]
                        },
                        {
                          "name": "ethereum_address",
                          "type": 244,
                          "typeName": "EthereumAddress",
                          "docs": [
                            "The ethereum address"
                          ]
                        },
                        {
                          "name": "asset_ids",
                          "type": 247,
                          "typeName": "Vec<AssetIdWithEthOf<T>>",
                          "docs": [
                            "The asset ids that were claimed"
                          ]
                        },
                        {
                          "name": "more_tokens_remain",
                          "type": 37,
                          "typeName": "bool",
                          "docs": [
                            "This is true if there are still more tokens to claim"
                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "Tokens were claimed"
                      ]
                    },
                    {
                      "name": "ClaimTokensInitiated",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that will receive the tokens"
                          ]
                        },
                        {
                          "name": "ethereum_address",
                          "type": 244,
                          "typeName": "EthereumAddress",
                          "docs": [
                            "The ethereum address"
                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "Claims tokens initiated"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "ep_multi_tokens",
                "collection",
                "DefaultCollectionMutation"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Royalty",
                  "type": 175
                },
                {
                  "name": "ExplicitRoyaltyCurrencies",
                  "type": 176
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 36,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "royalty",
                      "type": 179,
                      "typeName": "ShouldMutate<Option<Royalty>>"
                    },
                    {
                      "name": "explicit_royalty_currencies",
                      "type": 181,
                      "typeName": "Option<ExplicitRoyaltyCurrencies>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "market",
                "DefaultRoyalty"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "percentage",
                      "type": 44,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 177
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 178,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "AssetId"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 6
                },
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection_id",
                      "type": 63,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "token_id",
                      "type": 63,
                      "typeName": "TokenId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "sequence": {
                  "type": 177
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "ShouldMutate"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 180
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoMutation",
                      "index": 0
                    },
                    {
                      "name": "SomeMutation",
                      "fields": [
                        {
                          "type": 180,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 175
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 175
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 176
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 176
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "RootOrSigned"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "DefaultTokenMutation"
              ],
              "params": [
                {
                  "name": "Royalty",
                  "type": 175
                },
                {
                  "name": "TokenMetadata",
                  "type": 184
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "behavior",
                      "type": 192,
                      "typeName": "ShouldMutate<Option<TokenMarketBehavior<Royalty>>>"
                    },
                    {
                      "name": "listing_forbidden",
                      "type": 195,
                      "typeName": "ShouldMutate<bool>"
                    },
                    {
                      "name": "metadata",
                      "type": 196,
                      "typeName": "ShouldMutate<TokenMetadata>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "ep_multi_tokens",
                "frame",
                "DefaultTokenMetadata"
              ],
              "params": [
                {
                  "name": "ForeignTokenMetadata",
                  "type": 185
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "Foreign",
                      "fields": [
                        {
                          "type": 185,
                          "typeName": "ForeignTokenMetadata"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "ep_multi_tokens",
                "frame",
                "DefaultForeignTokenMetadata"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Name",
                  "type": 186
                },
                {
                  "name": "Symbol",
                  "type": 189
                },
                {
                  "name": "Location",
                  "type": 116
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "decimal_count",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 186,
                      "typeName": "Name"
                    },
                    {
                      "name": "symbol",
                      "type": 189,
                      "typeName": "Symbol"
                    },
                    {
                      "name": "location",
                      "type": 144,
                      "typeName": "Option<Location>"
                    },
                    {
                      "name": "units_per_second",
                      "type": 77,
                      "typeName": "Option<u128>"
                    },
                    {
                      "name": "preminted_supply",
                      "type": 63,
                      "typeName": "TokenBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "types",
                "BoundedString"
              ],
              "params": [
                {
                  "name": "MaxLength",
                  "type": 187
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 188,
                      "typeName": "BoundedVec<u8, MaxLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "enjin_runtime",
                "ForeignTokenNameLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "types",
                "BoundedString"
              ],
              "params": [
                {
                  "name": "MaxLength",
                  "type": 190
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 191,
                      "typeName": "BoundedVec<u8, MaxLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "enjin_runtime",
                "ForeignTokenSymbolLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "ShouldMutate"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 193
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoMutation",
                      "index": 0
                    },
                    {
                      "name": "SomeMutation",
                      "fields": [
                        {
                          "type": 193,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 194
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 194
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "TokenMarketBehavior"
              ],
              "params": [
                {
                  "name": "Royalty",
                  "type": 175
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HasRoyalty",
                      "fields": [
                        {
                          "type": 175,
                          "typeName": "Royalty"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "IsCurrency",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "ShouldMutate"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoMutation",
                      "index": 0
                    },
                    {
                      "name": "SomeMutation",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "ShouldMutate"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 184
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoMutation",
                      "index": 0
                    },
                    {
                      "name": "SomeMutation",
                      "fields": [
                        {
                          "type": 184,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "Freeze"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "CollectionId",
                  "type": 6
                },
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection_id",
                      "type": 63,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "freeze_type",
                      "type": 198,
                      "typeName": "FreezeType<AccountId, TokenId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "FreezeType"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Collection",
                      "index": 0
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "TokenId"
                        },
                        {
                          "name": "freeze_state",
                          "type": 199,
                          "typeName": "Option<FreezeState>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "CollectionAccount",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "TokenAccount",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "TokenId"
                        },
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 200
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 200
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "FreezeState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Permanent",
                      "index": 0
                    },
                    {
                      "name": "Temporary",
                      "index": 1
                    },
                    {
                      "name": "Never",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 134
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 134
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 205
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 205
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "ep_multi_tokens",
                "collection",
                "Collection"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Policy",
                  "type": 206
                },
                {
                  "name": "ExplicitRoyaltyCurrencies",
                  "type": 213
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "policy",
                      "type": 206,
                      "typeName": "Policy"
                    },
                    {
                      "name": "token_count",
                      "type": 10,
                      "typeName": "TokenCount"
                    },
                    {
                      "name": "attribute_count",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_deposit",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "explicit_royalty_currencies",
                      "type": 213,
                      "typeName": "ExplicitRoyaltyCurrencies"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "DefaultCollectionPolicy"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Royalty",
                  "type": 175
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mint",
                      "type": 207,
                      "typeName": "DefaultMintPolicy<TokenBalance>"
                    },
                    {
                      "name": "burn",
                      "type": 209,
                      "typeName": "DefaultBurnPolicy"
                    },
                    {
                      "name": "transfer",
                      "type": 210,
                      "typeName": "DefaultTransferPolicy"
                    },
                    {
                      "name": "attribute",
                      "type": 211,
                      "typeName": "DefaultAttributePolicy"
                    },
                    {
                      "name": "market",
                      "type": 212,
                      "typeName": "DefaultMarketPolicy<Royalty>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "mint",
                "DefaultMintPolicy"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_token_count",
                      "type": 208,
                      "typeName": "Option<TokenCount>"
                    },
                    {
                      "name": "max_token_supply",
                      "type": 77,
                      "typeName": "Option<TokenBalance>"
                    },
                    {
                      "name": "force_single_mint",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 11
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "burn",
                "DefaultBurnPolicy"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "transfer",
                "DefaultTransferPolicy"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "is_frozen",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "attribute",
                "DefaultAttributePolicy"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "market",
                "DefaultMarketPolicy"
              ],
              "params": [
                {
                  "name": "Royalty",
                  "type": 175
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "royalty",
                      "type": 180,
                      "typeName": "Option<Royalty>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 177
                },
                {
                  "name": "V",
                  "type": 56
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 214,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 177
                },
                {
                  "name": "V",
                  "type": 56
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 215
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "def": {
                "sequence": {
                  "type": 216
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "def": {
                "tuple": [
                  177,
                  56
                ]
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 218
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 218
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "Token"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Royalty",
                  "type": 175
                },
                {
                  "name": "TokenMetadata",
                  "type": 184
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "supply",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "cap",
                      "type": 219,
                      "typeName": "Option<TokenCap<TokenBalance>>"
                    },
                    {
                      "name": "freeze_state",
                      "type": 199,
                      "typeName": "Option<FreezeState>"
                    },
                    {
                      "name": "minimum_balance",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "sufficiency",
                      "type": 221,
                      "typeName": "Sufficiency<Balance>"
                    },
                    {
                      "name": "mint_deposit",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "attribute_count",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "market_behavior",
                      "type": 193,
                      "typeName": "Option<TokenMarketBehavior<Royalty>>"
                    },
                    {
                      "name": "listing_forbidden",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "metadata",
                      "type": 184,
                      "typeName": "TokenMetadata"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 220
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 220
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "TokenCap"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SingleMint",
                      "index": 0
                    },
                    {
                      "name": "Supply",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "TokenBalance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "CollapsingSupply",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "TokenBalance"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "ep_multi_tokens",
                "token",
                "Sufficiency"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sufficient",
                      "index": 0
                    },
                    {
                      "name": "Insufficient",
                      "fields": [
                        {
                          "name": "unit_price",
                          "type": 63,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 223
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 223
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "features",
                "collection",
                "types",
                "CollectionAccount"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Expiration",
                  "type": 73
                },
                {
                  "name": "MaxApprovalCount",
                  "type": 224
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "is_frozen",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "approvals",
                      "type": 225,
                      "typeName": "BoundedBTreeMap<AccountId, Expiration, MaxApprovalCount>"
                    },
                    {
                      "name": "account_count",
                      "type": 119,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxOperatorsPerAccount"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 73
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 226,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 73
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 227
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "def": {
                "sequence": {
                  "type": 228
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "def": {
                "tuple": [
                  0,
                  73
                ]
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 230
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 230
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "features",
                "token",
                "types",
                "TokenAccount"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Approval",
                  "type": 231
                },
                {
                  "name": "ApprovalCount",
                  "type": 224
                },
                {
                  "name": "ReserveIdentifier",
                  "type": 134
                },
                {
                  "name": "LockId",
                  "type": 134
                },
                {
                  "name": "MaxReserves",
                  "type": 232
                },
                {
                  "name": "MaxLocks",
                  "type": 233
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "reserved_balance",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "locked_balance",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "named_reserves",
                      "type": 234,
                      "typeName": "BoundedBTreeMap<ReserveIdentifier, TokenBalance, MaxReserves>"
                    },
                    {
                      "name": "locks",
                      "type": 238,
                      "typeName": "BoundedBTreeMap<LockId, TokenBalance, MaxLocks>"
                    },
                    {
                      "name": "approvals",
                      "type": 239,
                      "typeName": "BoundedBTreeMap<AccountId, Approval, ApprovalCount>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "features",
                "operator",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Expiration",
                  "type": 73
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "expiration",
                      "type": 73,
                      "typeName": "Expiration"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxMultiTokensReserves"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxMultiTokensLocks"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 134
                },
                {
                  "name": "V",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 235,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 134
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 236
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "def": {
                "sequence": {
                  "type": 237
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "def": {
                "tuple": [
                  134,
                  6
                ]
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 134
                },
                {
                  "name": "V",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 235,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 231
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 240,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 231
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 241
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "def": {
                "sequence": {
                  "type": 242
                }
              }
            }
          },
          {
            "id": 242,
            "type": {
              "def": {
                "tuple": [
                  0,
                  231
                ]
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "migrations",
                "MigrationStage"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotStarted",
                      "index": 0
                    },
                    {
                      "name": "InProgress",
                      "index": 1
                    },
                    {
                      "name": "Completed",
                      "index": 2
                    },
                    {
                      "name": "Failed",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 122,
                      "typeName": "[u8; 20]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "def": {
                "sequence": {
                  "type": 246
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "features",
                "claim",
                "CollectionIdPair"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ethereum",
                      "type": 6,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "native",
                      "type": 6,
                      "typeName": "CollectionId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "def": {
                "sequence": {
                  "type": 248
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "features",
                "claim",
                "AssetIdWithEth"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 6
                },
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ethereum_collection_id",
                      "type": 6,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "collection_id",
                      "type": 6,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "token_id",
                      "type": 6,
                      "typeName": "TokenId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FuelTankCreated",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that owns the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "name",
                          "type": 250,
                          "typeName": "FuelTankNameOf<T>",
                          "docs": [
                            "The name of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account id of the [`FuelTank`]"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new [`FuelTank`] was created."
                      ]
                    },
                    {
                      "name": "FuelTankMutated",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "mutation",
                          "type": 253,
                          "typeName": "T::TankMutation",
                          "docs": [
                            "The mutation that was applied"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A [`FuelTank`] was mutated"
                      ]
                    },
                    {
                      "name": "FuelTankDestroyed",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A [`FuelTank`] was destroyed"
                      ]
                    },
                    {
                      "name": "CallDispatched",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that dispatched the call"
                          ]
                        },
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A call was dispatched through a [`FuelTank`]."
                      ]
                    },
                    {
                      "name": "AccountAdded",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that was added"
                          ]
                        },
                        {
                          "name": "tank_deposit",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The deposit reserved by the [`FuelTank`] for this account"
                          ]
                        },
                        {
                          "name": "user_deposit",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The deposit reserved by the user for this account"
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was added to a [`FuelTank`]"
                      ]
                    },
                    {
                      "name": "AccountRemoved",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that was removed"
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An account was removed from a [`FuelTank`]"
                      ]
                    },
                    {
                      "name": "AccountRuleDataRemoved",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that was removed"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId",
                          "docs": [
                            "The id of the rule set that was removed"
                          ]
                        },
                        {
                          "name": "rule_kind",
                          "type": 268,
                          "typeName": "DispatchRuleKind",
                          "docs": [
                            "The [`DispatchRuleKind`] that was removed"
                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Account data of [`AccountId`](frame_system::Config::AccountId) was removed from",
                        "[`RuleSetId`](Config::RuleSetId)"
                      ]
                    },
                    {
                      "name": "RuleSetInserted",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId",
                          "docs": [
                            "The id of the rule set that was added"
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new rule set was added to [`FuelTank`]"
                      ]
                    },
                    {
                      "name": "RuleSetRemoved",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId",
                          "docs": [
                            "The id of the rule set that was removed"
                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A rule set was removed from [`FuelTank`]"
                      ]
                    },
                    {
                      "name": "MutateFreezeStateScheduled",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 73,
                          "typeName": "Option<T::RuleSetId>",
                          "docs": [
                            "The possible [`RuleSetId`](Config::RuleSetId)"
                          ]
                        },
                        {
                          "name": "is_frozen",
                          "type": 37,
                          "typeName": "bool",
                          "docs": [
                            "The new `is_frozen` state"
                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "The freeze state mutation for fuel tank or its rule set was scheduled"
                      ]
                    },
                    {
                      "name": "FreezeStateMutated",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 73,
                          "typeName": "Option<T::RuleSetId>",
                          "docs": [
                            "The possible [`RuleSetId`](Config::RuleSetId)"
                          ]
                        },
                        {
                          "name": "is_frozen",
                          "type": 37,
                          "typeName": "bool",
                          "docs": [
                            "The new `is_frozen` state"
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The freeze state change for fuel tank or its rule set was executed in `on_finalize`"
                      ]
                    },
                    {
                      "name": "ScheduleMutateFreezeStateFailed",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 73,
                          "typeName": "Option<T::RuleSetId>",
                          "docs": [
                            "The possible [`RuleSetId`](Config::RuleSetId)"
                          ]
                        },
                        {
                          "name": "is_frozen",
                          "type": 37,
                          "typeName": "bool",
                          "docs": [
                            "The new `is_frozen` state"
                          ]
                        },
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError",
                          "docs": [
                            "The error"
                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "The freeze state change for fuel tank or its rule set failed in `on_finalize`"
                      ]
                    },
                    {
                      "name": "DispatchFailed",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "caller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) that dispatched the call"
                          ]
                        },
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError",
                          "docs": [
                            "The error"
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "The dispatch of a call has failed"
                      ]
                    },
                    {
                      "name": "ConsumptionSet",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The [`AccountId`](frame_system::Config::AccountId) of the [`FuelTank`]"
                          ]
                        },
                        {
                          "name": "user_id",
                          "type": 36,
                          "typeName": "Option<T::AccountId>",
                          "docs": [
                            "The possible user [`AccountId`](frame_system::Config::AccountId) whose consumption",
                            "was set"
                          ]
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId",
                          "docs": [
                            "The [`RuleSetId`](Config::RuleSetId)"
                          ]
                        },
                        {
                          "name": "consumption",
                          "type": 269,
                          "typeName": "ConsumptionOf<T>",
                          "docs": [
                            "The new [`Consumption`](crate::Consumption)"
                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The consumption for an account was set for a rule set on a [`FuelTank`]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "types",
                "BoundedString"
              ],
              "params": [
                {
                  "name": "MaxLength",
                  "type": 251
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 252,
                      "typeName": "BoundedVec<u8, MaxLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxFuelTankNameLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "impls",
                "DefaultTankMutation"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 254
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "user_account_management",
                      "type": 255,
                      "typeName": "ShouldMutate<Option<UserAccountManagement>>"
                    },
                    {
                      "name": "provides_deposit",
                      "type": 258,
                      "typeName": "Option<bool>"
                    },
                    {
                      "name": "account_rules",
                      "type": 259,
                      "typeName": "Option<AccountRuleSetDescriptorsOf<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "enjin_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "ShouldMutate"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 256
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoMutation",
                      "index": 0
                    },
                    {
                      "name": "SomeMutation",
                      "fields": [
                        {
                          "type": 256,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 257
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 257
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "UserAccountManagement"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tank_reserves_existential_deposit",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "tank_reserves_account_creation_deposit",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 37
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 260
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 260
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 261
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 267,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "AccountRuleDescriptor"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WhitelistedCallers",
                      "fields": [
                        {
                          "type": 262,
                          "typeName": "WhitelistedCallersRuleOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RequireToken",
                      "fields": [
                        {
                          "type": 266,
                          "typeName": "RequireTokenRuleOf<T>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "whitelisted_callers",
                "WhitelistedCallersRule"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Max",
                  "type": 263
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 264,
                      "typeName": "BoundedBTreeSet<AccountId, Max>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxWhitelistedCallers"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 265,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 78
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "require_token",
                "RequireTokenRule"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 6
                },
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection_id",
                      "type": 6,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "token_id",
                      "type": 6,
                      "typeName": "TokenId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "def": {
                "sequence": {
                  "type": 261
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "DispatchRuleKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WhitelistedCallers",
                      "index": 0
                    },
                    {
                      "name": "WhitelistedCollections",
                      "index": 1
                    },
                    {
                      "name": "MaxFuelBurnPerTransaction",
                      "index": 2
                    },
                    {
                      "name": "UserFuelBudget",
                      "index": 3
                    },
                    {
                      "name": "TankFuelBudget",
                      "index": 4
                    },
                    {
                      "name": "RequireToken",
                      "index": 5
                    },
                    {
                      "name": "PermittedCalls",
                      "index": 6
                    },
                    {
                      "name": "PermittedExtrinsics",
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "Consumption"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_consumed",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "last_reset_block",
                      "type": 73,
                      "typeName": "Option<BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "pallet_extrinsic_pause",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PalletPaused",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 271,
                          "typeName": "BoundedStringOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "All pallet extrinsics are paused."
                      ]
                    },
                    {
                      "name": "PalletResumed",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 271,
                          "typeName": "BoundedStringOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "All pallet extrinsics are resumed."
                      ]
                    },
                    {
                      "name": "ExtrinsicPaused",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 271,
                          "typeName": "BoundedStringOf<T>"
                        },
                        {
                          "name": "extrinsic_name",
                          "type": 271,
                          "typeName": "BoundedStringOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Extrinsic is paused."
                      ]
                    },
                    {
                      "name": "ExtrinsicResumed",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 271,
                          "typeName": "BoundedStringOf<T>"
                        },
                        {
                          "name": "extrinsic_name",
                          "type": 271,
                          "typeName": "BoundedStringOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Extrinsic is resumed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The pallet's event type."
              ]
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "types",
                "BoundedString"
              ],
              "params": [
                {
                  "name": "MaxLength",
                  "type": 272
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 273,
                      "typeName": "BoundedVec<u8, MaxLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxNameLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "pallet_marketplace",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ListingCreated",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>",
                          "docs": [
                            "Id for the listing"
                          ]
                        },
                        {
                          "name": "listing",
                          "type": 275,
                          "typeName": "ListingOf<T>",
                          "docs": [
                            "The listing"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A listing was created"
                      ]
                    },
                    {
                      "name": "ListingCancelled",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>",
                          "docs": [
                            "Id for the listing"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A listing was cancelled"
                      ]
                    },
                    {
                      "name": "ListingFilled",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>",
                          "docs": [
                            "ID of the listing"
                          ]
                        },
                        {
                          "name": "buyer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "account that filled the listing"
                          ]
                        },
                        {
                          "name": "amount_filled",
                          "type": 6,
                          "typeName": "TokenBalanceOf<T>",
                          "docs": [
                            "The amount that was filled"
                          ]
                        },
                        {
                          "name": "amount_remaining",
                          "type": 6,
                          "typeName": "TokenBalanceOf<T>",
                          "docs": [
                            "Amount remaining to be filled"
                          ]
                        },
                        {
                          "name": "protocol_fee",
                          "type": 6,
                          "typeName": "TokenBalanceOf<T>",
                          "docs": [
                            "Amount paid as protocol fee"
                          ]
                        },
                        {
                          "name": "royalty",
                          "type": 6,
                          "typeName": "TokenBalanceOf<T>",
                          "docs": [
                            "Amount that went to royalties"
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A listing was filled or partially filled"
                      ]
                    },
                    {
                      "name": "BidPlaced",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>",
                          "docs": [
                            "ID of the listing"
                          ]
                        },
                        {
                          "name": "bid",
                          "type": 283,
                          "typeName": "BidOf<T>",
                          "docs": [
                            "The bid that was placed"
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A bid was placed"
                      ]
                    },
                    {
                      "name": "AuctionFinalized",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>",
                          "docs": [
                            "The listing id"
                          ]
                        },
                        {
                          "name": "winning_bid",
                          "type": 282,
                          "typeName": "Option<BidOf<T>>",
                          "docs": [
                            "The bid that won"
                          ]
                        },
                        {
                          "name": "protocol_fee",
                          "type": 6,
                          "typeName": "TokenBalanceOf<T>",
                          "docs": [
                            "Amount paid as protocol fee"
                          ]
                        },
                        {
                          "name": "royalty",
                          "type": 6,
                          "typeName": "TokenBalanceOf<T>",
                          "docs": [
                            "Amount that went to royalties"
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An auction was finalized"
                      ]
                    },
                    {
                      "name": "ProtocolFeeSet",
                      "fields": [
                        {
                          "name": "protocol_fee",
                          "type": 42,
                          "typeName": "Perbill",
                          "docs": [
                            "The new protocol fee"
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Protocol fee was set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The Event for this pallet"
              ]
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "listing",
                "Listing"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 6
                },
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Salt",
                  "type": 276
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "seller",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "make_asset_id",
                      "type": 177,
                      "typeName": "AssetId<CollectionId, TokenId>"
                    },
                    {
                      "name": "take_asset_id",
                      "type": 177,
                      "typeName": "AssetId<CollectionId, TokenId>"
                    },
                    {
                      "name": "amount",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "price",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "min_take_value",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "fee_side",
                      "type": 277,
                      "typeName": "FeeSide"
                    },
                    {
                      "name": "creation_block",
                      "type": 119,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "deposit",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "salt",
                      "type": 276,
                      "typeName": "Salt"
                    },
                    {
                      "name": "data",
                      "type": 278,
                      "typeName": "ListingData<BlockNumber>"
                    },
                    {
                      "name": "state",
                      "type": 280,
                      "typeName": "ListingState<AccountId, TokenBalance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "listing",
                "FeeSide"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFee",
                      "index": 0
                    },
                    {
                      "name": "Make",
                      "index": 1
                    },
                    {
                      "name": "Take",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "listing",
                "ListingData"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FixedPrice",
                      "index": 0
                    },
                    {
                      "name": "Auction",
                      "fields": [
                        {
                          "type": 279,
                          "typeName": "AuctionData<BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "auction",
                "AuctionData"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start_block",
                      "type": 119,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "end_block",
                      "type": 119,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "listing",
                "ListingState"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FixedPrice",
                      "fields": [
                        {
                          "name": "amount_filled",
                          "type": 63,
                          "typeName": "TokenBalance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Auction",
                      "fields": [
                        {
                          "type": 281,
                          "typeName": "AuctionState<AccountId, TokenBalance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "auction",
                "AuctionState"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "high_bid",
                      "type": 282,
                      "typeName": "Option<Bid<AccountId, TokenBalance>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 283
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 283
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "pallet_marketplace",
                "features",
                "auction",
                "Bid"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bidder",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "price",
                      "type": 63,
                      "typeName": "TokenBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 285,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 286,
                          "typeName": "Option<TaskName>"
                        },
                        {
                          "name": "result",
                          "type": 55,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallUnavailable",
                      "fields": [
                        {
                          "name": "task",
                          "type": 285,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 286,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    },
                    {
                      "name": "PeriodicFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 285,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 286,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The given task was unable to be renewed since the agenda is full at that block."
                      ]
                    },
                    {
                      "name": "PermanentlyOverweight",
                      "fields": [
                        {
                          "name": "task",
                          "type": 285,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 286,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The given task can never be executed since it is overweight."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 285,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account has delegated their vote to another account. \\[who, target\\]"
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has cancelled a previous delegation operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Submitted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 290,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 291,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A referendum has been submitted."
                      ]
                    },
                    {
                      "name": "DecisionDepositPlaced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The decision deposit has been placed."
                      ]
                    },
                    {
                      "name": "DecisionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The decision deposit has been refunded."
                      ]
                    },
                    {
                      "name": "DepositSlashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A deposit has been slashaed."
                      ]
                    },
                    {
                      "name": "DecisionStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 290,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 291,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 639,
                          "typeName": "T::Tally",
                          "docs": [
                            "The current tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A referendum has moved into the deciding phase."
                      ]
                    },
                    {
                      "name": "ConfirmStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ConfirmAborted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Confirmed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 639,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A referendum has ended its confirmation phase and is ready for approval."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A referendum has been approved and its proposal has been scheduled."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 639,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 639,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A referendum has been timed out without being decided."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 639,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 639,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A referendum has been killed."
                      ]
                    },
                    {
                      "name": "SubmissionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The submission deposit has been refunded."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "PreimageHash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Metadata for a referendum has been set."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "PreimageHash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Metadata for a referendum has been cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 290,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "preimages",
                "Bounded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 292
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Inline",
                      "fields": [
                        {
                          "type": 638,
                          "typeName": "BoundedInline"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Lookup",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "Hash"
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "enjin_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 293,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 297,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Babe",
                      "fields": [
                        {
                          "type": 298,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 308,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "type": 311,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 371,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 380,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 385,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 396,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 397,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "type": 398,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "VoterList",
                      "fields": [
                        {
                          "type": 405,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "NominationPools",
                      "fields": [
                        {
                          "type": 406,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "StakeExchange",
                      "fields": [
                        {
                          "type": 411,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StakeExchange, Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 413,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 421,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Configuration",
                      "fields": [
                        {
                          "type": 423,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "ParasShared",
                      "fields": [
                        {
                          "type": 430,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "ParaInclusion",
                      "fields": [
                        {
                          "type": 431,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "ParaInherent",
                      "fields": [
                        {
                          "type": 432,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Paras",
                      "fields": [
                        {
                          "type": 460,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>"
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Initializer",
                      "fields": [
                        {
                          "type": 462,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>"
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Hrmp",
                      "fields": [
                        {
                          "type": 463,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "ParasDisputes",
                      "fields": [
                        {
                          "type": 464,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "ParasSlashing",
                      "fields": [
                        {
                          "type": 465,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Registrar",
                      "fields": [
                        {
                          "type": 469,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Slots",
                      "fields": [
                        {
                          "type": 470,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Auctions",
                      "fields": [
                        {
                          "type": 471,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>"
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Crowdloan",
                      "fields": [
                        {
                          "type": 473,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>"
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "XcmPallet",
                      "fields": [
                        {
                          "type": 482,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>"
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 503,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>"
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "ParasSudoWrapper",
                      "fields": [
                        {
                          "type": 504,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSudoWrapper, Runtime>"
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "AssignedSlots",
                      "fields": [
                        {
                          "type": 506,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssignedSlots, Runtime>"
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "ValidatorManager",
                      "fields": [
                        {
                          "type": 508,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ValidatorManager, Runtime>"
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "MultiTokens",
                      "fields": [
                        {
                          "type": 509,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiTokens, Runtime>"
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "FuelTanks",
                      "fields": [
                        {
                          "type": 540,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FuelTanks, Runtime>"
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "ExtrinsicPause",
                      "fields": [
                        {
                          "type": 570,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ExtrinsicPause, Runtime>"
                        }
                      ],
                      "index": 255
                    },
                    {
                      "name": "Marketplace",
                      "fields": [
                        {
                          "type": 571,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Marketplace, Runtime>"
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Beefy",
                      "fields": [
                        {
                          "type": 573,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Beefy, Runtime>"
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 583,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 585,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "ConvictionVoting",
                      "fields": [
                        {
                          "type": 586,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>"
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Referenda",
                      "fields": [
                        {
                          "type": 591,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>"
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Whitelist",
                      "fields": [
                        {
                          "type": 594,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>"
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "FellowshipCollective",
                      "fields": [
                        {
                          "type": 595,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>"
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "FellowshipReferenda",
                      "fields": [
                        {
                          "type": 596,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>"
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 597,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>"
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "VoteManager",
                      "fields": [
                        {
                          "type": 636,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoteManager, Runtime>"
                        }
                      ],
                      "index": 109
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "- `O(1)`"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`."
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 294,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 296,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 13,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 294,
            "type": {
              "def": {
                "sequence": {
                  "type": 295
                }
              }
            }
          },
          {
            "id": 295,
            "type": {
              "def": {
                "tuple": [
                  13,
                  13
                ]
              }
            }
          },
          {
            "id": 296,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 10,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 299,
                          "typeName": "Box<EquivocationProof<T::Header>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 299,
                          "typeName": "Box<EquivocationProof<T::Header>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported.",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "plan_config_change",
                      "fields": [
                        {
                          "name": "config",
                          "type": 305,
                          "typeName": "NextConfigDescriptor"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                        "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                        "Multiple calls to this method will replace any existing planned config change that had",
                        "not been enacted yet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "sp_consensus_slots",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 300
                },
                {
                  "name": "Id",
                  "type": 302
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 302,
                      "typeName": "Id"
                    },
                    {
                      "name": "slot",
                      "type": 303,
                      "typeName": "Slot"
                    },
                    {
                      "name": "first_header",
                      "type": 300,
                      "typeName": "Header"
                    },
                    {
                      "name": "second_header",
                      "type": 300,
                      "typeName": "Header"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 301
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 12,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 119,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 12,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 12,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 14,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "sp_consensus_babe",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 59,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "sp_session",
                "MembershipProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "trie_nodes",
                      "type": 296,
                      "typeName": "Vec<Vec<u8>>"
                    },
                    {
                      "name": "validator_count",
                      "type": 4,
                      "typeName": "ValidatorCount"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "NextConfigDescriptor"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": "c",
                          "type": 306,
                          "typeName": "(u64, u64)"
                        },
                        {
                          "name": "allowed_slots",
                          "type": 307,
                          "typeName": "AllowedSlots"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 306,
            "type": {
              "def": {
                "tuple": [
                  11,
                  11
                ]
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "sp_consensus_babe",
                "AllowedSlots"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PrimarySlots",
                      "index": 0
                    },
                    {
                      "name": "PrimaryAndSecondaryPlainSlots",
                      "index": 1
                    },
                    {
                      "name": "PrimaryAndSecondaryVRFSlots",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor."
                      ]
                    },
                    {
                      "name": "set_balance_deprecated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 63,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "old_reserved",
                          "type": 63,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the regular balance of a given account; it also takes a reserved balance but this",
                        "must be the same as the account's current reserved balance.",
                        "",
                        "The dispatch origin for this call is `root`.",
                        "",
                        "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                        "may be specified."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                        "kill the origin account.",
                        "",
                        "99% of the time you want [`transfer_allow_death`] instead.",
                        "",
                        "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Upgrade a specified account.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `who`: The account to be upgraded.",
                        "",
                        "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                        "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                        "possibililty of churn)."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
                        "",
                        "WARNING: DEPRECATED! Will be released in approximately 3 months."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 63,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the regular balance of a given account.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 56
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 310,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "def": {
                "compact": {
                  "type": 56
                }
              }
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_unsigned",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 312,
                          "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>"
                        },
                        {
                          "name": "witness",
                          "type": 364,
                          "typeName": "SolutionOrSnapshotSize"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Submit a solution for the unsigned phase.",
                        "",
                        "The dispatch origin fo this call must be __none__.",
                        "",
                        "This submission is checked on the fly. Moreover, this unsigned solution is only",
                        "validated when submitted to the pool from the **local** node. Effectively, this means",
                        "that only active validators can submit this transaction when authoring a block (similar",
                        "to an inherent).",
                        "",
                        "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                        "panic if the solution submitted by the validator is invalid in any way, effectively",
                        "putting their authoring reward at risk.",
                        "",
                        "No deposit or reward is associated with this submission."
                      ]
                    },
                    {
                      "name": "set_minimum_untrusted_score",
                      "fields": [
                        {
                          "name": "maybe_next_score",
                          "type": 365,
                          "typeName": "Option<ElectionScore>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set a new value for `MinimumUntrustedScore`.",
                        "",
                        "Dispatch origin must be aligned with `T::ForceOrigin`.",
                        "",
                        "This check can be turned off by setting the value to `None`."
                      ]
                    },
                    {
                      "name": "set_emergency_election_result",
                      "fields": [
                        {
                          "name": "supports",
                          "type": 366,
                          "typeName": "Supports<T::AccountId>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                        "call to `ElectionProvider::elect`.",
                        "",
                        "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                        "",
                        "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                        "feasibility check itself can in principle cause the election process to fail (due to",
                        "memory/weight constrains)."
                      ]
                    },
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 312,
                          "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit a solution for the signed phase.",
                        "",
                        "The dispatch origin fo this call must be __signed__.",
                        "",
                        "The solution is potentially queued, based on the claimed score and processed at the end",
                        "of the signed phase.",
                        "",
                        "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                        "might be rewarded, slashed, or get all or a part of the deposit back."
                      ]
                    },
                    {
                      "name": "governance_fallback",
                      "fields": [
                        {
                          "name": "maybe_max_voters",
                          "type": 73,
                          "typeName": "Option<u32>"
                        },
                        {
                          "name": "maybe_max_targets",
                          "type": 73,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Trigger the governance fallback.",
                        "",
                        "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                        "calling [`Call::set_emergency_election_result`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RawSolution"
              ],
              "params": [
                {
                  "name": "S",
                  "type": 313
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "solution",
                      "type": 313,
                      "typeName": "S"
                    },
                    {
                      "name": "score",
                      "type": 38,
                      "typeName": "ElectionScore"
                    },
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "enjin_runtime",
                "NposSolution16"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes1",
                      "type": 314
                    },
                    {
                      "name": "votes2",
                      "type": 317
                    },
                    {
                      "name": "votes3",
                      "type": 322
                    },
                    {
                      "name": "votes4",
                      "type": 325
                    },
                    {
                      "name": "votes5",
                      "type": 328
                    },
                    {
                      "name": "votes6",
                      "type": 331
                    },
                    {
                      "name": "votes7",
                      "type": 334
                    },
                    {
                      "name": "votes8",
                      "type": 337
                    },
                    {
                      "name": "votes9",
                      "type": 340
                    },
                    {
                      "name": "votes10",
                      "type": 343
                    },
                    {
                      "name": "votes11",
                      "type": 346
                    },
                    {
                      "name": "votes12",
                      "type": 349
                    },
                    {
                      "name": "votes13",
                      "type": 352
                    },
                    {
                      "name": "votes14",
                      "type": 355
                    },
                    {
                      "name": "votes15",
                      "type": 358
                    },
                    {
                      "name": "votes16",
                      "type": 361
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "def": {
                "sequence": {
                  "type": 315
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "def": {
                "tuple": [
                  119,
                  316
                ]
              }
            }
          },
          {
            "id": 316,
            "type": {
              "def": {
                "compact": {
                  "type": 290
                }
              }
            }
          },
          {
            "id": 317,
            "type": {
              "def": {
                "sequence": {
                  "type": 318
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "def": {
                "tuple": [
                  119,
                  319,
                  316
                ]
              }
            }
          },
          {
            "id": 319,
            "type": {
              "def": {
                "tuple": [
                  316,
                  320
                ]
              }
            }
          },
          {
            "id": 320,
            "type": {
              "def": {
                "compact": {
                  "type": 321
                }
              }
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "PerU16"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 290,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "def": {
                "sequence": {
                  "type": 323
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "def": {
                "tuple": [
                  119,
                  324,
                  316
                ]
              }
            }
          },
          {
            "id": 324,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "def": {
                "sequence": {
                  "type": 326
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "def": {
                "tuple": [
                  119,
                  327,
                  316
                ]
              }
            }
          },
          {
            "id": 327,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "def": {
                "sequence": {
                  "type": 329
                }
              }
            }
          },
          {
            "id": 329,
            "type": {
              "def": {
                "tuple": [
                  119,
                  330,
                  316
                ]
              }
            }
          },
          {
            "id": 330,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "def": {
                "sequence": {
                  "type": 332
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "def": {
                "tuple": [
                  119,
                  333,
                  316
                ]
              }
            }
          },
          {
            "id": 333,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "def": {
                "sequence": {
                  "type": 335
                }
              }
            }
          },
          {
            "id": 335,
            "type": {
              "def": {
                "tuple": [
                  119,
                  336,
                  316
                ]
              }
            }
          },
          {
            "id": 336,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "def": {
                "sequence": {
                  "type": 338
                }
              }
            }
          },
          {
            "id": 338,
            "type": {
              "def": {
                "tuple": [
                  119,
                  339,
                  316
                ]
              }
            }
          },
          {
            "id": 339,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 340,
            "type": {
              "def": {
                "sequence": {
                  "type": 341
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "def": {
                "tuple": [
                  119,
                  342,
                  316
                ]
              }
            }
          },
          {
            "id": 342,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "def": {
                "sequence": {
                  "type": 344
                }
              }
            }
          },
          {
            "id": 344,
            "type": {
              "def": {
                "tuple": [
                  119,
                  345,
                  316
                ]
              }
            }
          },
          {
            "id": 345,
            "type": {
              "def": {
                "array": {
                  "len": 9,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 346,
            "type": {
              "def": {
                "sequence": {
                  "type": 347
                }
              }
            }
          },
          {
            "id": 347,
            "type": {
              "def": {
                "tuple": [
                  119,
                  348,
                  316
                ]
              }
            }
          },
          {
            "id": 348,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "def": {
                "sequence": {
                  "type": 350
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "def": {
                "tuple": [
                  119,
                  351,
                  316
                ]
              }
            }
          },
          {
            "id": 351,
            "type": {
              "def": {
                "array": {
                  "len": 11,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "def": {
                "sequence": {
                  "type": 353
                }
              }
            }
          },
          {
            "id": 353,
            "type": {
              "def": {
                "tuple": [
                  119,
                  354,
                  316
                ]
              }
            }
          },
          {
            "id": 354,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "def": {
                "sequence": {
                  "type": 356
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "def": {
                "tuple": [
                  119,
                  357,
                  316
                ]
              }
            }
          },
          {
            "id": 357,
            "type": {
              "def": {
                "array": {
                  "len": 13,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "def": {
                "sequence": {
                  "type": 359
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "def": {
                "tuple": [
                  119,
                  360,
                  316
                ]
              }
            }
          },
          {
            "id": 360,
            "type": {
              "def": {
                "array": {
                  "len": 14,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "def": {
                "sequence": {
                  "type": 362
                }
              }
            }
          },
          {
            "id": 362,
            "type": {
              "def": {
                "tuple": [
                  119,
                  363,
                  316
                ]
              }
            }
          },
          {
            "id": 363,
            "type": {
              "def": {
                "array": {
                  "len": 15,
                  "type": 319
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "SolutionOrSnapshotSize"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "targets",
                      "type": 119,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 38
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 38
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 366,
            "type": {
              "def": {
                "sequence": {
                  "type": 367
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "def": {
                "tuple": [
                  0,
                  368
                ]
              }
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "sp_npos_elections",
                "Support"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "ExtendedBalance"
                    },
                    {
                      "name": "voters",
                      "type": 369,
                      "typeName": "Vec<(AccountId, ExtendedBalance)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "def": {
                "sequence": {
                  "type": 370
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "payee",
                          "type": 372,
                          "typeName": "RewardDestination<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                        "be the account that controls it.",
                        "",
                        "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash account.",
                        "",
                        "Emits `Bonded`.",
                        "## Complexity",
                        "- Independent of the arguments. Moderate complexity.",
                        "- O(1).",
                        "- Three extra DB entries.",
                        "",
                        "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                        "unless the `origin` falls below _existential deposit_ and gets removed as dust."
                      ]
                    },
                    {
                      "name": "bond_extra",
                      "fields": [
                        {
                          "name": "max_additional",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                        "for staking.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Use this if there are additional funds in your stash account that you wish to bond.",
                        "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                        "any limitation on the amount that can be added.",
                        "",
                        "Emits `Bonded`.",
                        "",
                        "## Complexity",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                        "period ends. If this leaves an amount actively bonded less than",
                        "T::Currency::minimum_balance(), then it is increased to the full amount.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                        "the funds out of management ready for transfer.",
                        "",
                        "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                        "can co-exists at the same time. If there are no unlocking chunks slots available",
                        "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                        "",
                        "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                        "they should call `chill` first in order to free up their bonded funds.",
                        "",
                        "Emits `Unbonded`.",
                        "",
                        "See also [`Call::withdraw_unbonded`]."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove any unlocked chunks from the `unlocking` queue from our management.",
                        "",
                        "This essentially frees up that balance to be used by the stash account to do",
                        "whatever it wants.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller.",
                        "",
                        "Emits `Withdrawn`.",
                        "",
                        "See also [`Call::unbond`].",
                        "",
                        "## Complexity",
                        "O(S) where S is the number of slashing spans to remove",
                        "NOTE: Weight annotation is the kill scenario, we refund otherwise."
                      ]
                    },
                    {
                      "name": "validate",
                      "fields": [
                        {
                          "name": "prefs",
                          "type": 43,
                          "typeName": "ValidatorPrefs"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Declare the desire to validate for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "targets",
                          "type": 373,
                          "typeName": "Vec<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Declare the desire to nominate `targets` for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "## Complexity",
                        "- The transaction's complexity is proportional to the size of `targets` (N)",
                        "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                        "- Both the reads and writes follow a similar pattern."
                      ]
                    },
                    {
                      "name": "chill",
                      "index": 6,
                      "docs": [
                        "Declare no desire to either validate or nominate.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "## Complexity",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains one read.",
                        "- Writes are limited to the `origin` account key."
                      ]
                    },
                    {
                      "name": "set_payee",
                      "fields": [
                        {
                          "name": "payee",
                          "type": 372,
                          "typeName": "RewardDestination<T::AccountId>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "(Re-)set the payment target for a controller.",
                        "",
                        "Effects will be felt instantly (as soon as this function is completed successfully).",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "## Complexity",
                        "- O(1)",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "---------"
                      ]
                    },
                    {
                      "name": "set_controller",
                      "index": 8,
                      "docs": [
                        "(Re-)sets the controller of a stash to the stash itself. This function previously",
                        "accepted a `controller` argument to set the controller to an account other than the",
                        "stash itself. This functionality has now been removed, now only setting the controller",
                        "to the stash, if it is not already.",
                        "",
                        "Effects will be felt instantly (as soon as this function is completed successfully).",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "## Complexity",
                        "O(1)",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key."
                      ]
                    },
                    {
                      "name": "set_validator_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Sets the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "## Complexity",
                        "O(1)"
                      ]
                    },
                    {
                      "name": "increase_validator_count",
                      "fields": [
                        {
                          "name": "additional",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Increments the ideal number of validators upto maximum of",
                        "`ElectionProviderBase::MaxWinners`.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "## Complexity",
                        "Same as [`Self::set_validator_count`]."
                      ]
                    },
                    {
                      "name": "scale_validator_count",
                      "fields": [
                        {
                          "name": "factor",
                          "type": 374,
                          "typeName": "Percent"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Scale up the ideal number of validators by a factor upto maximum of",
                        "`ElectionProviderBase::MaxWinners`.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "## Complexity",
                        "Same as [`Self::set_validator_count`]."
                      ]
                    },
                    {
                      "name": "force_no_eras",
                      "index": 12,
                      "docs": [
                        "Force there to be no new eras indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "Thus the election process may be ongoing when this is called. In this case the",
                        "election will continue until the next era is triggered.",
                        "",
                        "## Complexity",
                        "- No arguments.",
                        "- Weight: O(1)"
                      ]
                    },
                    {
                      "name": "force_new_era",
                      "index": 13,
                      "docs": [
                        "Force there to be a new era at the end of the next session. After this, it will be",
                        "reset to normal (non-forced) behaviour.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "## Complexity",
                        "- No arguments.",
                        "- Weight: O(1)"
                      ]
                    },
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the validators who cannot be slashed (if any).",
                        "",
                        "The dispatch origin must be Root."
                      ]
                    },
                    {
                      "name": "force_unstake",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Force a current staker to become completely unstaked, immediately.",
                        "",
                        "The dispatch origin must be Root."
                      ]
                    },
                    {
                      "name": "force_new_era_always",
                      "index": 16,
                      "docs": [
                        "Force there to be a new era at the end of sessions indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result."
                      ]
                    },
                    {
                      "name": "cancel_deferred_slash",
                      "fields": [
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "name": "slash_indices",
                          "type": 375,
                          "typeName": "Vec<u32>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Cancel enactment of a deferred slash.",
                        "",
                        "Can be called by the `T::AdminOrigin`.",
                        "",
                        "Parameters: era and indices of the slashes for that era to kill."
                      ]
                    },
                    {
                      "name": "payout_stakers",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Pay out all the stakers behind a single validator for a single era.",
                        "",
                        "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                        "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                        "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                        "",
                        "The origin of this call must be _Signed_. Any account can call this function, even if",
                        "it is not one of the stakers.",
                        "",
                        "## Complexity",
                        "- At most O(MaxNominatorRewardedPerValidator)."
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Rebond a portion of the stash scheduled to be unlocked.",
                        "",
                        "The dispatch origin must be signed by the controller.",
                        "",
                        "## Complexity",
                        "- Time complexity: O(L), where L is unlocking chunks",
                        "- Bounded by `MaxUnlockingChunks`."
                      ]
                    },
                    {
                      "name": "reap_stash",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove all data structures concerning a staker/stash once it is at a state where it can",
                        "be considered `dust` in the staking system. The requirements are:",
                        "",
                        "1. the `total_balance` of the stash is below existential deposit.",
                        "2. or, the `ledger.total` of the stash is below existential deposit.",
                        "",
                        "The former can happen in cases like a slash; the latter when a fully unbonded account",
                        "is still receiving staking rewards in `RewardDestination::Staked`.",
                        "",
                        "It can be called by anyone, as long as `stash` meets the above requirements.",
                        "",
                        "Refunds the transaction fees upon successful execution."
                      ]
                    },
                    {
                      "name": "kick",
                      "fields": [
                        {
                          "name": "who",
                          "type": 373,
                          "typeName": "Vec<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove the given nominations from the calling validator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "- `who`: A list of nominator stash accounts who are nominating this validator which",
                        "  should no longer be nominating this validator.",
                        "",
                        "Note: Making this call only makes sense if you first set the validator preferences to",
                        "block any further nominations."
                      ]
                    },
                    {
                      "name": "set_staking_configs",
                      "fields": [
                        {
                          "name": "min_nominator_bond",
                          "type": 376,
                          "typeName": "ConfigOp<BalanceOf<T>>"
                        },
                        {
                          "name": "min_validator_bond",
                          "type": 376,
                          "typeName": "ConfigOp<BalanceOf<T>>"
                        },
                        {
                          "name": "max_nominator_count",
                          "type": 377,
                          "typeName": "ConfigOp<u32>"
                        },
                        {
                          "name": "max_validator_count",
                          "type": 377,
                          "typeName": "ConfigOp<u32>"
                        },
                        {
                          "name": "chill_threshold",
                          "type": 378,
                          "typeName": "ConfigOp<Percent>"
                        },
                        {
                          "name": "min_commission",
                          "type": 379,
                          "typeName": "ConfigOp<Perbill>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Update the various staking configurations .",
                        "",
                        "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                        "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                        "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `max_validator_count`: The max number of users who can be a validator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                        "  should be filled in order for the `chill_other` transaction to work.",
                        "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                        "  This is checked only upon calling `validate`. Existing validators are not affected.",
                        "",
                        "RuntimeOrigin must be Root to call this function.",
                        "",
                        "NOTE: Existing nominators and validators will not be affected by this update.",
                        "to kick people under the new limits, `chill_other` should be called."
                      ]
                    },
                    {
                      "name": "chill_other",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Declare a `controller` to stop participating as either a validator or nominator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                        "",
                        "If the caller is the same as the controller being targeted, then no further checks are",
                        "enforced, and this function behaves just like `chill`.",
                        "",
                        "If the caller is different than the controller being targeted, the following conditions",
                        "must be met:",
                        "",
                        "* `controller` must belong to a nominator who has become non-decodable,",
                        "",
                        "Or:",
                        "",
                        "* A `ChillThreshold` must be set and checked which defines how close to the max",
                        "  nominators or validators we must reach before users can start chilling one-another.",
                        "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                        "  how close we are to the threshold.",
                        "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                        "  if this is a person that should be chilled because they have not met the threshold",
                        "  bond required.",
                        "",
                        "This can be helpful if bond requirements are updated, and we need to remove old users",
                        "who do not satisfy these requirements."
                      ]
                    },
                    {
                      "name": "force_apply_min_commission",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Force a validator to have at least the minimum commission. This will not affect a",
                        "validator who already has a commission greater than or equal to the minimum. Any account",
                        "can call this."
                      ]
                    },
                    {
                      "name": "set_min_commission",
                      "fields": [
                        {
                          "name": "new",
                          "type": 42,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Sets the minimum amount of commission that each validators must maintain.",
                        "",
                        "This call has lower privilege requirements than `set_staking_config` and can be called",
                        "by the `T::AdminOrigin`. Root can always call this."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_staking",
                "RewardDestination"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "index": 0
                    },
                    {
                      "name": "Stash",
                      "index": 1
                    },
                    {
                      "name": "Controller",
                      "index": 2
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "None",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "def": {
                "sequence": {
                  "type": 309
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Remove",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Remove",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 374
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "type": 374,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Remove",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Remove",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 381,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "## Complexity",
                        "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                        "  fixed."
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "## Complexity",
                        "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "enjin_runtime",
                "opaque",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "grandpa",
                      "type": 50,
                      "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "babe",
                      "type": 302,
                      "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "im_online",
                      "type": 58,
                      "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "para_validator",
                      "type": 382,
                      "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "para_assignment",
                      "type": 383,
                      "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "authority_discovery",
                      "type": 384,
                      "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "validator_app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 59,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "assignment_app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 59,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "sp_authority_discovery",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 59,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 386,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 386,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                        "",
                        "This will trigger a forced authority set change at the beginning of the next session, to",
                        "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                        "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                        "The block production rate (which may be slowed down because of finality lagging) should",
                        "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                        "authority will start voting on top of `best_finalized_block_number` for new finalized",
                        "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                        "block of all validators of the new authority set.",
                        "",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 11,
                      "typeName": "SetId"
                    },
                    {
                      "name": "equivocation",
                      "type": 387,
                      "typeName": "Equivocation<H, N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "type": 388,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "type": 393,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 50
                },
                {
                  "name": "V",
                  "type": 389
                },
                {
                  "name": "S",
                  "type": 390
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 50,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 392,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 392,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 12,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 391,
                      "typeName": "ed25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 97,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "def": {
                "tuple": [
                  389,
                  390
                ]
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 50
                },
                {
                  "name": "V",
                  "type": 394
                },
                {
                  "name": "S",
                  "type": 390
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 50,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 395,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 395,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 12,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "def": {
                "tuple": [
                  394,
                  390
                ]
              }
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "## Complexity",
                        "- O(1)"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 119,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "## Complexity",
                        "- O(1)"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 119,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "## Complexity",
                        " - O(1)."
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 119,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "## Complexity",
                        "- O(A) where `A` is the number of approvals",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "heartbeat",
                      "fields": [
                        {
                          "name": "heartbeat",
                          "type": 399,
                          "typeName": "Heartbeat<T::BlockNumber>"
                        },
                        {
                          "name": "signature",
                          "type": 404,
                          "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "## Complexity:",
                        "- `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of",
                        "  `heartbeat.network_state.external_address`",
                        "  - `O(K)`: decoding of length `K`",
                        "  - `O(E)`: decoding/encoding of length `E`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "pallet_im_online",
                "Heartbeat"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "network_state",
                      "type": 400,
                      "typeName": "OpaqueNetworkState"
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "AuthIndex"
                    },
                    {
                      "name": "validators_len",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueNetworkState"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 401,
                      "typeName": "OpaquePeerId"
                    },
                    {
                      "name": "external_addresses",
                      "type": 402,
                      "typeName": "Vec<OpaqueMultiaddr>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "sp_core",
                "OpaquePeerId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "def": {
                "sequence": {
                  "type": 403
                }
              }
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueMultiaddr"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 96,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "rebag",
                      "fields": [
                        {
                          "name": "dislocated",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                        "changed its score that it should properly fall into a different bag than its current",
                        "one.",
                        "",
                        "Anyone can call this function about any potentially dislocated account.",
                        "",
                        "Will always update the stored score of `dislocated` to the correct score, based on",
                        "`ScoreProvider`.",
                        "",
                        "If `dislocated` does not exists, it returns an error."
                      ]
                    },
                    {
                      "name": "put_in_front_of",
                      "fields": [
                        {
                          "name": "lighter",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Move the caller's Id directly in front of `lighter`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                        "the account going in front of `lighter`.",
                        "",
                        "Only works if",
                        "- both nodes are within the same bag,",
                        "- and `origin` has a greater `Score` than `lighter`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "amount",
                          "type": 407,
                          "typeName": "BondValueOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Stake funds with a pool. The amount to bond is transferred from the member to the",
                        "pools account and immediately increases the pools bond. The sENJ token will be minted",
                        "and transferred to `origin`.",
                        "",
                        "# Parameters",
                        "- `origin`: the caller",
                        "- `pool_id`: the pool id to bond",
                        "- `amount`: the amount of tokens deposited into the pool",
                        "",
                        "# Note",
                        "",
                        "* An account can only be a member of a single pool.",
                        "* An account cannot join the same pool multiple times.",
                        "* This call will *not* dust the member account, so the member must have at least",
                        "  `existential deposit + amount` in their account.",
                        "* Only a pool with [`PoolState::Open`] can be joined"
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "member_account",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "unbonding_points",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool by burning",
                        "sENJ.",
                        "",
                        "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                        "account).",
                        "",
                        "# Conditions for a permissionless dispatch.",
                        "",
                        "* The pool is blocked and the caller is holding the pool's token. This is refereed to as",
                        "  a kick.",
                        "* The pool is destroying.",
                        "* The pool is destroying and no other members are in the pool.",
                        "",
                        "## Conditions for permissioned dispatch (i.e. the caller is also the",
                        "`member_account`):",
                        "",
                        "* The caller is not the last member.",
                        "* The caller is the last member and the pool is destroying.",
                        "",
                        "# Note",
                        "",
                        "If there are too many unlocking chunks to unbond with the pool account,",
                        "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                        "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                        "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                        "are available). However, it may not be possible to release the current unlocking chunks,",
                        "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                        "staking system."
                      ]
                    },
                    {
                      "name": "pool_withdraw_unbonded",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                        "",
                        "This is useful if their are too many unlocking chunks to call `unbond`, and some",
                        "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                        "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                        "they attempt to unbond."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "member_account",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                        "error is returned.",
                        "",
                        "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                        "account).",
                        "",
                        "# Conditions for a permissionless dispatch",
                        "",
                        "* The pool is in destroy mode.",
                        "* The target is the only member in the sub pools.",
                        "* The pool is blocked and the caller is either the admin or state-toggler.",
                        "",
                        "# Conditions for permissioned dispatch",
                        "",
                        "* The caller is the target and they are not the last member.",
                        "",
                        "# Note",
                        "",
                        "If the target is the last member, the pool will be destroyed."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 6,
                          "typeName": "TokenIdOf<T>"
                        },
                        {
                          "name": "deposit",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "duration",
                          "type": 119,
                          "typeName": "EraIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Create a new nomination pool.",
                        "",
                        "# Arguments",
                        "",
                        "* `token_id` - Token that that will control the pool. This token must be from the",
                        "  [`Config::PoolCollectionId`] collection and it must be held by the caller.",
                        "* `deposit` - The amount of funds to delegate to the pool. This also acts as a deposit",
                        "  because the pool's creator cannot fully unbond funds until the pool is destroyed.",
                        "* `capacity` - The maximum total balance allowed in the pool. This is measured in sENJ.",
                        "  It must be below the pool's capacity. See `Capacity` section in crate level docs.",
                        "* `duration` - The duration in blocks of the pool's bonus cycle",
                        "",
                        "# Note",
                        "",
                        "In addition to `deposit`, the caller will transfer the existential deposit for the",
                        "pool's accounts; so the caller needs at have at least `deposit + existential_deposit *",
                        "2` transferable."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "validators",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Nominate on behalf of the pool.",
                        "",
                        "The dispatch origin of this call must be signed by the holder of the pool token.",
                        "",
                        "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                        "account."
                      ]
                    },
                    {
                      "name": "set_configs",
                      "fields": [
                        {
                          "name": "min_join_bond",
                          "type": 408,
                          "typeName": "ConfigOp<BalanceOf<T>>"
                        },
                        {
                          "name": "min_create_bond",
                          "type": 408,
                          "typeName": "ConfigOp<BalanceOf<T>>"
                        },
                        {
                          "name": "global_max_commission",
                          "type": 409,
                          "typeName": "ConfigOp<Perbill>"
                        },
                        {
                          "name": "required_payout_count",
                          "type": 409,
                          "typeName": "ConfigOp<Perbill>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Update configurations for the nomination pools. Callable only by",
                        "[`Config::ForceOrigin`].",
                        "",
                        "# Arguments",
                        "",
                        "* `min_join_bond` - Set [`MinJoinBond`].",
                        "* `min_create_bond` - Set [`MinCreateBond`].",
                        "* `global_max_commission` - Set [`GlobalMaxCommission`]."
                      ]
                    },
                    {
                      "name": "chill",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Chill on behalf of the pool.",
                        "",
                        "The dispatch origin of this call must be signed by the pool token holder, same as",
                        "[`Pallet::nominate`].",
                        "",
                        "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                        "account."
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Destroy the pool.",
                        "",
                        "The dispatch origin of this call must be signed by the account holding the pool token",
                        "of the given pool_id."
                      ]
                    },
                    {
                      "name": "payout_rewards",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Pays rewards to `validator_stash` and also distributes rewards to the reward accounts of",
                        "the pools nominating it. The appropriate bonus is also calculated and stored in the",
                        "bonus account.",
                        "",
                        "This should be called once per era per validator. It is a permissionless call. It also",
                        "processes rewards for the previous era if [`Self::process_payouts`] was not called.",
                        "",
                        "## Bonus Calculation",
                        "",
                        "1. Minimum duration and max duration are found for all pools nominating",
                        "   `validator_stash`",
                        "2. [`Config::BonusPercentage`] is set aside from rewards for bonus",
                        "3. Normalized weight is calculated and then scaled according to the total bonus. See",
                        "   `functions::calculate_real_weight`.",
                        "4. The scaled weight is offset according to [`Config::BaseBonusRewardPercentage`] so",
                        "   that all pools at least get the minimum weight",
                        "5. Final calculation is done in [`traits::Bonus::calculate_bonus`] and then transferred",
                        "   to the bonus account"
                      ]
                    },
                    {
                      "name": "process_payouts",
                      "fields": [
                        {
                          "name": "pool_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Processes the rewards for all pools that were distributed in [`Self::payout_rewards`].",
                        "It will only succeed if it is called on the same era that payouts were made. It uses the",
                        "[`EraPayoutInfo`] storage to verify this. This extrinsic is permissionless.",
                        "",
                        "The following is done for each pool:",
                        "1. If the pool has reached the end of its cycle, it cycles the pool.",
                        "2. Sends bonus for the current era from the bonus account to the rewards account.",
                        "3. Sends reward commission to the depositor.",
                        "4. It bonds the pool's reward balance.",
                        "",
                        "It is not required to call this extrinsic. If it is not called, the rewards will be",
                        "processed when `payout_rewards` is called in the next era."
                      ]
                    },
                    {
                      "name": "mutate",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "mutation",
                          "type": 72,
                          "typeName": "PoolMutationOf<T>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Mutate the nomination pool data.",
                        "",
                        "The dispatch origin of this call must be signed by the account holding the pool token",
                        "of the given pool_id."
                      ]
                    },
                    {
                      "name": "unbond_deposit",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Unbonds the deposit",
                        "",
                        "This call is permissionless but certain conditions must be met before the deposit can",
                        "be unbonded:",
                        "",
                        "- Pool must be in [`PoolState::Destroying`] mode",
                        "- Deposit points must be the only points in the pool",
                        "- [`UnbondingMembers`] must be empty",
                        "",
                        "This will unbond the deposit from the pool."
                      ]
                    },
                    {
                      "name": "withdraw_deposit",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Withdraws the deposit",
                        "",
                        "This call is permissionless and should be called after the deposit has been unbonded."
                      ]
                    },
                    {
                      "name": "withdraw_free_balance",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "destination",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Transfers `amount` from the pool's free balance to `destination`. Only callable by",
                        "[`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "set_staking_info",
                      "fields": [
                        {
                          "name": "info",
                          "type": 410,
                          "typeName": "StakingInfo"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Set the annual inflation rate and collator payout cut",
                        "",
                        "Callable only by [`Config::ForceOrigin`]"
                      ]
                    },
                    {
                      "name": "queue_early_bird_bonus",
                      "fields": [
                        {
                          "name": "pool_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Calculate and prepare early bird bonus if it is ready to be queued.",
                        "",
                        "Callable by any signed origin after [`Config::EarlyBirdBonusDistributionBlock`].",
                        "",
                        "## Details",
                        "",
                        "1. Calculates the normalized weights for each pool by calling",
                        "   [`Pallet::early_bird_normalized_weight`]. Factors for the weight are each pool's",
                        "   total points and the creation date.",
                        "2. Each pool's weight is multiplied by the total reward to determine each pool's reward.",
                        "3. The rewards are stored in [`EarlyBirdBonusInfo`] and can be distributed by calling",
                        "   [`Self::distribute_early_bird_bonus`]."
                      ]
                    },
                    {
                      "name": "distribute_early_bird_bonus",
                      "fields": [
                        {
                          "name": "transfer_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Distribute early bird bonus to pools. The `transfer_count` parameter is the max number",
                        "of transfers to be made in this call. If there are less items in the queue, it will end",
                        "early.",
                        "",
                        "Callable by any signed origin after the bonus has been queued."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "BondValue"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Amount",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Fill",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Remove",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "ConfigOp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "Set",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "T"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Remove",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "StakingInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "annual_inflation_rate",
                      "type": 42,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "collator_payout_cut",
                      "type": 42,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_offer",
                      "fields": [
                        {
                          "name": "offer",
                          "type": 412,
                          "typeName": "CreateOfferOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Place a new offer with the given parameters",
                        "",
                        "# Errors",
                        "- [`Error::CallerNotOfferCreator`] if the caller account does not match offer account.",
                        "- [`Error::ZeroOffer`] if offer amount is zero.",
                        "- [`Error::ZeroRate`] if rate amount is zero.",
                        "- [`Error::Overflow`] if arithmetic overflow occurs"
                      ]
                    },
                    {
                      "name": "cancel_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 63,
                          "typeName": "T::OfferId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an existing offer with `offer_id`",
                        "",
                        "# Errors",
                        "- [`Error::CallerNotOfferCreator`] if the caller account does not match offer account.",
                        "- [`Error::OfferNotFound`] if the `offer_id` does not exist"
                      ]
                    },
                    {
                      "name": "configure_liquidity_account",
                      "fields": [
                        {
                          "name": "config",
                          "type": 81,
                          "typeName": "LiquidityAccountConfigOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the liquidity config for the caller account"
                      ]
                    },
                    {
                      "name": "withdraw_liquidity",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 63,
                          "typeName": "T::OfferId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Withdraw liquidity from a current active offer",
                        "",
                        "# Errors",
                        "- [`Error::CallerNotOfferCreator`] if the caller account does not match offer account.",
                        "- [`Error::OfferNotFound`] if the offerId does not exist"
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 63,
                          "typeName": "T::OfferId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Add liquidity to a current active offer",
                        "",
                        "# Errors",
                        "- [`Error::CallerNotOfferCreator`] if the caller account does not match bidding account.",
                        "- [`Error::OfferNotFound`] if the offerId does not exist"
                      ]
                    },
                    {
                      "name": "buy",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 63,
                          "typeName": "T::OfferId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "TokenIdOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Buy from a current active offer, returning the native currency by exchanging the staked",
                        "tokens",
                        "",
                        "# Errors",
                        "- [`Error::CallerNotOfferCreator`] if the caller account does not match bidding account.",
                        "- [`Error::TokenRestriction`] if the tokenId is restricted by the LP",
                        "- [`Error::NotEnoughLiquidity`] if the offer cannot cover the amount requested",
                        "- [`Error::TransferParamCreationFailed`] if the multitokens transfer failed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The pallet's extrinsics."
              ]
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "types",
                "CreateOffer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "total",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "rate",
                      "type": 44,
                      "typeName": "Rate"
                    },
                    {
                      "name": "min_average_reward_rate",
                      "type": 42,
                      "typeName": "Rate"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 414,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched.",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 290,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 414,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 415,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 414,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatch without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a function call with a specified weight.",
                        "",
                        "This function does not check the weight of the call, and instead allows the",
                        "Root origin to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 414,
            "type": {
              "def": {
                "sequence": {
                  "type": 292
                }
              }
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "enjin_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 416,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainsOrigin",
                      "fields": [
                        {
                          "type": 417,
                          "typeName": "parachains_origin::Origin"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "XcmPallet",
                      "fields": [
                        {
                          "type": 418,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Origins",
                      "fields": [
                        {
                          "type": 419,
                          "typeName": "pallet_custom_origins::Origin"
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 420,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "origin",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "enjin_runtime_common",
                "governance",
                "origins",
                "pallet_custom_origins",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StakingAdmin",
                      "index": 0
                    },
                    {
                      "name": "TreasuryAdmin",
                      "index": 1
                    },
                    {
                      "name": "FellowshipAdmin",
                      "index": 2
                    },
                    {
                      "name": "GeneralAdmin",
                      "index": 3
                    },
                    {
                      "name": "AuctionAdmin",
                      "index": 4
                    },
                    {
                      "name": "LeaseAdmin",
                      "index": 5
                    },
                    {
                      "name": "MultiTokensAdmin",
                      "index": 6
                    },
                    {
                      "name": "FuelTanksAdmin",
                      "index": 7
                    },
                    {
                      "name": "ClaimsAdmin",
                      "index": 8
                    },
                    {
                      "name": "ExtrinsicPauseAdmin",
                      "index": 9
                    },
                    {
                      "name": "PreimageAdmin",
                      "index": 10
                    },
                    {
                      "name": "WhitelistAdmin",
                      "index": 11
                    },
                    {
                      "name": "ParachainsAdmin",
                      "index": 12
                    },
                    {
                      "name": "ReferendumCanceller",
                      "index": 13
                    },
                    {
                      "name": "ReferendumKiller",
                      "index": 14
                    },
                    {
                      "name": "SmallTipper",
                      "index": 15
                    },
                    {
                      "name": "BigTipper",
                      "index": 16
                    },
                    {
                      "name": "SmallSpender",
                      "index": 17
                    },
                    {
                      "name": "MediumSpender",
                      "index": 18
                    },
                    {
                      "name": "BigSpender",
                      "index": 19
                    },
                    {
                      "name": "WhitelistedCaller",
                      "index": 20
                    },
                    {
                      "name": "FellowshipInitiates",
                      "index": 21
                    },
                    {
                      "name": "Fellows",
                      "index": 22
                    },
                    {
                      "name": "FellowshipExperts",
                      "index": 23
                    },
                    {
                      "name": "FellowshipMasters",
                      "index": 24
                    },
                    {
                      "name": "Fellowship1Dan",
                      "index": 25
                    },
                    {
                      "name": "Fellowship2Dan",
                      "index": 26
                    },
                    {
                      "name": "Fellowship3Dan",
                      "index": 27
                    },
                    {
                      "name": "Fellowship4Dan",
                      "index": 28
                    },
                    {
                      "name": "Fellowship5Dan",
                      "index": 29
                    },
                    {
                      "name": "Fellowship6Dan",
                      "index": 30
                    },
                    {
                      "name": "Fellowship7Dan",
                      "index": 31
                    },
                    {
                      "name": "Fellowship8Dan",
                      "index": 32
                    },
                    {
                      "name": "Fellowship9Dan",
                      "index": 33
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "## Complexity",
                        "O(Z + C) where Z is the length of the call and C its execution weight."
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 290,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 422,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "## Complexity",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 290,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 422,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 290,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 78,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "timepoint",
                          "type": 89,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 89
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 89
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_upgrade_cooldown",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the validation upgrade cooldown."
                      ]
                    },
                    {
                      "name": "set_validation_upgrade_delay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the validation upgrade delay."
                      ]
                    },
                    {
                      "name": "set_code_retention_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the acceptance period for an included candidate."
                      ]
                    },
                    {
                      "name": "set_max_code_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the max validation code size for incoming upgrades."
                      ]
                    },
                    {
                      "name": "set_max_pov_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the max POV block size for incoming upgrades."
                      ]
                    },
                    {
                      "name": "set_max_head_data_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the max head data size for paras."
                      ]
                    },
                    {
                      "name": "set_parathread_cores",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the number of parathread execution cores."
                      ]
                    },
                    {
                      "name": "set_parathread_retries",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Set the number of retries for a particular parathread."
                      ]
                    },
                    {
                      "name": "set_group_rotation_frequency",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the parachain validator-group rotation frequency"
                      ]
                    },
                    {
                      "name": "set_chain_availability_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Set the availability period for parachains."
                      ]
                    },
                    {
                      "name": "set_thread_availability_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Set the availability period for parathreads."
                      ]
                    },
                    {
                      "name": "set_scheduling_lookahead",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Set the scheduling lookahead, in expected number of blocks at peak throughput."
                      ]
                    },
                    {
                      "name": "set_max_validators_per_core",
                      "fields": [
                        {
                          "name": "new",
                          "type": 73,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Set the maximum number of validators to assign to any core."
                      ]
                    },
                    {
                      "name": "set_max_validators",
                      "fields": [
                        {
                          "name": "new",
                          "type": 73,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Set the maximum number of validators to use in parachain consensus."
                      ]
                    },
                    {
                      "name": "set_dispute_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the dispute period, in number of sessions to keep for disputes."
                      ]
                    },
                    {
                      "name": "set_dispute_post_conclusion_acceptance_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Set the dispute post conclusion acceptance period."
                      ]
                    },
                    {
                      "name": "set_no_show_slots",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Set the no show slots, in number of number of consensus slots.",
                        "Must be at least 1."
                      ]
                    },
                    {
                      "name": "set_n_delay_tranches",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Set the total number of delay tranches."
                      ]
                    },
                    {
                      "name": "set_zeroth_delay_tranche_width",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Set the zeroth delay tranche width."
                      ]
                    },
                    {
                      "name": "set_needed_approvals",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Set the number of validators needed to approve a block."
                      ]
                    },
                    {
                      "name": "set_relay_vrf_modulo_samples",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
                      ]
                    },
                    {
                      "name": "set_max_upward_queue_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Sets the maximum items that can present in a upward dispatch queue at once."
                      ]
                    },
                    {
                      "name": "set_max_upward_queue_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Sets the maximum total size of items that can present in a upward dispatch queue at once."
                      ]
                    },
                    {
                      "name": "set_max_downward_message_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Set the critical downward message size."
                      ]
                    },
                    {
                      "name": "set_max_upward_message_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Sets the maximum size of an upward message that can be sent by a candidate."
                      ]
                    },
                    {
                      "name": "set_max_upward_message_num_per_candidate",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Sets the maximum number of messages that a candidate can contain."
                      ]
                    },
                    {
                      "name": "set_hrmp_open_request_ttl",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Sets the number of sessions after which an HRMP open channel request expires."
                      ]
                    },
                    {
                      "name": "set_hrmp_sender_deposit",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Sets the amount of funds that the sender should provide for opening an HRMP channel."
                      ]
                    },
                    {
                      "name": "set_hrmp_recipient_deposit",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
                        "channel."
                      ]
                    },
                    {
                      "name": "set_hrmp_channel_max_capacity",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Sets the maximum number of messages allowed in an HRMP channel at once."
                      ]
                    },
                    {
                      "name": "set_hrmp_channel_max_total_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parachain_inbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parathread_inbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."
                      ]
                    },
                    {
                      "name": "set_hrmp_channel_max_message_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "Sets the maximum size of a message that could ever be put into an HRMP channel."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parachain_outbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parathread_outbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_message_num_per_candidate",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 39,
                      "docs": [
                        "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
                      ]
                    },
                    {
                      "name": "set_pvf_checking_enabled",
                      "fields": [
                        {
                          "name": "new",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 41,
                      "docs": [
                        "Enable or disable PVF pre-checking. Consult the field documentation prior executing."
                      ]
                    },
                    {
                      "name": "set_pvf_voting_ttl",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 42,
                      "docs": [
                        "Set the number of session changes after which a PVF pre-checking voting is rejected."
                      ]
                    },
                    {
                      "name": "set_minimum_validation_upgrade_delay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 43,
                      "docs": [
                        "Sets the minimum delay between announcing the upgrade block for a parachain until the",
                        "upgrade taking place.",
                        "",
                        "See the field documentation for information and constraints for the new value."
                      ]
                    },
                    {
                      "name": "set_bypass_consistency_check",
                      "fields": [
                        {
                          "name": "new",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 44,
                      "docs": [
                        "Setting this to true will disable consistency checks for the configuration setters.",
                        "Use with caution."
                      ]
                    },
                    {
                      "name": "set_async_backing_params",
                      "fields": [
                        {
                          "name": "new",
                          "type": 424,
                          "typeName": "AsyncBackingParams"
                        }
                      ],
                      "index": 45,
                      "docs": [
                        "Set the asynchronous backing parameters."
                      ]
                    },
                    {
                      "name": "set_executor_params",
                      "fields": [
                        {
                          "name": "new",
                          "type": 425,
                          "typeName": "ExecutorParams"
                        }
                      ],
                      "index": 46,
                      "docs": [
                        "Set PVF executor parameters."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "polkadot_primitives",
                "vstaging",
                "AsyncBackingParams"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_candidate_depth",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "allowed_ancestry_len",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "executor_params",
                "ExecutorParams"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 426,
                      "typeName": "Vec<ExecutorParam>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 426,
            "type": {
              "def": {
                "sequence": {
                  "type": 427
                }
              }
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "executor_params",
                "ExecutorParam"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MaxMemoryPages",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "StackLogicalMax",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "StackNativeMax",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PrecheckingMaxMemory",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PvfPrepTimeout",
                      "fields": [
                        {
                          "type": 428,
                          "typeName": "PvfPrepTimeoutKind"
                        },
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "PvfExecTimeout",
                      "fields": [
                        {
                          "type": 429,
                          "typeName": "PvfExecTimeoutKind"
                        },
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "WasmExtBulkMemory",
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "PvfPrepTimeoutKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Precheck",
                      "index": 0
                    },
                    {
                      "name": "Lenient",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "PvfExecTimeoutKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Backing",
                      "index": 0
                    },
                    {
                      "name": "Approval",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "shared",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 431,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 432,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras_inherent",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enter",
                      "fields": [
                        {
                          "name": "data",
                          "type": 433,
                          "typeName": "ParachainsInherentData<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Enter the paras inherent. This will process bitfields and backed candidates."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "InherentData"
              ],
              "params": [
                {
                  "name": "HDR",
                  "type": 300
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bitfields",
                      "type": 434,
                      "typeName": "UncheckedSignedAvailabilityBitfields"
                    },
                    {
                      "name": "backed_candidates",
                      "type": 441,
                      "typeName": "Vec<BackedCandidate<HDR::Hash>>"
                    },
                    {
                      "name": "disputes",
                      "type": 453,
                      "typeName": "MultiDisputeStatementSet"
                    },
                    {
                      "name": "parent_header",
                      "type": 300,
                      "typeName": "HDR"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 434,
            "type": {
              "def": {
                "sequence": {
                  "type": 435
                }
              }
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "signed",
                "UncheckedSigned"
              ],
              "params": [
                {
                  "name": "Payload",
                  "type": 436
                },
                {
                  "name": "RealPayload",
                  "type": 436
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "payload",
                      "type": 436,
                      "typeName": "Payload"
                    },
                    {
                      "name": "validator_index",
                      "type": 439,
                      "typeName": "ValidatorIndex"
                    },
                    {
                      "name": "signature",
                      "type": 440,
                      "typeName": "ValidatorSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "AvailabilityBitfield"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 437,
                      "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 437,
            "type": {
              "def": {
                "bitsequence": {
                  "bit_store_type": 2,
                  "bit_order_type": 438
                }
              }
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "bitvec",
                "order",
                "Lsb0"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "ValidatorIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "validator_app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 96,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "def": {
                "sequence": {
                  "type": 442
                }
              }
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "BackedCandidate"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "candidate",
                      "type": 443,
                      "typeName": "CommittedCandidateReceipt<H>"
                    },
                    {
                      "name": "validity_votes",
                      "type": 451,
                      "typeName": "Vec<ValidityAttestation>"
                    },
                    {
                      "name": "validator_indices",
                      "type": 437,
                      "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "CommittedCandidateReceipt"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "descriptor",
                      "type": 92,
                      "typeName": "CandidateDescriptor<H>"
                    },
                    {
                      "name": "commitments",
                      "type": 444,
                      "typeName": "CandidateCommitments"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "CandidateCommitments"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "upward_messages",
                      "type": 445,
                      "typeName": "UpwardMessages"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 446,
                      "typeName": "HorizontalMessages"
                    },
                    {
                      "name": "new_validation_code",
                      "type": 449,
                      "typeName": "Option<ValidationCode>"
                    },
                    {
                      "name": "head_data",
                      "type": 99,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "processed_downward_messages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_watermark",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 296,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 447
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 448,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 93
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 93,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 448,
            "type": {
              "def": {
                "sequence": {
                  "type": 447
                }
              }
            }
          },
          {
            "id": 449,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 450
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 450
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "ValidationCode"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 451,
            "type": {
              "def": {
                "sequence": {
                  "type": 452
                }
              }
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "ValidityAttestation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Implicit",
                      "fields": [
                        {
                          "type": 440,
                          "typeName": "ValidatorSignature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Explicit",
                      "fields": [
                        {
                          "type": 440,
                          "typeName": "ValidatorSignature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 453,
            "type": {
              "def": {
                "sequence": {
                  "type": 454
                }
              }
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "DisputeStatementSet"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "candidate_hash",
                      "type": 106,
                      "typeName": "CandidateHash"
                    },
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "statements",
                      "type": 455,
                      "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 455,
            "type": {
              "def": {
                "sequence": {
                  "type": 456
                }
              }
            }
          },
          {
            "id": 456,
            "type": {
              "def": {
                "tuple": [
                  457,
                  439,
                  440
                ]
              }
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "DisputeStatement"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Valid",
                      "fields": [
                        {
                          "type": 458,
                          "typeName": "ValidDisputeStatementKind"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "type": 459,
                          "typeName": "InvalidDisputeStatementKind"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "ValidDisputeStatementKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Explicit",
                      "index": 0
                    },
                    {
                      "name": "BackingSeconded",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "BackingValid",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ApprovalChecking",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "InvalidDisputeStatementKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Explicit",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_set_current_code",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_code",
                          "type": 450,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the storage for the parachain validation code immediately."
                      ]
                    },
                    {
                      "name": "force_set_current_head",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_head",
                          "type": 99,
                          "typeName": "HeadData"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the storage for the current parachain head data immediately."
                      ]
                    },
                    {
                      "name": "force_schedule_code_upgrade",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_code",
                          "type": 450,
                          "typeName": "ValidationCode"
                        },
                        {
                          "name": "relay_parent_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule an upgrade as if it was scheduled in the given relay parent block."
                      ]
                    },
                    {
                      "name": "force_note_new_head",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_head",
                          "type": 99,
                          "typeName": "HeadData"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Note a new block head for para within the context of the current block."
                      ]
                    },
                    {
                      "name": "force_queue_action",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Put a parachain directly into the next session's action queue.",
                        "We can't queue it any sooner than this without going into the",
                        "initializer..."
                      ]
                    },
                    {
                      "name": "add_trusted_validation_code",
                      "fields": [
                        {
                          "name": "validation_code",
                          "type": 450,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Adds the validation code to the storage.",
                        "",
                        "The code will not be added if it is already present. Additionally, if PVF pre-checking",
                        "is running for that code, it will be instantly accepted.",
                        "",
                        "Otherwise, the code will be added into the storage. Note that the code will be added",
                        "into storage with reference count 0. This is to account the fact that there are no users",
                        "for this code yet. The caller will have to make sure that this code eventually gets",
                        "used by some parachain or removed from the storage to avoid storage leaks. For the latter",
                        "prefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation.",
                        "",
                        "This function is mainly meant to be used for upgrading parachains that do not follow",
                        "the go-ahead signal while the PVF pre-checking feature is enabled."
                      ]
                    },
                    {
                      "name": "poke_unused_validation_code",
                      "fields": [
                        {
                          "name": "validation_code_hash",
                          "type": 98,
                          "typeName": "ValidationCodeHash"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Remove the validation code from the storage iff the reference count is 0.",
                        "",
                        "This is better than removing the storage directly, because it will not remove the code",
                        "that was suddenly got used by some parachain while this dispatchable was pending",
                        "dispatching."
                      ]
                    },
                    {
                      "name": "include_pvf_check_statement",
                      "fields": [
                        {
                          "name": "stmt",
                          "type": 461,
                          "typeName": "PvfCheckStatement"
                        },
                        {
                          "name": "signature",
                          "type": 440,
                          "typeName": "ValidatorSignature"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
                        "enacts the results if that was the last vote before achieving the supermajority."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "PvfCheckStatement"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "accept",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "subject",
                      "type": 98,
                      "typeName": "ValidationCodeHash"
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "validator_index",
                      "type": 439,
                      "typeName": "ValidatorIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "initializer",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_approve",
                      "fields": [
                        {
                          "name": "up_to",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a signal to the consensus engine to forcibly act as though all parachain",
                        "blocks in all relay chain blocks up to and including the given number in the current",
                        "chain are valid and should be finalized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "hrmp_init_open_channel",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "proposed_max_capacity",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "proposed_max_message_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Initiate opening a channel from a parachain to a given recipient with given channel",
                        "parameters.",
                        "",
                        "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
                        "- `proposed_max_message_size` - specifies the maximum size of the messages.",
                        "",
                        "These numbers are a subject to the relay-chain configuration limits.",
                        "",
                        "The channel can be opened only after the recipient confirms it and only on a session",
                        "change."
                      ]
                    },
                    {
                      "name": "hrmp_accept_open_channel",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Accept a pending open channel request from the given sender.",
                        "",
                        "The channel will be opened only on the next session boundary."
                      ]
                    },
                    {
                      "name": "hrmp_close_channel",
                      "fields": [
                        {
                          "name": "channel_id",
                          "type": 104,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Initiate unilateral closing of a channel. The origin must be either the sender or the",
                        "recipient in the channel being closed.",
                        "",
                        "The closure can only happen on a session change."
                      ]
                    },
                    {
                      "name": "force_clean_hrmp",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "inbound",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "outbound",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This extrinsic triggers the cleanup of all the HRMP storage items that",
                        "a para may have. Normally this happens once per session, but this allows",
                        "you to trigger the cleanup immediately for a specific parachain.",
                        "",
                        "Origin must be Root.",
                        "",
                        "Number of inbound and outbound channels for `para` must be provided as witness data of weighing."
                      ]
                    },
                    {
                      "name": "force_process_hrmp_open",
                      "fields": [
                        {
                          "name": "channels",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force process HRMP open channel requests.",
                        "",
                        "If there are pending HRMP open channel requests, you can use this",
                        "function process all of those requests immediately.",
                        "",
                        "Total number of opening channels must be provided as witness data of weighing."
                      ]
                    },
                    {
                      "name": "force_process_hrmp_close",
                      "fields": [
                        {
                          "name": "channels",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Force process HRMP close channel requests.",
                        "",
                        "If there are pending HRMP close channel requests, you can use this",
                        "function process all of those requests immediately.",
                        "",
                        "Total number of closing channels must be provided as witness data of weighing."
                      ]
                    },
                    {
                      "name": "hrmp_cancel_open_request",
                      "fields": [
                        {
                          "name": "channel_id",
                          "type": 104,
                          "typeName": "HrmpChannelId"
                        },
                        {
                          "name": "open_requests",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "This cancels a pending open channel request. It can be canceled by either of the sender",
                        "or the recipient for that request. The origin must be either of those.",
                        "",
                        "The cancellation happens immediately. It is not possible to cancel the request if it is",
                        "already accepted.",
                        "",
                        "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
                        "witness data."
                      ]
                    },
                    {
                      "name": "force_open_hrmp_channel",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "recipient",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "max_capacity",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Open a channel from a `sender` to a `recipient` `ParaId` using the Root origin. Although",
                        "opened by Root, the `max_capacity` and `max_message_size` are still subject to the Relay",
                        "Chain's configured limits.",
                        "",
                        "Expected use is when one of the `ParaId`s involved in the channel is governed by the",
                        "Relay Chain, e.g. a common good parachain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_unfreeze",
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_dispute_lost_unsigned",
                      "fields": [
                        {
                          "name": "dispute_proof",
                          "type": 466,
                          "typeName": "Box<DisputeProof>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "DisputeProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "time_slot",
                      "type": 467,
                      "typeName": "DisputesTimeSlot"
                    },
                    {
                      "name": "kind",
                      "type": 468,
                      "typeName": "SlashingOffenceKind"
                    },
                    {
                      "name": "validator_index",
                      "type": 439,
                      "typeName": "ValidatorIndex"
                    },
                    {
                      "name": "validator_id",
                      "type": 382,
                      "typeName": "ValidatorId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "DisputesTimeSlot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "candidate_hash",
                      "type": 106,
                      "typeName": "CandidateHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "SlashingOffenceKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ForInvalid",
                      "index": 0
                    },
                    {
                      "name": "AgainstValid",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "genesis_head",
                          "type": 99,
                          "typeName": "HeadData"
                        },
                        {
                          "name": "validation_code",
                          "type": 450,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register head data and validation code for a reserved Para Id.",
                        "",
                        "## Arguments",
                        "- `origin`: Must be called by a `Signed` origin.",
                        "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
                        "- `genesis_head`: The genesis head data of the parachain/thread.",
                        "- `validation_code`: The initial validation code of the parachain/thread.",
                        "",
                        "## Deposits/Fees",
                        "The origin signed account must reserve a corresponding deposit for the registration. Anything already",
                        "reserved previously for this para ID is accounted for.",
                        "",
                        "## Events",
                        "The `Registered` event is emitted in case of success."
                      ]
                    },
                    {
                      "name": "force_register",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "genesis_head",
                          "type": 99,
                          "typeName": "HeadData"
                        },
                        {
                          "name": "validation_code",
                          "type": 450,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Force the registration of a Para Id on the relay chain.",
                        "",
                        "This function must be called by a Root origin.",
                        "",
                        "The deposit taken can be specified for this registration. Any `ParaId`",
                        "can be registered, including sub-1000 IDs which are System Parachains."
                      ]
                    },
                    {
                      "name": "deregister",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Deregister a Para Id, freeing all data and returning any deposit.",
                        "",
                        "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."
                      ]
                    },
                    {
                      "name": "swap",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "other",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Swap a parachain with another parachain or parathread.",
                        "",
                        "The origin must be Root, the `para` owner, or the `para` itself.",
                        "",
                        "The swap will happen only if there is already an opposite swap pending. If there is not,",
                        "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                        "",
                        "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                        "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                        "scheduling info (i.e. whether they're a parathread or parachain), auction information",
                        "and the auction deposit are switched."
                      ]
                    },
                    {
                      "name": "remove_lock",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a manager lock from a para. This will allow the manager of a",
                        "previously locked para to deregister or swap a para without using governance.",
                        "",
                        "Can only be called by the Root origin or the parachain."
                      ]
                    },
                    {
                      "name": "reserve",
                      "index": 5,
                      "docs": [
                        "Reserve a Para Id on the relay chain.",
                        "",
                        "This function will reserve a new Para Id to be owned/managed by the origin account.",
                        "The origin account is able to register head data and validation code using `register` to create",
                        "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.",
                        "",
                        "## Arguments",
                        "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.",
                        "",
                        "## Deposits/Fees",
                        "The origin must reserve a deposit of `ParaDeposit` for the registration.",
                        "",
                        "## Events",
                        "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."
                      ]
                    },
                    {
                      "name": "add_lock",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Add a manager lock from a para. This will prevent the manager of a",
                        "para to deregister or swap a para.",
                        "",
                        "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
                      ]
                    },
                    {
                      "name": "schedule_code_upgrade",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_code",
                          "type": 450,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule a parachain upgrade.",
                        "",
                        "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
                      ]
                    },
                    {
                      "name": "set_current_head",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_head",
                          "type": 99,
                          "typeName": "HeadData"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the parachain's current head.",
                        "",
                        "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_lease",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "leaser",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "period_begin",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "period_count",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen",
                        "independently of any other on-chain mechanism to use it.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`."
                      ]
                    },
                    {
                      "name": "clear_all_leases",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`."
                      ]
                    },
                    {
                      "name": "trigger_onboard",
                      "fields": [
                        {
                          "name": "para",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Try to onboard a parachain that has a lease for the current lease period.",
                        "",
                        "This function can be useful if there was some state issue with a para that should",
                        "have onboarded, but was unable to. As long as they have a lease period, we can",
                        "let them onboard from here.",
                        "",
                        "Origin must be signed, but can be called by anyone."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "new_auction",
                      "fields": [
                        {
                          "name": "duration",
                          "type": 119,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "lease_period_index",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new auction.",
                        "",
                        "This can only happen when there isn't already an auction in progress and may only be",
                        "called by the root origin. Accepts the `duration` of this auction and the",
                        "`lease_period_index` of the initial lease period of the four that are to be auctioned."
                      ]
                    },
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "para",
                          "type": 472,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "auction_index",
                          "type": 119,
                          "typeName": "AuctionIndex"
                        },
                        {
                          "name": "first_slot",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_slot",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make a new bid from an account (including a parachain account) for deploying a new",
                        "parachain.",
                        "",
                        "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                        "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                        "",
                        "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                        "funded by) the same account.",
                        "- `auction_index` is the index of the auction to bid on. Should just be the present",
                        "value of `AuctionCounter`.",
                        "- `first_slot` is the first lease period index of the range to bid on. This is the",
                        "absolute lease period index value, not an auction-specific offset.",
                        "- `last_slot` is the last lease period index of the range to bid on. This is the",
                        "absolute lease period index value, not an auction-specific offset.",
                        "- `amount` is the amount to bid to be held as deposit for the parachain should the",
                        "bid win. This amount is held throughout the range."
                      ]
                    },
                    {
                      "name": "cancel_auction",
                      "index": 2,
                      "docs": [
                        "Cancel an in-progress auction.",
                        "",
                        "Can only be called by Root origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 472,
            "type": {
              "def": {
                "compact": {
                  "type": 93
                }
              }
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_period",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_period",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "end",
                          "type": 119,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "verifier",
                          "type": 474,
                          "typeName": "Option<MultiSigner>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new crowdloaning campaign for a parachain slot with the given lease period range.",
                        "",
                        "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
                        "by the parachain manager."
                      ]
                    },
                    {
                      "name": "contribute",
                      "fields": [
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "signature",
                          "type": 478,
                          "typeName": "Option<MultiSignature>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                        "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                      ]
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdraw full balance of a specific contributor.",
                        "",
                        "Origin must be signed, but can come from anyone.",
                        "",
                        "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement",
                        "flag must be set. For a fund to be ready for retirement, then:",
                        "- it must not already be in retirement;",
                        "- the amount of raised funds must be bigger than the _free_ balance of the account;",
                        "- and either:",
                        "  - the block number must be at least `end`; or",
                        "  - the current lease period must be greater than the fund's `last_period`.",
                        "",
                        "In this case, the fund's retirement flag is set and its `end` is reset to the current block",
                        "number.",
                        "",
                        "- `who`: The account whose contribution should be withdrawn.",
                        "- `index`: The parachain to whose crowdloan the contribution was made."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Automatically refund contributors of an ended crowdloan.",
                        "Due to weight restrictions, this function may need to be called multiple",
                        "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
                        "",
                        "Origin must be signed, but can come from anyone."
                      ]
                    },
                    {
                      "name": "dissolve",
                      "fields": [
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a fund after the retirement period has ended and all funds have been returned."
                      ]
                    },
                    {
                      "name": "edit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_period",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_period",
                          "type": 119,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "end",
                          "type": 119,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "verifier",
                          "type": 474,
                          "typeName": "Option<MultiSigner>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Edit the configuration for an in-progress crowdloan.",
                        "",
                        "Can only be called by Root origin."
                      ]
                    },
                    {
                      "name": "add_memo",
                      "fields": [
                        {
                          "name": "index",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "memo",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Add an optional memo to an existing crowdloan contribution.",
                        "",
                        "Origin must be Signed, and the user must have contributed to the crowdloan."
                      ]
                    },
                    {
                      "name": "poke",
                      "fields": [
                        {
                          "name": "index",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Poke the fund into `NewRaise`",
                        "",
                        "Origin must be Signed, and the fund has non-zero raise."
                      ]
                    },
                    {
                      "name": "contribute_all",
                      "fields": [
                        {
                          "name": "index",
                          "type": 472,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "signature",
                          "type": 478,
                          "typeName": "Option<MultiSignature>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain",
                        "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 475
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 475
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 475,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSigner"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "ed25519::Public"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "sr25519::Public"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 476,
                          "typeName": "ecdsa::Public"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 477,
                      "typeName": "[u8; 33]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 477,
            "type": {
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 478,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 479
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 479
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 391,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 480,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 481,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 481,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 483,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 152,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 152,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 495,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 116,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 73,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 152,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 151,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 166,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 152,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 151,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "force_suspension",
                      "fields": [
                        {
                          "name": "suspended",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Set or unset the global suspension state of the XCM executor.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `suspended`: `true` to suspend, `false` to resume."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 484,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 485,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 485,
            "type": {
              "def": {
                "sequence": {
                  "type": 486
                }
              }
            }
          },
          {
            "id": 486,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 487,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 153,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 153,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 145,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 146,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 158,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 155,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 494,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 484,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 484,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 153,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 488,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 489
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 489
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 489,
            "type": {
              "def": {
                "tuple": [
                  4,
                  490
                ]
              }
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 492,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 156,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 493,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 494,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 495,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 496,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 500,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 497,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 497,
            "type": {
              "def": {
                "sequence": {
                  "type": 498
                }
              }
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 487,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 153,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 153,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 145,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 499,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 158,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 153,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 484,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 157,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 491,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 155,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 494,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 496,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 496,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 153,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 157,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 499,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 500,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 501,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 501,
            "type": {
              "def": {
                "sequence": {
                  "type": 502
                }
              }
            }
          },
          {
            "id": 502,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 135,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 145,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 499,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 116,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 148,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 151,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 500,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 500,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 119,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 119,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 121,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 117,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 125,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 151,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 144,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "reap_page",
                      "fields": [
                        {
                          "name": "message_origin",
                          "type": 168,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page_index",
                          "type": 4,
                          "typeName": "PageIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Remove a page which has no more messages remaining to be processed or is stale."
                      ]
                    },
                    {
                      "name": "execute_overweight",
                      "fields": [
                        {
                          "name": "message_origin",
                          "type": 168,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page",
                          "type": 4,
                          "typeName": "PageIndex"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::Size"
                        },
                        {
                          "name": "weight_limit",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Execute an overweight message.",
                        "",
                        "Temporary processing errors will be propagated whereas permanent errors are treated",
                        "as success condition.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `message_origin`: The origin from which the message to be executed arrived.",
                        "- `page`: The page in the queue in which the message to be executed is sitting.",
                        "- `index`: The index into the queue of the message to be executed.",
                        "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                        "  of the message.",
                        "",
                        "Benchmark complexity considerations: O(index + weight_limit)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 504,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_sudo_wrapper",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo_schedule_para_initialize",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "genesis",
                          "type": 505,
                          "typeName": "ParaGenesisArgs"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Schedule a para to be initialized at the start of the next session."
                      ]
                    },
                    {
                      "name": "sudo_schedule_para_cleanup",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Schedule a para to be cleaned up at the start of the next session."
                      ]
                    },
                    {
                      "name": "sudo_schedule_parathread_upgrade",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Upgrade a parathread to a parachain"
                      ]
                    },
                    {
                      "name": "sudo_schedule_parachain_downgrade",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Downgrade a parachain to a parathread"
                      ]
                    },
                    {
                      "name": "sudo_queue_downward_xcm",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "xcm",
                          "type": 483,
                          "typeName": "Box<xcm::opaque::VersionedXcm>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a downward XCM to the given para.",
                        "",
                        "The given parachain should exist and the payload should not exceed the preconfigured size",
                        "`config.max_downward_message_size`."
                      ]
                    },
                    {
                      "name": "sudo_establish_hrmp_channel",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "recipient",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "max_capacity",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Forcefully establish a channel from the sender to the recipient.",
                        "",
                        "This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by",
                        "`Hrmp::hrmp_accept_open_channel`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 505,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaGenesisArgs"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "genesis_head",
                      "type": 99,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "validation_code",
                      "type": 450,
                      "typeName": "ValidationCode"
                    },
                    {
                      "name": "para_kind",
                      "type": 37,
                      "typeName": "ParaKind"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "assigned_slots",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "assign_perm_parachain_slot",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign a permanent parachain slot and immediately create a lease for it."
                      ]
                    },
                    {
                      "name": "assign_temp_parachain_slot",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "lease_period_start",
                          "type": 507,
                          "typeName": "SlotLeasePeriodStart"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign a temporary parachain slot. The function tries to create a lease for it",
                        "immediately if `SlotLeasePeriodStart::Current` is specified, and if the number",
                        "of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`."
                      ]
                    },
                    {
                      "name": "unassign_parachain_slot",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unassign a permanent or temporary parachain slot"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 507,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "assigned_slots",
                "SlotLeasePeriodStart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Current",
                      "index": 0
                    },
                    {
                      "name": "Next",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 508,
            "type": {
              "path": [
                "pallet_validator_manager",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_validators",
                      "fields": [
                        {
                          "name": "validators",
                          "type": 78,
                          "typeName": "Vec<T::ValidatorId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add new validators to the set.",
                        "",
                        "The new validators will be active from current session + 2."
                      ]
                    },
                    {
                      "name": "deregister_validators",
                      "fields": [
                        {
                          "name": "validators",
                          "type": 78,
                          "typeName": "Vec<T::ValidatorId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove validators from the set.",
                        "",
                        "The removed validators will be deactivated from current session + 2."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 509,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_collection",
                      "fields": [
                        {
                          "name": "descriptor",
                          "type": 510,
                          "typeName": "Box<<T as Config>::CollectionDescriptor>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Creates a new [`Collection`](ep_multi_tokens::Collection) from `descriptor`",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::DepositReserveFailed`] if the deposit cannot be reserved"
                      ]
                    },
                    {
                      "name": "destroy_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Destroys [`Collection`](ep_multi_tokens::Collection) with `id`. `origin` must be the",
                        "owner of the [`Collection`](ep_multi_tokens::Collection).",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::NoPermission`] if `origin` is not the owner of the collection.",
                        "- [`Error::CollectionNotFound`] if `Collection` with `id` does not exist.",
                        "- [`Error::DestroyForbiddenByCollectionEvent`] if another pallet is blocking the",
                        "  collection's destruction",
                        "- [`Error::DestroyForbiddenByRemainingTokens`] if collection still has tokens when",
                        "  destroying",
                        "- [`Error::DestroyForbiddenByAttributeCount`] if collection still has attributes when",
                        "  destroying",
                        "current number of collection attributes."
                      ]
                    },
                    {
                      "name": "mutate_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "mutation",
                          "type": 174,
                          "typeName": "Box<<T as Config>::CollectionMutation>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Modify [`Collection`](ep_multi_tokens::Collection) with `id` by applying `mutation`",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
                        "- [`Error::NoPermission`] if `origin` is not the owner of `collection`."
                      ]
                    },
                    {
                      "name": "mutate_token",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "T::TokenId"
                        },
                        {
                          "name": "mutation",
                          "type": 183,
                          "typeName": "Box<<T as Config>::TokenMutation>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Modify [`Token`](ep_multi_tokens::Token) with `token_id`  from",
                        "[`Collection`](ep_multi_tokens::Collection) with `collection_id` by applying `mutation`",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::CurrencyIncompatibleWithCollectionRoyalty`] if token has already been",
                        "  assigned a royalty",
                        "- [`Error::NoPermission`] if not the collection owner",
                        "- [`Error::TokenNotFound`] if Token does not exist",
                        "- [`Error::ConflictingLocation`] if the new location is already occupied"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "params",
                          "type": 520,
                          "typeName": "Box<MintParamsOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "`origin` mints to `recipient` for `collection_id` with `params` using the pallet's",
                        "[`MintPolicy`](traits::CollectionPolicy::Mint).",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::AmountZero`] if `amount == 0`.",
                        "- [`Error::CollectionNotFound`] if `Collection` does not exist.",
                        "- [`Error::TokenNotFound`] if `Token` does not exist.",
                        "- [`Error::TokenAlreadyExists`] if attempting to create a token that already exists",
                        "- [`Error::NoPermission`] if `caller` is not allowed to mint the `collection`.",
                        "- [`Error::TokenMintCapExceeded`] if the mint policy TokenCap does not allow minting",
                        "- `MaxTokenCountExceeded` if the mint policy max_token_count is exceeded",
                        "- [`Error::DepositReserveFailed`] if the issuer does not have sufficient balance for",
                        "  token deposit",
                        "- [`Error::ConflictingLocation`] if the token is foreign and the location is already",
                        "  mapped to another asset in `AssetIdsByLocation`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "params",
                          "type": 524,
                          "typeName": "BurnParamsOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Reduces the balance of `owner` by `amount` of `token_id` from `collection_id`.",
                        "It also updates the total supply of `collection_id`.",
                        "",
                        "# Errors",
                        "- [`Error::CollectionNotFound`] if `collection` does not exist.",
                        "- [`Error::BalanceLow`] if `owner` account does not has enough amount of any token in",
                        "  `tokens` of `collection`.",
                        "- [`Error::DepositUnreserveFailed`] if caller does not have enough reserved balance to",
                        "  unreserve",
                        "- [`Error::DestroyForbiddenByAttributeCount`] if removing token from storage but the",
                        "  attribute count is greater than zero"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "params",
                          "type": 525,
                          "typeName": "TransferParamsOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "`operator` transfers to `recipient` for `collection_id` with `params`",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::AmountZero`] if `amount == 0`.",
                        "- [`Error::BalanceLow`] if `source` does not own enough amount of `collection`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "info",
                          "type": 197,
                          "typeName": "FreezeOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Freeze collection, token or account"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "info",
                          "type": 197,
                          "typeName": "FreezeOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Thaw collection, token or account"
                      ]
                    },
                    {
                      "name": "set_attribute",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>"
                        },
                        {
                          "name": "key",
                          "type": 201,
                          "typeName": "T::AttributeKey"
                        },
                        {
                          "name": "value",
                          "type": 202,
                          "typeName": "T::AttributeValue"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Sets the attribute `key` to `value` for `collection_id`.",
                        "If `token_id` is [`None`], the attribute is added to the collection. If it is [`Some`],",
                        "the attribute is added to the token.",
                        "",
                        "# Errors",
                        "- [`Error::InvalidAttributeKey`] if `key.len() == 0`",
                        "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
                        "- [`Error::TokenNotFound`] if `token_id` is `Some` and does not exist.",
                        "- [`Error::NoPermission`] if `source` account is not the owner of the collection.",
                        "- [`Error::DepositReserveFailed`] if unable to reserve the deposit for the attribute",
                        "  storage."
                      ]
                    },
                    {
                      "name": "remove_attribute",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>"
                        },
                        {
                          "name": "key",
                          "type": 201,
                          "typeName": "T::AttributeKey"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Removes the `key` attribute from the given `collection_id` or `token_id`.",
                        "",
                        "# Errors",
                        "- [`Error::InvalidAttributeKey`] if `key.len() == 0`",
                        "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
                        "- [`Error::TokenNotFound`] if `token_id` is `Some` and does not exist.",
                        "- [`Error::NoPermission`] if `caller` is not the owner of the collection.",
                        "- `Underflow` if an attribute counter underflows"
                      ]
                    },
                    {
                      "name": "remove_all_attributes",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>"
                        },
                        {
                          "name": "attribute_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Removes all attributes from the given `collection_id` or `token_id`.",
                        "",
                        "# Errors",
                        "- `InvalidAttributeCount` if `attribute_count` doesn't match the number of attributes",
                        "- [`Error::CollectionNotFound`] if Collection with `collection_id` does not exist.",
                        "- [`Error::TokenNotFound`] if Token with `token_id` does not exist.",
                        "- [`Error::NoPermission`] if `origin` account is not the owner of the Collection or",
                        "  Token",
                        "- other errors from `remove_attribute`"
                      ]
                    },
                    {
                      "name": "batch_transfer",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "recipients",
                          "type": 526,
                          "typeName": "TransferRecipientsOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Transfers the specific amount of tokens of `collection` to `recipients` from `origin`",
                        "account. A single failure will fail all transfers.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::AmountZero`] if `amount == 0`.",
                        "- [`Error::BalanceLow`] if `source` does not own enough amount of `collection`."
                      ]
                    },
                    {
                      "name": "batch_mint",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "recipients",
                          "type": 529,
                          "typeName": "MintRecipientsOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Collection owner mints tokens of `collection_id` to `recipients` consisting of an",
                        "[`AccountId`](frame_system::Config::AccountId) and [`MintParams`]. A single mint failure",
                        "will fail all of them in the batch.",
                        "",
                        "# Errors",
                        "- [`Error::AmountZero`] if `amount == 0`.",
                        "- [`Error::CollectionNotFound`] if `collection` does **not** exist.",
                        "- [`Error::NoPermission`] if `caller` is not allowed to mint the `collection`.",
                        "- [`Error::TokenMintCapExceeded`] if the mint policy TokenCap does not allow minting",
                        "- [`Error::MaxTokenCountExceeded`] if the mint policy max_token_count is exceeded",
                        "- [`Error::DepositReserveFailed`] if the issuer does not have sufficient balance for",
                        "  token deposit"
                      ]
                    },
                    {
                      "name": "batch_set_attribute",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>"
                        },
                        {
                          "name": "attributes",
                          "type": 511,
                          "typeName": "AttributesOf<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Collection owner sets `attributes` to `collection_id`",
                        "",
                        "If `token_id` is [`None`], the attribute is added to the collection. If it is [`Some`],",
                        "the attribute is added to the token.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::InvalidAttributeKey`] if `key.len() == 0`",
                        "- [`Error::CollectionNotFound`] if `collection_id` does not exist.",
                        "- [`Error::TokenNotFound`] if `token_id` is `Some` and does not exist.",
                        "- [`Error::NoPermission`] if `source` account is not the owner of the collection.",
                        "- [`Error::DepositReserveFailed`] if unable to reserve the deposit for the attribute",
                        "  storage."
                      ]
                    },
                    {
                      "name": "approve_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "expiration",
                          "type": 73,
                          "typeName": "T::Expiration"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Approve the `operator` to manage all of `origin`'s tokens belonging to `collection_id`.",
                        "If an `expiration` is provided, the approval will end when it expires.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::CannotApproveSelf`] if `origin == operator`",
                        "- [`Error::AlreadyExpired`] if `expiration` is earlier than now",
                        "- [`Error::CollectionAccountNotFound`] if the collection account does not exist",
                        "- [`Error::MaxApprovalsExceeded`] if approval count has exceeded the maximum"
                      ]
                    },
                    {
                      "name": "unapprove_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Unapprove the `operator` to manage all of `origin`'s tokens belonging to `collection`",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::CollectionAccountNotFound`] if the collection account cannot be found"
                      ]
                    },
                    {
                      "name": "approve_token",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "T::TokenId"
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "T::TokenBalance"
                        },
                        {
                          "name": "expiration",
                          "type": 73,
                          "typeName": "T::Expiration"
                        },
                        {
                          "name": "current_amount",
                          "type": 63,
                          "typeName": "T::TokenBalance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Approve `operator` to transfer up to `amount` of `caller`'s balance for `token_id` of",
                        "`collection_id`. An `expiration` can be provided. `current_amount` must match the",
                        "current approved amount.",
                        "",
                        "# Errors",
                        "- [`Error::CannotApproveSelf`] if `origin == operator`",
                        "- [`Error::CollectionAlreadyApproved`] if `collection_id` is already approved",
                        "- [`Error::AlreadyExpired`] if `expiration` is earlier than now",
                        "- [`Error::TokenAccountNotFound`] if the token account does not exist",
                        "- [`Error::MaxApprovalsExceeded`] if approval count has exceeded the maximum",
                        "- [`Error::WrongCurrentApprovedAmount`] if `current_amount` does not match the current",
                        "  approval amount"
                      ]
                    },
                    {
                      "name": "unapprove_token",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "T::TokenId"
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Unapprove `operator` to transfer `origin`'s `token_id` of `collection_id`",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::TokenAccountNotFound`] if the token account does not exist"
                      ]
                    },
                    {
                      "name": "claim_collections",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "ethereum_signature",
                          "type": 480,
                          "typeName": "Signature"
                        },
                        {
                          "name": "ethereum_address",
                          "type": 244,
                          "typeName": "EthereumAddress"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Transfers ownership of collections to `destination` if the signature matches.",
                        "",
                        "The dispatch origin for this call must be _None_.",
                        "",
                        "Unsigned Validation:",
                        "A call to claim is deemed valid if the signature provided matches",
                        "the expected signed message of:",
                        "",
                        "> Ethereum Signed Message:",
                        "> (configured prefix string)(address)",
                        "",
                        "and `address` matches the `destination` account.",
                        "",
                        "This will always execute with weight of [`Config::MaxClaimableCollectionsPerAccount`]",
                        "and it will reimburse weight for collections under that number.",
                        "",
                        "### Parameters:",
                        "- `destination`: The account that will receive ownership of the collections",
                        "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                        "  described above.",
                        "- `ethereum_address` : The Ethereum address from which the message is signed."
                      ]
                    },
                    {
                      "name": "claim_tokens",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "ethereum_signature",
                          "type": 480,
                          "typeName": "Signature"
                        },
                        {
                          "name": "ethereum_address",
                          "type": 244,
                          "typeName": "EthereumAddress"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Transfers balances of tokens to `destination` if the signature matches. Mints tokens if",
                        "needed.",
                        "",
                        "The dispatch origin for this call must be _None_.",
                        "",
                        "Unsigned Validation:",
                        "A call to claim is deemed valid if the signature provided matches",
                        "the expected signed message of:",
                        "",
                        "> Ethereum Signed Message:",
                        "> (configured prefix string)(address)",
                        "",
                        "and `address` matches the `destination` account.",
                        "",
                        "This will always execute with weight of [`Config::MaxClaimableTokensPerCall`]",
                        "and it will reimburse weight for tokens under that number.",
                        "",
                        "### Parameters:",
                        "- `destination`: The account that will receive token balances",
                        "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                        "  described above.",
                        "- `ethereum_address` : The Ethereum address from which the message is signed."
                      ]
                    },
                    {
                      "name": "force_mutate_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "mutation",
                          "type": 174,
                          "typeName": "Box<<T as Config>::CollectionMutation>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Exactly as [`mutate_collection`](Self::mutate_collection), except the origin must be",
                        "root and the `caller` account should be specified.",
                        "",
                        "# Errors",
                        "",
                        "Same as [`mutate_collection`](Self::mutate_collection)"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "destination",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "params",
                          "type": 525,
                          "typeName": "TransferParamsOf<T>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Exactly as [`transfer`](Self::transfer), except the origin must be root and the source",
                        "account should be specified.",
                        "",
                        "# Errors",
                        "",
                        "Same as [`transfer`](Self::transfer)"
                      ]
                    },
                    {
                      "name": "force_set_collection",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "value",
                          "type": 204,
                          "typeName": "Box<Option<CollectionOf<T>>>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Set the Collections storage to the given `value`, origin must be root"
                      ]
                    },
                    {
                      "name": "force_set_token",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "T::TokenId"
                        },
                        {
                          "name": "value",
                          "type": 532,
                          "typeName": "Option<Box<TokenOf<T>>>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Set the Tokens storage to the given `value`, origin must be root"
                      ]
                    },
                    {
                      "name": "force_set_attribute",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 77,
                          "typeName": "Option<T::TokenId>"
                        },
                        {
                          "name": "key",
                          "type": 201,
                          "typeName": "T::AttributeKey"
                        },
                        {
                          "name": "value",
                          "type": 533,
                          "typeName": "Option<AttributeOf<T>>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Set the Tokens storage to the given `value`, origin must be root"
                      ]
                    },
                    {
                      "name": "force_set_collection_account",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "account_id",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 222,
                          "typeName": "Option<CollectionAccountOf<T>>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Set the CollectionAccounts storage to the given `value`, origin must be root"
                      ]
                    },
                    {
                      "name": "force_set_token_account",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "T::TokenId"
                        },
                        {
                          "name": "account_id",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 229,
                          "typeName": "Option<TokenAccountOf<T>>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Set the TokenAccounts storage to the given `value`, origin must be root"
                      ]
                    },
                    {
                      "name": "force_create_collection",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "descriptor",
                          "type": 510,
                          "typeName": "Box<<T as Config>::CollectionDescriptor>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Creates a new collection from `descriptor` at `collection_id`, origin must be root",
                        "",
                        "# Errors",
                        "- [`Error::DepositReserveFailed`] if the deposit cannot be reserved",
                        "- [`Error::CollectionIdAlreadyInUse`] if the collection id is already in use"
                      ]
                    },
                    {
                      "name": "force_mint",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "recipient",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "params",
                          "type": 520,
                          "typeName": "Box<MintParamsOf<T>>"
                        },
                        {
                          "name": "deposit_backer",
                          "type": 535,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Same as [`mint`](Self::mint), but it is callable by",
                        "[`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "force_burn",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "params",
                          "type": 524,
                          "typeName": "BurnParamsOf<T>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Same as [`burn`](Self::burn), but it is only callable by",
                        "[`Config::ForceOrigin`]. Executes the burn by `caller`."
                      ]
                    },
                    {
                      "name": "force_approve_collection",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "operator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "expiration",
                          "type": 73,
                          "typeName": "T::Expiration"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Same as [`approve_collection`](Self::approve_collection), but it is callable by",
                        "[`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "force_freeze",
                      "fields": [
                        {
                          "name": "info",
                          "type": 197,
                          "typeName": "FreezeOf<T>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Same as [`freeze`](Self::freeze), but it is callable by [`Config::ForceOrigin`]"
                      ]
                    },
                    {
                      "name": "force_set_next_collection_id",
                      "fields": [
                        {
                          "name": "value",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Sets [`NextCollectionId`] to `value`. Only callable by [`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "force_set_ethereum_account",
                      "fields": [
                        {
                          "name": "address",
                          "type": 244,
                          "typeName": "EthereumAddress"
                        },
                        {
                          "name": "value",
                          "type": 536,
                          "typeName": "Option<CollectionIdsOf<T>>"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "Sets [`ClaimableCollectionIds`] to `value`. Only callable by [`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "force_set_ethereum_collection_id",
                      "fields": [
                        {
                          "name": "ethereum_collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "native_collection_id",
                          "type": 77,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "Sets [`NativeCollectionIds`] to `native_collection_id`. Only callable by",
                        "[`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "force_set_unmintable_token_ids",
                      "fields": [
                        {
                          "name": "collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "value",
                          "type": 538,
                          "typeName": "Option<RangeInclusiveOf<T>>"
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "Sets [`UnmintableTokenIds`] to `value`. Only callable by [`Config::ForceOrigin`]."
                      ]
                    },
                    {
                      "name": "force_create_ethereum_collection",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "native_collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "ethereum_collection_id",
                          "type": 63,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "token_range",
                          "type": 539,
                          "typeName": "RangeInclusiveOf<T>"
                        },
                        {
                          "name": "descriptor",
                          "type": 510,
                          "typeName": "Box<<T as Config>::CollectionDescriptor>"
                        }
                      ],
                      "index": 39,
                      "docs": [
                        "Creates a new collection from `descriptor` at `collection_id`, origin must be root",
                        "It differes from `force_create_collection` since it writes to NativeCollectionId and",
                        "UnmintableTokenIds",
                        "",
                        "# Errors",
                        "- [`Error::DepositReserveFailed`] if the deposit cannot be reserved",
                        "- [`Error::CollectionIdAlreadyInUse`] if the collection id is already in use"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "ep_multi_tokens",
                "collection",
                "DefaultCollectionDescriptor"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Royalty",
                  "type": 175
                },
                {
                  "name": "ExplicitRoyaltyCurrenciesVec",
                  "type": 176
                },
                {
                  "name": "Attributes",
                  "type": 511
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "policy",
                      "type": 514,
                      "typeName": "DefaultCollectionPolicyDescriptor<TokenBalance, Royalty>"
                    },
                    {
                      "name": "explicit_royalty_currencies",
                      "type": 176,
                      "typeName": "ExplicitRoyaltyCurrenciesVec"
                    },
                    {
                      "name": "attributes",
                      "type": 511,
                      "typeName": "Attributes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 511,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 512
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 513,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 512,
            "type": {
              "path": [
                "ep_multi_tokens",
                "batch",
                "AttributeKeyValuePair"
              ],
              "params": [
                {
                  "name": "Key",
                  "type": 201
                },
                {
                  "name": "Value",
                  "type": 202
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "key",
                      "type": 201,
                      "typeName": "Key"
                    },
                    {
                      "name": "value",
                      "type": 202,
                      "typeName": "Value"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 513,
            "type": {
              "def": {
                "sequence": {
                  "type": 512
                }
              }
            }
          },
          {
            "id": 514,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "DefaultCollectionPolicyDescriptor"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Royalty",
                  "type": 175
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mint",
                      "type": 515,
                      "typeName": "DefaultMintPolicyDescriptor<TokenBalance>"
                    },
                    {
                      "name": "burn",
                      "type": 516,
                      "typeName": "DefaultBurnPolicyDescriptor"
                    },
                    {
                      "name": "transfer",
                      "type": 517,
                      "typeName": "DefaultTransferPolicyDescriptor"
                    },
                    {
                      "name": "attribute",
                      "type": 518,
                      "typeName": "DefaultAttributePolicyDescriptor"
                    },
                    {
                      "name": "market",
                      "type": 519,
                      "typeName": "DefaultMarketPolicyDescriptor<Royalty>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "mint",
                "DefaultMintPolicyDescriptor"
              ],
              "params": [
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_token_count",
                      "type": 208,
                      "typeName": "Option<TokenCount>"
                    },
                    {
                      "name": "max_token_supply",
                      "type": 77,
                      "typeName": "Option<TokenBalance>"
                    },
                    {
                      "name": "force_single_mint",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 516,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "burn",
                "DefaultBurnPolicyDescriptor"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 517,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "transfer",
                "DefaultTransferPolicyDescriptor"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 518,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "attribute",
                "DefaultAttributePolicyDescriptor"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "market",
                "DefaultMarketPolicyDescriptor"
              ],
              "params": [
                {
                  "name": "Royalty",
                  "type": 175
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "royalty",
                      "type": 180,
                      "typeName": "Option<Royalty>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 520,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "mint",
                "DefaultMintParams"
              ],
              "params": [
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Royalty",
                  "type": 175
                },
                {
                  "name": "Attributes",
                  "type": 511
                },
                {
                  "name": "ForeignName",
                  "type": 186
                },
                {
                  "name": "ForeignSymbol",
                  "type": 189
                },
                {
                  "name": "Location",
                  "type": 116
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CreateToken",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "TokenId"
                        },
                        {
                          "name": "initial_supply",
                          "type": 63,
                          "typeName": "TokenBalance"
                        },
                        {
                          "name": "sufficiency",
                          "type": 521,
                          "typeName": "SufficiencyParam<Balance, TokenBalance>"
                        },
                        {
                          "name": "cap",
                          "type": 219,
                          "typeName": "Option<TokenCap<TokenBalance>>"
                        },
                        {
                          "name": "behavior",
                          "type": 193,
                          "typeName": "Option<TokenMarketBehavior<Royalty>>"
                        },
                        {
                          "name": "listing_forbidden",
                          "type": 37,
                          "typeName": "bool"
                        },
                        {
                          "name": "freeze_state",
                          "type": 199,
                          "typeName": "Option<FreezeState>"
                        },
                        {
                          "name": "attributes",
                          "type": 511,
                          "typeName": "Attributes"
                        },
                        {
                          "name": "foreign_params",
                          "type": 522,
                          "typeName": "Option<ForeignTokenCreationParams<ForeignName, ForeignSymbol, Location>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Mint",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "TokenId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "TokenBalance"
                        },
                        {
                          "name": "unit_price",
                          "type": 77,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 521,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "mint",
                "SufficiencyParam"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Insufficient",
                      "fields": [
                        {
                          "name": "unit_price",
                          "type": 77,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sufficient",
                      "fields": [
                        {
                          "name": "minimum_balance",
                          "type": 6,
                          "typeName": "TokenBalance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 523
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 523
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 523,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "mint",
                "ForeignTokenCreationParams"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 186
                },
                {
                  "name": "Symbol",
                  "type": 189
                },
                {
                  "name": "Location",
                  "type": 116
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "decimal_count",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 186,
                      "typeName": "Name"
                    },
                    {
                      "name": "symbol",
                      "type": 189,
                      "typeName": "Symbol"
                    },
                    {
                      "name": "location",
                      "type": 144,
                      "typeName": "Option<Location>"
                    },
                    {
                      "name": "units_per_second",
                      "type": 77,
                      "typeName": "Option<u128>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 524,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "burn",
                "DefaultBurnParams"
              ],
              "params": [
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "token_id",
                      "type": 63,
                      "typeName": "TokenId"
                    },
                    {
                      "name": "amount",
                      "type": 63,
                      "typeName": "TokenBalance"
                    },
                    {
                      "name": "keep_alive",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "remove_token_storage",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 525,
            "type": {
              "path": [
                "ep_multi_tokens",
                "policy",
                "transfer",
                "DefaultTransferParams"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "TokenBalance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Simple",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "TokenId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "TokenBalance"
                        },
                        {
                          "name": "keep_alive",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Operator",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 63,
                          "typeName": "TokenId"
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "TokenBalance"
                        },
                        {
                          "name": "keep_alive",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 526,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 527
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 528,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 527,
            "type": {
              "path": [
                "ep_multi_tokens",
                "batch",
                "Recipient"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Params",
                  "type": 525
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "params",
                      "type": 525,
                      "typeName": "Params"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 528,
            "type": {
              "def": {
                "sequence": {
                  "type": 527
                }
              }
            }
          },
          {
            "id": 529,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 530
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 531,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 530,
            "type": {
              "path": [
                "ep_multi_tokens",
                "batch",
                "Recipient"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Params",
                  "type": 520
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "params",
                      "type": 520,
                      "typeName": "Params"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 531,
            "type": {
              "def": {
                "sequence": {
                  "type": 530
                }
              }
            }
          },
          {
            "id": 532,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 218
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 218
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 533,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 534
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 534
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 534,
            "type": {
              "path": [
                "ep_multi_tokens",
                "attribute",
                "Attribute"
              ],
              "params": [
                {
                  "name": "AttributeValue",
                  "type": 202
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 202,
                      "typeName": "AttributeValue"
                    },
                    {
                      "name": "deposit",
                      "type": 63,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 535,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 309
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 309
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 536,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 537
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 537
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 537,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 86,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 539
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 539
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "features",
                "ethereum",
                "RangeInclusive"
              ],
              "params": [
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 63,
                      "typeName": "TokenId"
                    },
                    {
                      "name": "end",
                      "type": 63,
                      "typeName": "TokenId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 540,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_fuel_tank",
                      "fields": [
                        {
                          "name": "descriptor",
                          "type": 541,
                          "typeName": "FuelTankDescriptorOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Creates a fuel tank, given a descriptor",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::FuelTankAlreadyExists`] if `tank_id` already exists",
                        "- [`Error::DuplicateRuleKinds`] if a rule set has multiple rules of the same kind"
                      ]
                    },
                    {
                      "name": "mutate_fuel_tank",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "mutation",
                          "type": 253,
                          "typeName": "T::TankMutation"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Apply `mutation` to fuel tank with `tank_id`.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
                        "- [`Error::NoPermission`] if `origin` is not the fuel tank owner"
                      ]
                    },
                    {
                      "name": "add_account",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Adds new account for `user_id` to fuel tank at `tank_id`. An account is",
                        "required to dispatch calls. A deposit is required, and may be paid by",
                        "the user or the fuel tank, depending on the settings.",
                        "",
                        "### Errors",
                        "",
                        "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
                        "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
                        "- [`Error::AccountAlreadyExists`] if account at `user_id` already exists"
                      ]
                    },
                    {
                      "name": "remove_account",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Removes account for `user_id` from fuel tank at `tank_id`. Any deposits",
                        "are returned.",
                        "",
                        "### Errors",
                        "",
                        "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
                        "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
                        "- [`Error::AccountNotFound`] if account at `user_id` does not exist"
                      ]
                    },
                    {
                      "name": "remove_account_rule_data",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId"
                        },
                        {
                          "name": "rule_kind",
                          "type": 268,
                          "typeName": "DispatchRuleKind"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove account rule data if it exists. Only callable by the fuel tank's owner. Requires",
                        "the fuel tank or the rule set to be frozen.",
                        "",
                        "### Errors",
                        "",
                        "- [`Error::FuelTankNotFound`] if fuel tank for `tank_id` doesn't exist",
                        "- [`Error::NoPermission`] if called by non-owner",
                        "- [`Error::AccountNotFound`] if account does not exist for `user_id`",
                        "- [`Error::RuleSetNotFound`] if rule set does not exist for `rule_set_id`",
                        "- [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen",
                        "- [`Error::RuleNotFound`] if rule does not exist for `rule_kind`"
                      ]
                    },
                    {
                      "name": "dispatch",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "settings",
                          "type": 567,
                          "typeName": "Option<DispatchSettings>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a call using the `tank_id` subject to the rules of `rule_set_id`",
                        "",
                        "# Errors",
                        "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
                        "- [`Error::UsageRestricted`] if caller is not part of ruleset whitelist",
                        "- [`Error::CallerDoesNotHaveRuleSetTokenBalance`] if caller does not own the tokens to",
                        "  use the ruleset for remaining_fee when `pays_remaining_fee` is true",
                        "- [`Error::FuelTankOutOfFunds`] if the fuel tank account cannot pay fees"
                      ]
                    },
                    {
                      "name": "dispatch_and_touch",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "settings",
                          "type": 567,
                          "typeName": "Option<DispatchSettings>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Same as [dispatch](Self::dispatch), but creates an account for `origin` if it does not",
                        "exist and is allowed by the fuel tank's `user_account_management` settings.",
                        "",
                        "# Errors",
                        "",
                        "Returns the same errors as [dispatch](Self::dispatch) and",
                        "[add_account](Self::add_account)"
                      ]
                    },
                    {
                      "name": "schedule_mutate_freeze_state",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 73,
                          "typeName": "Option<T::RuleSetId>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule mutating of `is_frozen` state that determines if fuel tank or rule set can be",
                        "used",
                        "",
                        "Additional 1 read and 1 write are added to account for `on_finalize` storage operations",
                        "",
                        "# Errors",
                        "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
                        "- [`Error::NoPermission`] if caller is not a fuel tank owner",
                        "- [`Error::FreezeQueueFull`] if the queue is full"
                      ]
                    },
                    {
                      "name": "insert_rule_set",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId"
                        },
                        {
                          "name": "rules",
                          "type": 562,
                          "typeName": "RuleDescriptorsOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Insert a new rule set for `tank_id` and `rule_set_id`. It can be a new rule set",
                        "or it can replace an existing one. If it is replacing a rule set, a rule that is storing",
                        "data on any accounts cannot be removed. Use [Self::remove_account_rule_data] to remove",
                        "the data first. If a rule is being replaced, it will be mutated with the new parameters,",
                        "and it will maintain any persistent data it already has.",
                        "",
                        "This is only callable by the fuel tank's owner.",
                        "### Errors",
                        "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
                        "- [`Error::NoPermission`] if caller is not the fuel tank owner",
                        "- [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen",
                        "- [`Error::CannotRemoveRuleThatIsStoringAccountData`] if removing a rule that is storing",
                        "  account data",
                        "- [`Error::MaxRuleSetsExceeded`] if max number of rule sets was exceeded",
                        "- [`Error::DuplicateRuleKinds`] if adding a rule set with multiple rules of the same",
                        "  kind"
                      ]
                    },
                    {
                      "name": "remove_rule_set",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove rule set for `tank_id` and `rule_set_id`. A rule that is storing data on",
                        "any accounts cannot be removed. Use [Self::remove_account_rule_data] to remove the",
                        "data first. This is only callable by the fuel tank's owner.",
                        "# Errors",
                        "",
                        "- [`Error::FuelTankNotFound`] if `tank_id` does not exist.",
                        "- [`Error::NoPermission`] if caller is not the fuel tank owner",
                        "- [`Error::RequiresFrozenTankOrRuleset`] if tank or rule set is not frozen",
                        "- [`Error::CannotRemoveRuleThatIsStoringAccountData`] if removing a rule that is storing",
                        "  account data"
                      ]
                    },
                    {
                      "name": "batch_add_account",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_ids",
                          "type": 569,
                          "typeName": "BatchUserAccountsOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Similar to add_account but takes a list of",
                        "[`AccountId`](frame_system::Config::AccountId)s to insert into a fuel tank.",
                        "### Errors",
                        "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
                        "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
                        "- [`Error::AccountAlreadyExists`] if account at `user_id` already exists"
                      ]
                    },
                    {
                      "name": "batch_remove_account",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_ids",
                          "type": 569,
                          "typeName": "BatchUserAccountsOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Similar to remove_account but takes a list of",
                        "[`AccountId`](frame_system::Config::AccountId)s to remove from a fuel tank.",
                        "### Errors",
                        "- [`Error::FuelTankNotFound`] if fuel tank at `tank_id` does not exist",
                        "- [`Error::NoPermission`] if `origin` does not have permission to add an account",
                        "- [`Error::AccountNotFound`] if account at `user_id` does not exist"
                      ]
                    },
                    {
                      "name": "force_set_consumption",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 535,
                          "typeName": "Option<LookupSourceOf<T>>"
                        },
                        {
                          "name": "rule_set_id",
                          "type": 4,
                          "typeName": "T::RuleSetId"
                        },
                        {
                          "name": "consumption",
                          "type": 269,
                          "typeName": "ConsumptionOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Force set the fuel tank consumption",
                        "If `user_id` is [`Some`], it sets the consumption for that account.",
                        "If it is [`None`], it sets the consumption on the fuel tank directly.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::AccountNotFound`] if `user_id` is `Some` and account does not exist",
                        "- [`Error::FuelTankNotFound`] if tank_id does not exist",
                        "- [`Error::NoPermission`] if caller is not ForceOrigin or fuel tank owner",
                        "- [`Error::InvalidRuleSet`] if `rule_set_id` does not exist",
                        "- [`Error::MissingRequiredRule`] if `rule_set_id` does not have the required role"
                      ]
                    },
                    {
                      "name": "destroy_fuel_tank",
                      "fields": [
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Destroy the fuel tank by scheduling the deletion for `on_finalize` to execute",
                        "Only callable by owner",
                        "The fuel tank must be frozen",
                        "Can only be destroyed if all accounts are removed",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::FuelTankNotFound`] if tank_id does not exist",
                        "- [`Error::NoPermission`] if caller is not owner",
                        "- [`Error::DestroyUnfrozenTank`] if tank is not frozen",
                        "- [`Error::DestroyWithExistingAccounts`] if there are still accounts on the tank"
                      ]
                    },
                    {
                      "name": "force_create_fuel_tank",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "descriptor",
                          "type": 541,
                          "typeName": "FuelTankDescriptorOf<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Force creates a fuel tank",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::FuelTankAlreadyExists`] if `tank_id` already exists"
                      ]
                    },
                    {
                      "name": "force_batch_add_account",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "tank_id",
                          "type": 309,
                          "typeName": "LookupSourceOf<T>"
                        },
                        {
                          "name": "user_ids",
                          "type": 569,
                          "typeName": "BatchUserAccountsOf<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Sets the account storage for give tank_id and account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 541,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "FuelTankDescriptor"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 250
                },
                {
                  "name": "RuleSetDescriptors",
                  "type": 542
                },
                {
                  "name": "AccountRuleSetDescriptors",
                  "type": 260
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 250,
                      "typeName": "Name"
                    },
                    {
                      "name": "user_account_management",
                      "type": 256,
                      "typeName": "Option<UserAccountManagement>"
                    },
                    {
                      "name": "rule_sets",
                      "type": 542,
                      "typeName": "RuleSetDescriptors"
                    },
                    {
                      "name": "provides_deposit",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "account_rules",
                      "type": 260,
                      "typeName": "AccountRuleSetDescriptors"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 542,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 543
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 564,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 543,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "RuleSetDescriptor"
              ],
              "params": [
                {
                  "name": "DispatchRuleDescriptor",
                  "type": 544
                },
                {
                  "name": "MaxRules",
                  "type": 561
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 562,
                      "typeName": "BoundedVec<DispatchRuleDescriptor, MaxRules>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 544,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "DispatchRuleDescriptor"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WhitelistedCallers",
                      "fields": [
                        {
                          "type": 262,
                          "typeName": "WhitelistedCallersRuleOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "WhitelistedCollections",
                      "fields": [
                        {
                          "type": 545,
                          "typeName": "WhitelistedCollectionsRuleOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "MaxFuelBurnPerTransaction",
                      "fields": [
                        {
                          "type": 548,
                          "typeName": "MaxFuelBurnPerTransactionRuleOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "UserFuelBudget",
                      "fields": [
                        {
                          "type": 549,
                          "typeName": "UserFuelBudgetRuleDescriptorOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TankFuelBudget",
                      "fields": [
                        {
                          "type": 551,
                          "typeName": "TankFuelBudgetRuleDescriptorOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "RequireToken",
                      "fields": [
                        {
                          "type": 266,
                          "typeName": "RequireTokenRuleOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "PermittedCalls",
                      "fields": [
                        {
                          "type": 552,
                          "typeName": "PermittedCallsRuleOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "PermittedExtrinsics",
                      "fields": [
                        {
                          "type": 558,
                          "typeName": "PermittedExtrinsicsDescriptorOf<T>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 545,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "whitelisted_collections",
                "WhitelistedCollectionsRule"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 6
                },
                {
                  "name": "Max",
                  "type": 546
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 547,
                      "typeName": "BoundedBTreeSet<CollectionId, Max>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 546,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxCollectionIds"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 547,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 85,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 548,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "max_fuel_burn_per_tx",
                "MaxFuelBurnPerTransactionRule"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 549,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "user_fuel_budget",
                "UserFuelBudgetRuleDescriptor"
              ],
              "params": [
                {
                  "name": "Budget",
                  "type": 550
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 550,
                      "typeName": "Budget"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 550,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "Budget"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reset_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 551,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "tank_fuel_budget",
                "TankFuelBudgetRuleDescriptor"
              ],
              "params": [
                {
                  "name": "Budget",
                  "type": 550
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 550,
                      "typeName": "Budget"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 552,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "permitted_calls",
                "PermittedCallsRule"
              ],
              "params": [
                {
                  "name": "EncodedCall",
                  "type": 553
                },
                {
                  "name": "Max",
                  "type": 554
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 555,
                      "typeName": "BoundedBTreeSet<EncodedCall, Max>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 553,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 554,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxCallFilters"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 555,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 553
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 556,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 556,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 553
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 557
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 557,
            "type": {
              "def": {
                "sequence": {
                  "type": 553
                }
              }
            }
          },
          {
            "id": 558,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "permitted_extrinsics",
                "PermittedExtrinsicsDescriptor"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 292
                },
                {
                  "name": "Max",
                  "type": 559
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 560,
                      "typeName": "BoundedVec<Call, Max>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 559,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxPermittedExtrinsicLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 560,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 292
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 414,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 561,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxRulesPerSet"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 562,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 544
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 563,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 563,
            "type": {
              "def": {
                "sequence": {
                  "type": 544
                }
              }
            }
          },
          {
            "id": 564,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 543
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 565
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 565,
            "type": {
              "def": {
                "sequence": {
                  "type": 566
                }
              }
            }
          },
          {
            "id": 566,
            "type": {
              "def": {
                "tuple": [
                  4,
                  543
                ]
              }
            }
          },
          {
            "id": 567,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 568
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 568
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 568,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "DispatchSettings"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "use_none_origin",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "pays_remaining_fee",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 569,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 309
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 373,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 570,
            "type": {
              "path": [
                "pallet_extrinsic_pause",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "pause_extrinsic",
                      "fields": [
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "pause_only_extrinsic",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Pause execution of extrinsic(s)",
                        "",
                        "The values of pallet_name and extrinsic_name are extracted from the `call` parameter.",
                        "Ex : To pause the multi_tokens pallet, the `call` parameter should be of the type",
                        "`pallet_multi_tokens::Call` If `pause_only_extrinsic` is true, then only the extrinsic",
                        "is paused, else the entire pallet is paused.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::CannotProcessInput`] if the pallet name or extrinsic name is faulty.",
                        "- [`Error::CannotPauseSelf`] if the pallet name is the same as the name of this pallet."
                      ]
                    },
                    {
                      "name": "resume_extrinsic",
                      "fields": [
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "resume_only_extrinsic",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Resume execution of extrinsic(s)",
                        "",
                        "The values of pallet_name and extrinsic_name are extracted from the `call` parameter.",
                        "Ex : To resume the multi_tokens pallet, the `call` parameter should be of the type",
                        "`pallet_multi_tokens::Call` If `pause_only_extrinsic` is true, then only the extrinsic",
                        "is resumed, else the entire pallet is resumed.",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::CannotProcessInput`] if the pallet name or extrinsic name is faulty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 571,
            "type": {
              "path": [
                "pallet_marketplace",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_listing",
                      "fields": [
                        {
                          "name": "make_asset_id",
                          "type": 177,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "take_asset_id",
                          "type": 177,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        },
                        {
                          "name": "price",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        },
                        {
                          "name": "salt",
                          "type": 276,
                          "typeName": "Salt<T>"
                        },
                        {
                          "name": "auction_data",
                          "type": 572,
                          "typeName": "Option<AuctionDataOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Places a sell order. Requires `make_asset_id` or `take_asset_id` to be a currency.",
                        "The id for the listing is generated by hashing the encoded bytes of the listing.",
                        "",
                        "# Parameters",
                        "",
                        "- `make_asset_id`: The id of the asset being sold",
                        "- `take_asset_id`: The id of the asset being requested",
                        "- `amount`: The number of units being sold",
                        "- `price`: The requested price for each unit. If it's an auction, this is the minimum",
                        "  bid",
                        "- `salt`: Can be used to differentiate listings",
                        "- `auction_data`: Including this makes the listing an auction",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::InvalidAuctionStart`] if the start is less than the current block +",
                        "  `T::ListingActiveDelay`",
                        "- [`Error::NoCurrency`] Neither the make or take side is considered a currency",
                        "- [`Error::ListingForbidden`] if make or take side tokens are not allowed to be listed",
                        "- [`Error::CurrencyNotAllowedAsRoyalty`] if currency cannot be used as a royalty",
                        "- [`Error::LowBaseCurrencyBalance`] if base currency balance is too low",
                        "- [`Error::LowTokenBalance`] token balance is too low for reserve",
                        "- [`Error::ListingAlreadyExists`] if a listing with the same ID already exists"
                      ]
                    },
                    {
                      "name": "cancel_listing",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancels the listing with `listing_id`. Only callable by the seller.",
                        "",
                        "# Parameters",
                        "",
                        "- `listing_id`: The ID of the listing to cancel",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::ListingNotFound`] if the listing under `listing_id` does not exist",
                        "- [`Error::NoPermission`] if the listing seller is not the caller, `origin`"
                      ]
                    },
                    {
                      "name": "fill_listing",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Fills a fixed price listing. This will execute immediately.",
                        "# Parameters",
                        "",
                        "- `listing_id`: The id for the listing to buy from",
                        "- `amount`: The number of units purchased",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::ListingNotFound`] if the listing under `listing_id` does not exist",
                        "- [`Error::BuyerIsSeller`] if the buyer is the seller of the listing",
                        "- [`Error::ListingIsWrongType`] if the listing is not under auction",
                        "- [`Error::InvalidAmount`] if the amount that still needs to be filled is greater than",
                        "  `amount`",
                        "- [`Error::ListingNotActive`] if the listing has not passed the `ListingActiveDelay` yet",
                        "- [`Error::TakeValueUnderMinimum`] if the listings `take` value is under the minimum",
                        "  required",
                        "- [`Error::LowTokenBalance`] if the buyer does not have enough tokens for reserve"
                      ]
                    },
                    {
                      "name": "place_bid",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>"
                        },
                        {
                          "name": "price",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Places a bid on a listing. The listing must be an auction, and it must be currently",
                        "active.",
                        "",
                        "# Parameters",
                        "",
                        "- `listing_id`: The id for the listing to buy from",
                        "- `price`: The price for a single unit",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::ListingNotFound`] if listing under `listing_id` does not exist",
                        "- [`Error::BuyerIsSeller`] if the bidder is the seller of the listing",
                        "- [`Error::InactiveAuction`] if listing operates outside of specified start and end",
                        "  block",
                        "- [`Error::InvalidPrice`] if price is less than minimum_price for a bid"
                      ]
                    },
                    {
                      "name": "finalize_auction",
                      "fields": [
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Finalize the auction with id: `listing_id`. This will end the auction and transfer",
                        "funds. It fails if the auction is not over.",
                        "",
                        "# Parameters",
                        "",
                        "- `listing_id`: The ID for the listing to finalize",
                        "",
                        "# Errors",
                        "",
                        "- [`Error::ListingNotFound`] if listing under `listing_id` does not exist",
                        "- [`Error::ListingIsWrongType`] if listing is not an auction",
                        "- [`Error::AuctionNotOver`] if the auction has not finished yet",
                        "- [`Error::TakeValueUnderMinimum`] if the take value is less than the minimum required"
                      ]
                    },
                    {
                      "name": "set_protocol_fee",
                      "fields": [
                        {
                          "name": "protocol_fee",
                          "type": 42,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Change the protocol fee to `protocol_fee`. Fails if `origin` is invalid.",
                        "",
                        "#Parameters",
                        "",
                        "- `protocol_fee`: Percentage of fee to set"
                      ]
                    },
                    {
                      "name": "force_create_listing",
                      "fields": [
                        {
                          "name": "seller",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "make_asset_id",
                          "type": 177,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "take_asset_id",
                          "type": 177,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        },
                        {
                          "name": "price",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        },
                        {
                          "name": "salt",
                          "type": 276,
                          "typeName": "Salt<T>"
                        },
                        {
                          "name": "auction_data",
                          "type": 572,
                          "typeName": "Option<AuctionDataOf<T>>"
                        },
                        {
                          "name": "deposit_backer",
                          "type": 535,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Force create a listing. This is only callable by the [`Config::ForceOrigin`].",
                        "",
                        "# Parameters",
                        "",
                        "Mostly the same as [`Self::create_listing`], but `deposit_backer` can be included to pay",
                        "a deposit if `seller` does not have enough.",
                        "",
                        "# Errors",
                        "",
                        "Same as [`Self::create_listing`], except `BadOrigin` if the origin is not",
                        "[`Config::ForceOrigin`]"
                      ]
                    },
                    {
                      "name": "force_place_bid",
                      "fields": [
                        {
                          "name": "bidder",
                          "type": 309,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "listing_id",
                          "type": 12,
                          "typeName": "ListingIdOf<T>"
                        },
                        {
                          "name": "price",
                          "type": 63,
                          "typeName": "TokenBalanceOf<T>"
                        },
                        {
                          "name": "funds_backer",
                          "type": 535,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Same as [create_listing](Self::place_bid), but allows specifying the `bidder` and can",
                        "place a bid in an inactive auction. Only callable by [`Config::ForceOrigin`]. If",
                        "`funds_backer` is `Some`, it will transfer balance if `bidder` does not have enough."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 572,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 279
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 279
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 573,
            "type": {
              "path": [
                "pallet_beefy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 574,
                          "typeName": "Box<EquivocationProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 574,
                          "typeName": "Box<EquivocationProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 574,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Id",
                  "type": 575
                },
                {
                  "name": "Signature",
                  "type": 576
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "first",
                      "type": 577,
                      "typeName": "VoteMessage<Number, Id, Signature>"
                    },
                    {
                      "name": "second",
                      "type": 577,
                      "typeName": "VoteMessage<Number, Id, Signature>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 575,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "crypto",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 476,
                      "typeName": "ecdsa::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 576,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "crypto",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 480,
                      "typeName": "ecdsa::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 577,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "VoteMessage"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Id",
                  "type": 575
                },
                {
                  "name": "Signature",
                  "type": 576
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "commitment",
                      "type": 578,
                      "typeName": "Commitment<Number>"
                    },
                    {
                      "name": "id",
                      "type": 575,
                      "typeName": "Id"
                    },
                    {
                      "name": "signature",
                      "type": 576,
                      "typeName": "Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 578,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "commitment",
                "Commitment"
              ],
              "params": [
                {
                  "name": "TBlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "payload",
                      "type": 579,
                      "typeName": "Payload"
                    },
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "TBlockNumber"
                    },
                    {
                      "name": "validator_set_id",
                      "type": 11,
                      "typeName": "ValidatorSetId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 579,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "payload",
                "Payload"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 580,
                      "typeName": "Vec<(BeefyPayloadId, Vec<u8>)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 580,
            "type": {
              "def": {
                "sequence": {
                  "type": 581
                }
              }
            }
          },
          {
            "id": 581,
            "type": {
              "def": {
                "tuple": [
                  582,
                  13
                ]
              }
            }
          },
          {
            "id": 582,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 583,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 584,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 584,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 584,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay."
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 584,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 584,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 285
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 285
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 585,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage.",
                        "",
                        "If `len` is provided, then it will be a much cheaper operation.",
                        "",
                        "- `hash`: The hash of the preimage to be removed from the store.",
                        "- `len`: The length of the preimage of `hash`."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 586,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "poll_index",
                          "type": 119,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "vote",
                          "type": 587,
                          "typeName": "AccountVote<BalanceOf<T, I>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `poll_index`: The index of the poll to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter has voted on."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "class",
                          "type": 290,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "to",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "conviction",
                          "type": 589,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account for a",
                        "particular class of polls.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                        "  to this function are required.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                        "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [
                        {
                          "name": "class",
                          "type": 290,
                          "typeName": "ClassOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Undelegate the voting power of the sending account for a particular class of polls.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued has passed.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "- `class`: The class of polls to remove the delegation from.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                        "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "class",
                          "type": 290,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "target",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove the lock caused by prior voting/delegating which has expired within a particular",
                        "class.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `class`: The class of polls to unlock.",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "class",
                          "type": 590,
                          "typeName": "Option<ClassOf<T, I>>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a vote for a poll.",
                        "",
                        "If:",
                        "- the poll was cancelled, or",
                        "- the poll is ongoing, or",
                        "- the poll has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the poll has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for poll `index`.",
                        "",
                        "- `index`: The index of poll of the vote to be removed.",
                        "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                        "  which have finished or are cancelled, this must be `Some`.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "class",
                          "type": 290,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove a vote for a poll.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the poll was cancelled, because the voter lost the poll or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for poll",
                        "  `index`.",
                        "- `index`: The index of poll of the vote to be removed.",
                        "- `class`: The class of the poll.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 587,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 588,
                          "typeName": "Vote"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "SplitAbstain",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "abstain",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 588,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Vote"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 589,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "conviction",
                "Conviction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Locked1x",
                      "index": 1
                    },
                    {
                      "name": "Locked2x",
                      "index": 2
                    },
                    {
                      "name": "Locked3x",
                      "index": 3
                    },
                    {
                      "name": "Locked4x",
                      "index": 4
                    },
                    {
                      "name": "Locked5x",
                      "index": 5
                    },
                    {
                      "name": "Locked6x",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 590,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 290
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 290
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 591,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "proposal_origin",
                          "type": 415,
                          "typeName": "Box<PalletsOriginOf<T>>"
                        },
                        {
                          "name": "proposal",
                          "type": 291,
                          "typeName": "BoundedCallOf<T, I>"
                        },
                        {
                          "name": "enactment_moment",
                          "type": 592,
                          "typeName": "DispatchTime<T::BlockNumber>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a referendum on a privileged action.",
                        "",
                        "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                        "  available.",
                        "- `proposal_origin`: The origin from which the proposal should be executed.",
                        "- `proposal`: The proposal.",
                        "- `enactment_moment`: The moment that the proposal should be enacted.",
                        "",
                        "Emits `Submitted`."
                      ]
                    },
                    {
                      "name": "place_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Post the Decision Deposit for a referendum.",
                        "",
                        "- `origin`: must be `Signed` and the account must have funds available for the",
                        "  referendum's track's Decision Deposit.",
                        "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                        "  posted.",
                        "",
                        "Emits `DecisionDepositPlaced`."
                      ]
                    },
                    {
                      "name": "refund_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Refund the Decision Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `DecisionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel an ongoing referendum.",
                        "",
                        "- `origin`: must be the `CancelOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Cancelled`."
                      ]
                    },
                    {
                      "name": "kill",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel an ongoing referendum and slash the deposits.",
                        "",
                        "- `origin`: must be the `KillOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Killed` and `DepositSlashed`."
                      ]
                    },
                    {
                      "name": "nudge_referendum",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Advance a referendum onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `index`: the referendum to be advanced."
                      ]
                    },
                    {
                      "name": "one_fewer_deciding",
                      "fields": [
                        {
                          "name": "track",
                          "type": 290,
                          "typeName": "TrackIdOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Advance a track onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `track`: the track to be advanced.",
                        "",
                        "Action item for when there is now one fewer referendum in the deciding phase and the",
                        "`DecidingCount` is not yet updated. This means that we should either:",
                        "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                        "- decrement `DecidingCount`."
                      ]
                    },
                    {
                      "name": "refund_submission_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Refund the Submission Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `SubmissionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "maybe_hash",
                          "type": 593,
                          "typeName": "Option<PreimageHash>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set or clear metadata of a referendum.",
                        "",
                        "Parameters:",
                        "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                        "  metadata of a finished referendum.",
                        "- `index`:  The index of a referendum to set or clear metadata for.",
                        "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 592,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "DispatchTime"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "At",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "After",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 593,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 12
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 594,
            "type": {
              "path": [
                "pallet_whitelist",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "whitelist_call",
                      "fields": [
                        {
                          "name": "call_hash",
                          "type": 12,
                          "typeName": "PreimageHash"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "remove_whitelisted_call",
                      "fields": [
                        {
                          "name": "call_hash",
                          "type": 12,
                          "typeName": "PreimageHash"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "dispatch_whitelisted_call",
                      "fields": [
                        {
                          "name": "call_hash",
                          "type": 12,
                          "typeName": "PreimageHash"
                        },
                        {
                          "name": "call_encoded_len",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "call_weight_witness",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "dispatch_whitelisted_call_with_preimage",
                      "fields": [
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 595,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Introduce a new member.",
                        "",
                        "- `origin`: Must be the `AdminOrigin`.",
                        "- `who`: Account of non-member which will become a member.",
                        "- `rank`: The rank to give the new member.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "promote_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Increment the rank of an existing member by one.",
                        "",
                        "- `origin`: Must be the `AdminOrigin`.",
                        "- `who`: Account of existing member.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "demote_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Decrement the rank of an existing member by one. If the member is already at rank zero,",
                        "then they are removed entirely.",
                        "",
                        "- `origin`: Must be the `AdminOrigin`.",
                        "- `who`: Account of existing member of rank greater than zero.",
                        "",
                        "Weight: `O(1)`, less if the member's index is highest in its rank."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_rank",
                          "type": 290,
                          "typeName": "Rank"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove the member entirely.",
                        "",
                        "- `origin`: Must be the `AdminOrigin`.",
                        "- `who`: Account of existing member of rank greater than zero.",
                        "- `min_rank`: The rank of the member or greater.",
                        "",
                        "Weight: `O(min_rank)`."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "poll",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "aye",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "- `origin`: Must be `Signed` by a member account.",
                        "- `poll`: Index of a poll which is ongoing.",
                        "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
                        "",
                        "Transaction fees are be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "",
                        "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
                      ]
                    },
                    {
                      "name": "cleanup_poll",
                      "fields": [
                        {
                          "name": "poll_index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove votes from the given poll. It must have ended.",
                        "",
                        "- `origin`: Must be `Signed` by any account.",
                        "- `poll_index`: Index of a poll which is completed and for which votes continue to",
                        "  exist.",
                        "- `max`: Maximum number of vote items from remove in this call.",
                        "",
                        "Transaction fees are waived if the operation is successful.",
                        "",
                        "Weight `O(max)` (less if there are fewer items to remove than `max`)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 596,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "proposal_origin",
                          "type": 415,
                          "typeName": "Box<PalletsOriginOf<T>>"
                        },
                        {
                          "name": "proposal",
                          "type": 291,
                          "typeName": "BoundedCallOf<T, I>"
                        },
                        {
                          "name": "enactment_moment",
                          "type": 592,
                          "typeName": "DispatchTime<T::BlockNumber>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a referendum on a privileged action.",
                        "",
                        "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                        "  available.",
                        "- `proposal_origin`: The origin from which the proposal should be executed.",
                        "- `proposal`: The proposal.",
                        "- `enactment_moment`: The moment that the proposal should be enacted.",
                        "",
                        "Emits `Submitted`."
                      ]
                    },
                    {
                      "name": "place_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Post the Decision Deposit for a referendum.",
                        "",
                        "- `origin`: must be `Signed` and the account must have funds available for the",
                        "  referendum's track's Decision Deposit.",
                        "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                        "  posted.",
                        "",
                        "Emits `DecisionDepositPlaced`."
                      ]
                    },
                    {
                      "name": "refund_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Refund the Decision Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `DecisionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel an ongoing referendum.",
                        "",
                        "- `origin`: must be the `CancelOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Cancelled`."
                      ]
                    },
                    {
                      "name": "kill",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel an ongoing referendum and slash the deposits.",
                        "",
                        "- `origin`: must be the `KillOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Killed` and `DepositSlashed`."
                      ]
                    },
                    {
                      "name": "nudge_referendum",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Advance a referendum onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `index`: the referendum to be advanced."
                      ]
                    },
                    {
                      "name": "one_fewer_deciding",
                      "fields": [
                        {
                          "name": "track",
                          "type": 290,
                          "typeName": "TrackIdOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Advance a track onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `track`: the track to be advanced.",
                        "",
                        "Action item for when there is now one fewer referendum in the deciding phase and the",
                        "`DecidingCount` is not yet updated. This means that we should either:",
                        "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                        "- decrement `DecidingCount`."
                      ]
                    },
                    {
                      "name": "refund_submission_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Refund the Submission Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `SubmissionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "maybe_hash",
                          "type": 593,
                          "typeName": "Option<PreimageHash>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set or clear metadata of a referendum.",
                        "",
                        "Parameters:",
                        "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                        "  metadata of a finished referendum.",
                        "- `index`:  The index of a referendum to set or clear metadata for.",
                        "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 597,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "## Complexity",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 598,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "## Complexity",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 631,
                          "typeName": "Vec<(T::AccountId, Data)>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "## Complexity",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded)."
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "## Complexity",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 119,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "max_fee",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "## Complexity",
                        "- `O(R + X)`.",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "## Complexity",
                        "- `O(R + X)`.",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 119,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fee",
                          "type": 63,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "## Complexity",
                        "- `O(R)`.",
                        "  - where `R` registrar-count (governance-bounded)."
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 119,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "new",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "## Complexity",
                        "- `O(R)`.",
                        "  - where `R` registrar-count (governance-bounded)."
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 119,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fields",
                          "type": 633,
                          "typeName": "IdentityFields"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "## Complexity",
                        "- `O(R)`.",
                        "  - where `R` registrar-count (governance-bounded)."
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 119,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "target",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "judgement",
                          "type": 635,
                          "typeName": "Judgement<BalanceOf<T>>"
                        },
                        {
                          "name": "identity",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "## Complexity",
                        "- `O(R + X)`.",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "## Complexity",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "data",
                          "type": 601,
                          "typeName": "Data"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "data",
                          "type": 601,
                          "typeName": "Data"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 598,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 599,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>"
                    },
                    {
                      "name": "display",
                      "type": 601,
                      "typeName": "Data"
                    },
                    {
                      "name": "legal",
                      "type": 601,
                      "typeName": "Data"
                    },
                    {
                      "name": "web",
                      "type": 601,
                      "typeName": "Data"
                    },
                    {
                      "name": "riot",
                      "type": 601,
                      "typeName": "Data"
                    },
                    {
                      "name": "email",
                      "type": 601,
                      "typeName": "Data"
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 630,
                      "typeName": "Option<[u8; 20]>"
                    },
                    {
                      "name": "image",
                      "type": 601,
                      "typeName": "Data"
                    },
                    {
                      "name": "twitter",
                      "type": 601,
                      "typeName": "Data"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 599,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 600
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 629,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 600,
            "type": {
              "def": {
                "tuple": [
                  601,
                  601
                ]
              }
            }
          },
          {
            "id": 601,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "type": 602
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "type": 603
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "type": 582
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "type": 604
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "type": 17
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "type": 605
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "type": 606
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "type": 607
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "type": 134
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "type": 608
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "type": 609
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "type": 610
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "type": 611
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "type": 612
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "type": 613
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "type": 614
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "type": 33
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "type": 615
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "type": 616
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "type": 617
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "type": 122
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "type": 618
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "type": 619
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "type": 620
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "type": 621
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "type": 622
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "type": 623
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "type": 624
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "type": 625
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "type": 626
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "type": 627
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "type": 628
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 37
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 602,
            "type": {
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 603,
            "type": {
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 604,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 605,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 606,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 607,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 608,
            "type": {
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 609,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 610,
            "type": {
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 611,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 612,
            "type": {
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 613,
            "type": {
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 614,
            "type": {
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 615,
            "type": {
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 616,
            "type": {
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 617,
            "type": {
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 618,
            "type": {
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 619,
            "type": {
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 620,
            "type": {
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 621,
            "type": {
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 622,
            "type": {
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 623,
            "type": {
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 624,
            "type": {
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 625,
            "type": {
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 626,
            "type": {
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 627,
            "type": {
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 628,
            "type": {
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 629,
            "type": {
              "def": {
                "sequence": {
                  "type": 600
                }
              }
            }
          },
          {
            "id": 630,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 122
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 122
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 631,
            "type": {
              "def": {
                "sequence": {
                  "type": 632
                }
              }
            }
          },
          {
            "id": 632,
            "type": {
              "def": {
                "tuple": [
                  0,
                  601
                ]
              }
            }
          },
          {
            "id": 633,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 634
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "IdentityField"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 634,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "index": 1
                    },
                    {
                      "name": "Legal",
                      "index": 2
                    },
                    {
                      "name": "Web",
                      "index": 4
                    },
                    {
                      "name": "Riot",
                      "index": 8
                    },
                    {
                      "name": "Email",
                      "index": 16
                    },
                    {
                      "name": "PgpFingerprint",
                      "index": 32
                    },
                    {
                      "name": "Image",
                      "index": 64
                    },
                    {
                      "name": "Twitter",
                      "index": 128
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 635,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reasonable",
                      "index": 2
                    },
                    {
                      "name": "KnownGood",
                      "index": 3
                    },
                    {
                      "name": "OutOfDate",
                      "index": 4
                    },
                    {
                      "name": "LowQuality",
                      "index": 5
                    },
                    {
                      "name": "Erroneous",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 636,
            "type": {
              "path": [
                "pallet_vote_manager",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "poll_index",
                          "type": 119,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "vote",
                          "type": 587,
                          "typeName": "AccountVote<BalanceOf<T, I>>"
                        },
                        {
                          "name": "currency",
                          "type": 637,
                          "typeName": "VoteCurrency<TokenIdOf<T, I>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `poll_index`: The index of the poll to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter has voted on."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "class",
                          "type": 590,
                          "typeName": "Option<ClassOf<T, I>>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a vote for a poll.",
                        "",
                        "If:",
                        "- the poll was cancelled, or",
                        "- the poll is ongoing, or",
                        "- the poll has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the poll has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for poll `index`.",
                        "",
                        "- `index`: The index of poll of the vote to be removed.",
                        "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                        "  which have finished or are cancelled, this must be `Some`.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "class",
                          "type": 290,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove a vote for a poll.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the poll was cancelled, because the voter lost the poll or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for poll",
                        "  `index`.",
                        "- `index`: The index of poll of the vote to be removed.",
                        "- `class`: The class of the poll.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "class",
                          "type": 290,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "target",
                          "type": 309,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove the lock caused by prior voting/delegating which has expired within a particular",
                        "class.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `class`: The class of polls to unlock.",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 637,
            "type": {
              "path": [
                "pallet_vote_manager",
                "types",
                "VoteCurrency"
              ],
              "params": [
                {
                  "name": "TokenId",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Enj",
                      "index": 0
                    },
                    {
                      "name": "SEnj",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "TokenId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 638,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 639,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Votes",
                  "type": 6
                },
                {
                  "name": "Total",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Votes"
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Votes"
                    },
                    {
                      "name": "support",
                      "type": 6,
                      "typeName": "Votes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 640,
            "type": {
              "path": [
                "pallet_whitelist",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CallWhitelisted",
                      "fields": [
                        {
                          "name": "call_hash",
                          "type": 12,
                          "typeName": "PreimageHash"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "WhitelistedCallRemoved",
                      "fields": [
                        {
                          "name": "call_hash",
                          "type": 12,
                          "typeName": "PreimageHash"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WhitelistedCallDispatched",
                      "fields": [
                        {
                          "name": "call_hash",
                          "type": 12,
                          "typeName": "PreimageHash"
                        },
                        {
                          "name": "result",
                          "type": 641,
                          "typeName": "DispatchResultWithPostInfo"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 641,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 642
                },
                {
                  "name": "E",
                  "type": 644
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 642
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 644
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 642,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PostDispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "actual_weight",
                      "type": 643,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 643,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 644,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchErrorWithPostInfo"
              ],
              "params": [
                {
                  "name": "Info",
                  "type": 642
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "post_info",
                      "type": 642,
                      "typeName": "Info"
                    },
                    {
                      "name": "error",
                      "type": 25,
                      "typeName": "DispatchError"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 645,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A member `who` has been added."
                      ]
                    },
                    {
                      "name": "RankChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rank",
                          "type": 290,
                          "typeName": "Rank"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The member `who`se rank has been changed to the given `rank`."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rank",
                          "type": 290,
                          "typeName": "Rank"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The member `who` of given `rank` has been removed from the collective."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "poll",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "vote",
                          "type": 646,
                          "typeName": "VoteRecord"
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "TallyOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
                        "`tally`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 646,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "VoteRecord"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Aye",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Votes"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Nay",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Votes"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 647,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "Tally"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                },
                {
                  "name": "M",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bare_ayes",
                      "type": 4,
                      "typeName": "MemberIndex"
                    },
                    {
                      "name": "ayes",
                      "type": 4,
                      "typeName": "Votes"
                    },
                    {
                      "name": "nays",
                      "type": 4,
                      "typeName": "Votes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 648,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Submitted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 290,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 291,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A referendum has been submitted."
                      ]
                    },
                    {
                      "name": "DecisionDepositPlaced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The decision deposit has been placed."
                      ]
                    },
                    {
                      "name": "DecisionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The decision deposit has been refunded."
                      ]
                    },
                    {
                      "name": "DepositSlashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A deposit has been slashaed."
                      ]
                    },
                    {
                      "name": "DecisionStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 290,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 291,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "T::Tally",
                          "docs": [
                            "The current tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A referendum has moved into the deciding phase."
                      ]
                    },
                    {
                      "name": "ConfirmStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ConfirmAborted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Confirmed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A referendum has ended its confirmation phase and is ready for approval."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A referendum has been approved and its proposal has been scheduled."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A referendum has been timed out without being decided."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 647,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A referendum has been killed."
                      ]
                    },
                    {
                      "name": "SubmissionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The submission deposit has been refunded."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "PreimageHash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Metadata for a referendum has been set."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "PreimageHash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Metadata for a referendum has been cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 649,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 650,
            "type": {
              "path": [
                "pallet_vote_manager",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "poll_index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "vote",
                          "type": 587,
                          "typeName": "AccountVote<BalanceOf<T, I>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account has voted in a referendum"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 651,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 652,
            "type": {
              "def": {
                "sequence": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 653,
            "type": {
              "def": {
                "sequence": {
                  "type": 285
                }
              }
            }
          },
          {
            "id": 654,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 119,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 655,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 655,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 656,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 657,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 657,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 658
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 658,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 658,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 658,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 658,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 643,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 643,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 643,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 659,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 660,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 660,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 661,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 662,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 655,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 655,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 663,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 663,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 664
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 664
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 664,
            "type": {
              "def": {
                "sequence": {
                  "type": 665
                }
              }
            }
          },
          {
            "id": 665,
            "type": {
              "def": {
                "tuple": [
                  134,
                  4
                ]
              }
            }
          },
          {
            "id": 666,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 667,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 652,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 668,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 669
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 670,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 669,
            "type": {
              "def": {
                "tuple": [
                  302,
                  11
                ]
              }
            }
          },
          {
            "id": 670,
            "type": {
              "def": {
                "sequence": {
                  "type": 669
                }
              }
            }
          },
          {
            "id": 671,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 672,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 672,
            "type": {
              "def": {
                "sequence": {
                  "type": 1
                }
              }
            }
          },
          {
            "id": 673,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 674
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 674
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 674,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "PreDigest"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Primary",
                      "fields": [
                        {
                          "type": 675,
                          "typeName": "PrimaryPreDigest"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "SecondaryPlain",
                      "fields": [
                        {
                          "type": 677,
                          "typeName": "SecondaryPlainPreDigest"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "SecondaryVRF",
                      "fields": [
                        {
                          "type": 678,
                          "typeName": "SecondaryVRFPreDigest"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 675,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "PrimaryPreDigest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "super::AuthorityIndex"
                    },
                    {
                      "name": "slot",
                      "type": 303,
                      "typeName": "Slot"
                    },
                    {
                      "name": "vrf_signature",
                      "type": 676,
                      "typeName": "VrfSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 676,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "vrf",
                "VrfSignature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "output",
                      "type": 1,
                      "typeName": "VrfOutput"
                    },
                    {
                      "name": "proof",
                      "type": 97,
                      "typeName": "VrfProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 677,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "SecondaryPlainPreDigest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "super::AuthorityIndex"
                    },
                    {
                      "name": "slot",
                      "type": 303,
                      "typeName": "Slot"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 678,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "SecondaryVRFPreDigest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "super::AuthorityIndex"
                    },
                    {
                      "name": "slot",
                      "type": 303,
                      "typeName": "Slot"
                    },
                    {
                      "name": "vrf_signature",
                      "type": 676,
                      "typeName": "VrfSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 679,
            "type": {
              "path": [
                "sp_consensus_babe",
                "BabeEpochConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "c",
                      "type": 306,
                      "typeName": "(u64, u64)"
                    },
                    {
                      "name": "allowed_slots",
                      "type": 307,
                      "typeName": "AllowedSlots"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 680,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 681
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 682,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 681,
            "type": {
              "def": {
                "tuple": [
                  11,
                  4
                ]
              }
            }
          },
          {
            "id": 682,
            "type": {
              "def": {
                "sequence": {
                  "type": 681
                }
              }
            }
          },
          {
            "id": 683,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 0,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 1,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 2,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    },
                    {
                      "name": "InvalidConfiguration",
                      "index": 3,
                      "docs": [
                        "Submitted configuration is invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 684,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 685
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 687,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 685,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 134,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 686,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 686,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 687,
            "type": {
              "def": {
                "sequence": {
                  "type": 685
                }
              }
            }
          },
          {
            "id": 688,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 689
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 690,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 689,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 134
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 134,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 690,
            "type": {
              "def": {
                "sequence": {
                  "type": 689
                }
              }
            }
          },
          {
            "id": 691,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 692
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 693,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 692,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 56
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 56,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 693,
            "type": {
              "def": {
                "sequence": {
                  "type": 692
                }
              }
            }
          },
          {
            "id": 694,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `MaxHolds`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 695,
            "type": {
              "path": [
                "sp_staking",
                "offence",
                "OffenceDetails"
              ],
              "params": [
                {
                  "name": "Reporter",
                  "type": 0
                },
                {
                  "name": "Offender",
                  "type": 61
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 61,
                      "typeName": "Offender"
                    },
                    {
                      "name": "reporters",
                      "type": 78,
                      "typeName": "Vec<Reporter>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 696,
            "type": {
              "def": {
                "tuple": [
                  33,
                  13
                ]
              }
            }
          },
          {
            "id": 697,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ReadySolution"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": null
                },
                {
                  "name": "MaxWinners",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "supports",
                      "type": 698,
                      "typeName": "BoundedSupports<AccountId, MaxWinners>"
                    },
                    {
                      "name": "score",
                      "type": 38,
                      "typeName": "ElectionScore"
                    },
                    {
                      "name": "compute",
                      "type": 35,
                      "typeName": "ElectionCompute"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 698,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 367
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 366,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 699,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RoundSnapshot"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DataProvider",
                  "type": 700
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 702,
                      "typeName": "Vec<DataProvider>"
                    },
                    {
                      "name": "targets",
                      "type": 78,
                      "typeName": "Vec<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 700,
            "type": {
              "def": {
                "tuple": [
                  0,
                  11,
                  701
                ]
              }
            }
          },
          {
            "id": 701,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 78,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 702,
            "type": {
              "def": {
                "sequence": {
                  "type": 700
                }
              }
            }
          },
          {
            "id": 703,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 704
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 705,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 704,
            "type": {
              "def": {
                "tuple": [
                  38,
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 705,
            "type": {
              "def": {
                "sequence": {
                  "type": 704
                }
              }
            }
          },
          {
            "id": 706,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "signed",
                "SignedSubmission"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Solution",
                  "type": 313
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "raw_solution",
                      "type": 312,
                      "typeName": "RawSolution<Solution>"
                    },
                    {
                      "name": "call_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 707,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreDispatchEarlySubmission",
                      "index": 0,
                      "docs": [
                        "Submission was too early."
                      ]
                    },
                    {
                      "name": "PreDispatchWrongWinnerCount",
                      "index": 1,
                      "docs": [
                        "Wrong number of winners presented."
                      ]
                    },
                    {
                      "name": "PreDispatchWeakSubmission",
                      "index": 2,
                      "docs": [
                        "Submission was too weak, score-wise."
                      ]
                    },
                    {
                      "name": "SignedQueueFull",
                      "index": 3,
                      "docs": [
                        "The queue was full, and the solution was not better than any of the existing ones."
                      ]
                    },
                    {
                      "name": "SignedCannotPayDeposit",
                      "index": 4,
                      "docs": [
                        "The origin failed to pay the deposit."
                      ]
                    },
                    {
                      "name": "SignedInvalidWitness",
                      "index": 5,
                      "docs": [
                        "Witness data to dispatchable is invalid."
                      ]
                    },
                    {
                      "name": "SignedTooMuchWeight",
                      "index": 6,
                      "docs": [
                        "The signed submission consumes too much weight"
                      ]
                    },
                    {
                      "name": "OcwCallWrongEra",
                      "index": 7,
                      "docs": [
                        "OCW submitted solution for wrong round"
                      ]
                    },
                    {
                      "name": "MissingSnapshotMetadata",
                      "index": 8,
                      "docs": [
                        "Snapshot metadata should exist but didn't."
                      ]
                    },
                    {
                      "name": "InvalidSubmissionIndex",
                      "index": 9,
                      "docs": [
                        "`Self::insert_submission` returned an invalid index."
                      ]
                    },
                    {
                      "name": "CallNotAllowed",
                      "index": 10,
                      "docs": [
                        "The call is not allowed at this point."
                      ]
                    },
                    {
                      "name": "FallbackFailed",
                      "index": 11,
                      "docs": [
                        "The fallback failed"
                      ]
                    },
                    {
                      "name": "BoundNotMet",
                      "index": 12,
                      "docs": [
                        "Some bound not met"
                      ]
                    },
                    {
                      "name": "TooManyWinners",
                      "index": 13,
                      "docs": [
                        "Submitted solution has too many winners"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error of the pallet that can be returned in response to dispatches."
              ]
            }
          },
          {
            "id": 708,
            "type": {
              "path": [
                "pallet_staking",
                "StakingLedger"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "total",
                      "type": 63,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "active",
                      "type": 63,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "unlocking",
                      "type": 709,
                      "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>"
                    },
                    {
                      "name": "claimed_rewards",
                      "type": 712,
                      "typeName": "BoundedVec<EraIndex, T::HistoryDepth>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 709,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 710
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 711,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 710,
            "type": {
              "path": [
                "pallet_staking",
                "UnlockChunk"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "era",
                      "type": 119,
                      "typeName": "EraIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 711,
            "type": {
              "def": {
                "sequence": {
                  "type": 710
                }
              }
            }
          },
          {
            "id": 712,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 375,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 713,
            "type": {
              "path": [
                "pallet_staking",
                "Nominations"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "targets",
                      "type": 701,
                      "typeName": "BoundedVec<T::AccountId, T::MaxNominations>"
                    },
                    {
                      "name": "submitted_in",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "suppressed",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 714,
            "type": {
              "path": [
                "pallet_staking",
                "ActiveEraInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "start",
                      "type": 208,
                      "typeName": "Option<u64>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 715,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0
                ]
              }
            }
          },
          {
            "id": 716,
            "type": {
              "path": [
                "pallet_staking",
                "EraRewardPoints"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 4,
                      "typeName": "RewardPoint"
                    },
                    {
                      "name": "individual",
                      "type": 717,
                      "typeName": "BTreeMap<AccountId, RewardPoint>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 717,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 718
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 718,
            "type": {
              "def": {
                "sequence": {
                  "type": 719
                }
              }
            }
          },
          {
            "id": 719,
            "type": {
              "def": {
                "tuple": [
                  0,
                  4
                ]
              }
            }
          },
          {
            "id": 720,
            "type": {
              "def": {
                "sequence": {
                  "type": 721
                }
              }
            }
          },
          {
            "id": 721,
            "type": {
              "path": [
                "pallet_staking",
                "UnappliedSlash"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validator",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "own",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "others",
                      "type": 369,
                      "typeName": "Vec<(AccountId, Balance)>"
                    },
                    {
                      "name": "reporters",
                      "type": 78,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "payout",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 722,
            "type": {
              "def": {
                "tuple": [
                  42,
                  6
                ]
              }
            }
          },
          {
            "id": 723,
            "type": {
              "path": [
                "pallet_staking",
                "slashing",
                "SlashingSpans"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "span_index",
                      "type": 4,
                      "typeName": "SpanIndex"
                    },
                    {
                      "name": "last_start",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "last_nonzero_slash",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "prior",
                      "type": 375,
                      "typeName": "Vec<EraIndex>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 724,
            "type": {
              "path": [
                "pallet_staking",
                "slashing",
                "SpanRecord"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "slashed",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "paid_out",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 725,
            "type": {
              "def": {
                "sequence": {
                  "type": 726
                }
              }
            }
          },
          {
            "id": 726,
            "type": {
              "def": {
                "tuple": [
                  4,
                  37
                ]
              }
            }
          },
          {
            "id": 727,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotController",
                      "index": 0,
                      "docs": [
                        "Not a controller account."
                      ]
                    },
                    {
                      "name": "NotStash",
                      "index": 1,
                      "docs": [
                        "Not a stash account."
                      ]
                    },
                    {
                      "name": "AlreadyBonded",
                      "index": 2,
                      "docs": [
                        "Stash is already bonded."
                      ]
                    },
                    {
                      "name": "AlreadyPaired",
                      "index": 3,
                      "docs": [
                        "Controller is already paired."
                      ]
                    },
                    {
                      "name": "EmptyTargets",
                      "index": 4,
                      "docs": [
                        "Targets cannot be empty."
                      ]
                    },
                    {
                      "name": "DuplicateIndex",
                      "index": 5,
                      "docs": [
                        "Duplicate index."
                      ]
                    },
                    {
                      "name": "InvalidSlashIndex",
                      "index": 6,
                      "docs": [
                        "Slash record index out of bounds."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "index": 7,
                      "docs": [
                        "Cannot have a validator or nominator role, with value less than the minimum defined by",
                        "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                        "intention, `chill` first to remove one's role as validator/nominator."
                      ]
                    },
                    {
                      "name": "NoMoreChunks",
                      "index": 8,
                      "docs": [
                        "Can not schedule more unlock chunks."
                      ]
                    },
                    {
                      "name": "NoUnlockChunk",
                      "index": 9,
                      "docs": [
                        "Can not rebond without unlocking chunks."
                      ]
                    },
                    {
                      "name": "FundedTarget",
                      "index": 10,
                      "docs": [
                        "Attempting to target a stash that still has funds."
                      ]
                    },
                    {
                      "name": "InvalidEraToReward",
                      "index": 11,
                      "docs": [
                        "Invalid era to reward."
                      ]
                    },
                    {
                      "name": "InvalidNumberOfNominations",
                      "index": 12,
                      "docs": [
                        "Invalid number of nominations."
                      ]
                    },
                    {
                      "name": "NotSortedAndUnique",
                      "index": 13,
                      "docs": [
                        "Items are not sorted and unique."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 14,
                      "docs": [
                        "Rewards for this era have already been claimed for this validator."
                      ]
                    },
                    {
                      "name": "IncorrectHistoryDepth",
                      "index": 15,
                      "docs": [
                        "Incorrect previous history depth input provided."
                      ]
                    },
                    {
                      "name": "IncorrectSlashingSpans",
                      "index": 16,
                      "docs": [
                        "Incorrect number of slashing spans provided."
                      ]
                    },
                    {
                      "name": "BadState",
                      "index": 17,
                      "docs": [
                        "Internal state has become somehow corrupted and the operation cannot continue."
                      ]
                    },
                    {
                      "name": "TooManyTargets",
                      "index": 18,
                      "docs": [
                        "Too many nomination targets supplied."
                      ]
                    },
                    {
                      "name": "BadTarget",
                      "index": 19,
                      "docs": [
                        "A nomination target was supplied that was blocked or otherwise not a validator."
                      ]
                    },
                    {
                      "name": "CannotChillOther",
                      "index": 20,
                      "docs": [
                        "The user has enough bond and thus cannot be chilled forcefully by an external person."
                      ]
                    },
                    {
                      "name": "TooManyNominators",
                      "index": 21,
                      "docs": [
                        "There are too many nominators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "TooManyValidators",
                      "index": 22,
                      "docs": [
                        "There are too many validator candidates in the system. Governance needs to adjust the",
                        "staking settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "CommissionTooLow",
                      "index": 23,
                      "docs": [
                        "Commission is too low. Must be at least `MinCommission`."
                      ]
                    },
                    {
                      "name": "BoundNotMet",
                      "index": 24,
                      "docs": [
                        "Some bound is not met."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 728,
            "type": {
              "def": {
                "sequence": {
                  "type": 729
                }
              }
            }
          },
          {
            "id": 729,
            "type": {
              "def": {
                "tuple": [
                  0,
                  381
                ]
              }
            }
          },
          {
            "id": 730,
            "type": {
              "def": {
                "tuple": [
                  731,
                  13
                ]
              }
            }
          },
          {
            "id": 731,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 732,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 733,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "index": 0
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Paused",
                      "index": 2
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 734,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "next_authorities",
                      "type": 735,
                      "typeName": "BoundedAuthorityList<Limit>"
                    },
                    {
                      "name": "forced",
                      "type": 73,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 735,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 49
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 48,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 736,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 737,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 738,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 375,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 739,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 740,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 134,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 741,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "index": 4,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 742,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 743,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 744,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 745,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 58
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 746,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 746,
            "type": {
              "def": {
                "sequence": {
                  "type": 58
                }
              }
            }
          },
          {
            "id": 747,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 748
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 119
                    },
                    {
                      "type": 748,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 748,
            "type": {
              "path": [
                "pallet_im_online",
                "BoundedOpaqueNetworkState"
              ],
              "params": [
                {
                  "name": "PeerIdEncodingLimit",
                  "type": null
                },
                {
                  "name": "MultiAddrEncodingLimit",
                  "type": null
                },
                {
                  "name": "AddressesLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 749,
                      "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>"
                    },
                    {
                      "name": "external_addresses",
                      "type": 750,
                      "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 749,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 750,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 749
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 751,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 751,
            "type": {
              "def": {
                "sequence": {
                  "type": 749
                }
              }
            }
          },
          {
            "id": 752,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidKey",
                      "index": 0,
                      "docs": [
                        "Non existent public key."
                      ]
                    },
                    {
                      "name": "DuplicatedHeartbeat",
                      "index": 1,
                      "docs": [
                        "Duplicated heartbeat."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 753,
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "Node"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "prev",
                      "type": 36,
                      "typeName": "Option<T::AccountId>"
                    },
                    {
                      "name": "next",
                      "type": 36,
                      "typeName": "Option<T::AccountId>"
                    },
                    {
                      "name": "bag_upper",
                      "type": 11,
                      "typeName": "T::Score"
                    },
                    {
                      "name": "score",
                      "type": 11,
                      "typeName": "T::Score"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 754,
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "Bag"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "head",
                      "type": 36,
                      "typeName": "Option<T::AccountId>"
                    },
                    {
                      "name": "tail",
                      "type": 36,
                      "typeName": "Option<T::AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 755,
            "type": {
              "def": {
                "sequence": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 756,
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "List",
                      "fields": [
                        {
                          "type": 757,
                          "typeName": "ListError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A error in the list interface implementation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 757,
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "ListError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Duplicate",
                      "index": 0
                    },
                    {
                      "name": "NotHeavier",
                      "index": 1
                    },
                    {
                      "name": "NotInSameBag",
                      "index": 2
                    },
                    {
                      "name": "NodeNotFound",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 758,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "PoolMember"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "unbonding_eras",
                      "type": 759,
                      "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 759,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 760,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 760,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 761
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 761,
            "type": {
              "def": {
                "sequence": {
                  "type": 762
                }
              }
            }
          },
          {
            "id": 762,
            "type": {
              "def": {
                "tuple": [
                  4,
                  6
                ]
              }
            }
          },
          {
            "id": 763,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "BondedPoolInner"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "state",
                      "type": 68,
                      "typeName": "PoolState"
                    },
                    {
                      "name": "commission",
                      "type": 764,
                      "typeName": "Commission<T>"
                    },
                    {
                      "name": "token_id",
                      "type": 63,
                      "typeName": "TokenIdOf<T>"
                    },
                    {
                      "name": "capacity",
                      "type": 63,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "bonus_cycle",
                      "type": 765,
                      "typeName": "BonusCycle"
                    },
                    {
                      "name": "creation_block",
                      "type": 119,
                      "typeName": "T::BlockNumber"
                    },
                    {
                      "name": "bonuses_paid",
                      "type": 712,
                      "typeName": "BoundedVec<EraIndex, T::HistoryDepth>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 764,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "Commission"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 69,
                      "typeName": "Option<Perbill>"
                    },
                    {
                      "name": "max",
                      "type": 69,
                      "typeName": "Option<Perbill>"
                    },
                    {
                      "name": "change_rate",
                      "type": 75,
                      "typeName": "Option<CommissionChangeRate<T::BlockNumber>>"
                    },
                    {
                      "name": "throttle_from",
                      "type": 73,
                      "typeName": "Option<T::BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 765,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "BonusCycle"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "previous_start",
                      "type": 73,
                      "typeName": "Option<EraIndex>"
                    },
                    {
                      "name": "start",
                      "type": 119,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "end",
                      "type": 119,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "pending_duration",
                      "type": 73,
                      "typeName": "Option<EraIndex>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 766,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "SubPools"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "no_era",
                      "type": 767,
                      "typeName": "UnbondPool<T>"
                    },
                    {
                      "name": "with_era",
                      "type": 768,
                      "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 767,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "UnbondPool"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "points",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 768,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 767
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 769,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 769,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 767
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 770
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 770,
            "type": {
              "def": {
                "sequence": {
                  "type": 771
                }
              }
            }
          },
          {
            "id": 771,
            "type": {
              "def": {
                "tuple": [
                  4,
                  767
                ]
              }
            }
          },
          {
            "id": 772,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "EarlyBirdInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxItems",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "has_been_queued",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "queued_items",
                      "type": 773,
                      "typeName": "BoundedVec<(PoolId, Balance), MaxItems>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 773,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 762
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 761,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 774,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "types",
                "EraPayout"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "era",
                      "type": 119,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "payout_count",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "payouts_processed",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "required_payments_percent",
                      "type": 42,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 775,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolNotFound",
                      "index": 0,
                      "docs": [
                        "A (bonded) pool id does not exist."
                      ]
                    },
                    {
                      "name": "PoolTokenAlreadyInUse",
                      "index": 1,
                      "docs": [
                        "Pool already exists for the given token_id"
                      ]
                    },
                    {
                      "name": "PoolMemberNotFound",
                      "index": 2,
                      "docs": [
                        "An account is not a member."
                      ]
                    },
                    {
                      "name": "RewardPoolNotFound",
                      "index": 3,
                      "docs": [
                        "A reward pool does not exist. In all cases this is a system logic error."
                      ]
                    },
                    {
                      "name": "SubPoolsNotFound",
                      "index": 4,
                      "docs": [
                        "A sub pool does not exist."
                      ]
                    },
                    {
                      "name": "AccountBelongsToOtherPool",
                      "index": 5,
                      "docs": [
                        "An account is already delegating in another pool. An account may only belong to one",
                        "pool at a time."
                      ]
                    },
                    {
                      "name": "FullyUnbonding",
                      "index": 6,
                      "docs": [
                        "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                        "anymore to, for example, collect rewards)."
                      ]
                    },
                    {
                      "name": "MaxUnbondingLimit",
                      "index": 7,
                      "docs": [
                        "The member cannot unbond further chunks due to reaching the limit."
                      ]
                    },
                    {
                      "name": "CannotWithdrawAny",
                      "index": 8,
                      "docs": [
                        "None of the funds can be withdrawn yet because the bonding duration has not passed."
                      ]
                    },
                    {
                      "name": "MinimumBondNotMet",
                      "index": 9,
                      "docs": [
                        "The amount does not meet the minimum bond to either join or create a pool.",
                        "",
                        "If the chain is not being destroyed no member can unbond to a value less than",
                        "`Pallet::depositor_min_bond`. The caller does not have nominating",
                        "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
                      ]
                    },
                    {
                      "name": "OverflowRisk",
                      "index": 10,
                      "docs": [
                        "The transaction could not be executed due to overflow risk for the pool."
                      ]
                    },
                    {
                      "name": "NotDestroying",
                      "index": 11,
                      "docs": [
                        "A pool must be in [`PoolState::Destroying`] in order for",
                        "other members to be permissionlessly unbonded."
                      ]
                    },
                    {
                      "name": "NotNominator",
                      "index": 12,
                      "docs": [
                        "The caller does not have nominating permissions for the pool."
                      ]
                    },
                    {
                      "name": "NotKickerOrDestroying",
                      "index": 13,
                      "docs": [
                        "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                      ]
                    },
                    {
                      "name": "NotOpen",
                      "index": 14,
                      "docs": [
                        "The pool is not open to join"
                      ]
                    },
                    {
                      "name": "CanNotChangeState",
                      "index": 15,
                      "docs": [
                        "The pools state cannot be changed."
                      ]
                    },
                    {
                      "name": "DoesNotHavePermission",
                      "index": 16,
                      "docs": [
                        "The caller does not have adequate permissions."
                      ]
                    },
                    {
                      "name": "Defensive",
                      "fields": [
                        {
                          "type": 776,
                          "typeName": "DefensiveError"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some error occurred that should never happen. This should be reported to the",
                        "maintainers."
                      ]
                    },
                    {
                      "name": "PartialUnbondNotAllowedPermissionlessly",
                      "index": 18,
                      "docs": [
                        "Partial unbonding now allowed permissionlessly."
                      ]
                    },
                    {
                      "name": "PoolIdInUse",
                      "index": 19,
                      "docs": [
                        "Pool id currently in use."
                      ]
                    },
                    {
                      "name": "InvalidPoolId",
                      "index": 20,
                      "docs": [
                        "Pool id provided is not correct/usable."
                      ]
                    },
                    {
                      "name": "MintParamsCreationFailed",
                      "index": 21,
                      "docs": [
                        "Mint parameters are invalid."
                      ]
                    },
                    {
                      "name": "BurnParamsCreationFailed",
                      "index": 22,
                      "docs": [
                        "Burn parameters are invalid."
                      ]
                    },
                    {
                      "name": "TransferParamsCreationFailed",
                      "index": 23,
                      "docs": [
                        "Transfer parameters are invalid."
                      ]
                    },
                    {
                      "name": "CapacityExceeded",
                      "index": 24,
                      "docs": [
                        "The capacity of the pool is exceeded by the amount"
                      ]
                    },
                    {
                      "name": "CapacityMutationRestricted",
                      "index": 25,
                      "docs": [
                        "The capacity can only be mutated for the first 14 eras of a cycle"
                      ]
                    },
                    {
                      "name": "DurationOutOfBounds",
                      "index": 26,
                      "docs": [
                        "The duration is out of bounds"
                      ]
                    },
                    {
                      "name": "TokenRequired",
                      "index": 27,
                      "docs": [
                        "The required token is not owned by the caller"
                      ]
                    },
                    {
                      "name": "DepositNotReadyForUnbonding",
                      "index": 28,
                      "docs": [
                        "Deposit should be the last supply of pool's sENJ token to be unbonded"
                      ]
                    },
                    {
                      "name": "MaxCommissionRestricted",
                      "index": 29,
                      "docs": [
                        "The pool's max commission cannot be set higher than the existing value."
                      ]
                    },
                    {
                      "name": "CommissionExceedsMaximum",
                      "index": 30,
                      "docs": [
                        "The supplied commission exceeds the max allowed commission."
                      ]
                    },
                    {
                      "name": "CommissionChangeThrottled",
                      "index": 31,
                      "docs": [
                        "Not enough blocks have surpassed since the last commission update."
                      ]
                    },
                    {
                      "name": "CommissionChangeRateNotAllowed",
                      "index": 32,
                      "docs": [
                        "The submitted changes to commission change rate are not allowed."
                      ]
                    },
                    {
                      "name": "NoPendingCommission",
                      "index": 33,
                      "docs": [
                        "There is no pending commission to claim."
                      ]
                    },
                    {
                      "name": "NoCommissionCurrentSet",
                      "index": 34,
                      "docs": [
                        "No commission current has been set."
                      ]
                    },
                    {
                      "name": "NoopMutation",
                      "index": 35,
                      "docs": [
                        "The mutation does not change anything"
                      ]
                    },
                    {
                      "name": "PoolMembersRemaining",
                      "index": 36,
                      "docs": [
                        "The pool is not empty"
                      ]
                    },
                    {
                      "name": "EarlyBirdBonusNotReady",
                      "index": 37,
                      "docs": [
                        "The early bird bonus is not yet ready to claim"
                      ]
                    },
                    {
                      "name": "EarlyBirdTotalRewardsIsZero",
                      "index": 38,
                      "docs": [
                        "Total Weighted Rewards is 0"
                      ]
                    },
                    {
                      "name": "TooManyEarlyBirdPoolRewards",
                      "index": 39,
                      "docs": [
                        "There are more [`Config::MaxEarlyBirdBonusQueueItems`] than the storage item,",
                        "[`EarlyBirdBonusInfo`] can handle."
                      ]
                    },
                    {
                      "name": "EarlyBirdBonusAlreadyQueued",
                      "index": 40,
                      "docs": [
                        "EarlyBirdReward has already been queued."
                      ]
                    },
                    {
                      "name": "MissingPayouts",
                      "index": 41,
                      "docs": [
                        "Not all payouts have been made"
                      ]
                    },
                    {
                      "name": "WrongPoolCount",
                      "index": 42,
                      "docs": [
                        "The pool count does not match the number of pools"
                      ]
                    },
                    {
                      "name": "PayoutsAlreadyProcessed",
                      "index": 43,
                      "docs": [
                        "Payouts were already processed for this era"
                      ]
                    },
                    {
                      "name": "AttributeKeyExceedsLength",
                      "index": 44,
                      "docs": [
                        "Attribute key exceeds max length"
                      ]
                    },
                    {
                      "name": "AttributeValueDecodeFailed",
                      "index": 45,
                      "docs": [
                        "Unable to decode the attribute value"
                      ]
                    },
                    {
                      "name": "AttributeCapacityExceedsGlobalCapacity",
                      "index": 46,
                      "docs": [
                        "Attribute capacity exceeds the global max capacity"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 776,
            "type": {
              "path": [
                "pallet_nomination_pools",
                "pallet",
                "DefensiveError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnoughSpaceInUnbondPool",
                      "index": 0
                    },
                    {
                      "name": "PoolNotFound",
                      "index": 1
                    },
                    {
                      "name": "RewardPoolNotFound",
                      "index": 2
                    },
                    {
                      "name": "SubPoolsNotFound",
                      "index": 3
                    },
                    {
                      "name": "BondedStashKilledPrematurely",
                      "index": 4
                    },
                    {
                      "name": "DivisionError",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 777,
            "type": {
              "path": [
                "pallet_stake_exchange",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CallerNotOfferCreator",
                      "index": 0,
                      "docs": [
                        "Caller is not the account of"
                      ]
                    },
                    {
                      "name": "ZeroOffer",
                      "index": 1,
                      "docs": [
                        "Cannot create a offer with zero amount"
                      ]
                    },
                    {
                      "name": "ZeroRate",
                      "index": 2,
                      "docs": [
                        "Cannot create a offer with zero rate"
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 3,
                      "docs": [
                        "Arithmetic overflow"
                      ]
                    },
                    {
                      "name": "OfferNotFound",
                      "index": 4,
                      "docs": [
                        "A offer was not found"
                      ]
                    },
                    {
                      "name": "NotEnoughLiquidity",
                      "index": 5,
                      "docs": [
                        "The offer does not have liquidity to perform the operation"
                      ]
                    },
                    {
                      "name": "TransferParamCreationFailed",
                      "index": 6,
                      "docs": [
                        "Cannot perform multi tokens transfer"
                      ]
                    },
                    {
                      "name": "TokenRestriction",
                      "index": 7,
                      "docs": [
                        "LP does not support this tokenId"
                      ]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 8,
                      "docs": [
                        "Zero amount buy not supported"
                      ]
                    },
                    {
                      "name": "RewardRateOutOfRange",
                      "index": 9,
                      "docs": [
                        "Pool rewards outside acceptable range"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Pallet's error type."
              ]
            }
          },
          {
            "id": 778,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 779,
            "type": {
              "def": {
                "tuple": [
                  0,
                  1
                ]
              }
            }
          },
          {
            "id": 780,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "MaxApprovals",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 89,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 781,
                      "typeName": "BoundedVec<AccountId, MaxApprovals>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 781,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 78,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 782,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 783,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "HostConfiguration"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "async_backing_params",
                      "type": 424,
                      "typeName": "AsyncBackingParams"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_downward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parachain_outbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parathread_outbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_sender_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "hrmp_recipient_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "hrmp_channel_max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_channel_max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parachain_inbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parathread_inbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_channel_max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "executor_params",
                      "type": 425,
                      "typeName": "ExecutorParams"
                    },
                    {
                      "name": "code_retention_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "parathread_cores",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "parathread_retries",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "group_rotation_frequency",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "chain_availability_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "thread_availability_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "scheduling_lookahead",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_validators_per_core",
                      "type": 73,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "max_validators",
                      "type": 73,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "dispute_period",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "dispute_post_conclusion_acceptance_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "no_show_slots",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "n_delay_tranches",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "zeroth_delay_tranche_width",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "needed_approvals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "relay_vrf_modulo_samples",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "pvf_checking_enabled",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "pvf_voting_ttl",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "minimum_validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 784,
            "type": {
              "def": {
                "sequence": {
                  "type": 785
                }
              }
            }
          },
          {
            "id": 785,
            "type": {
              "def": {
                "tuple": [
                  4,
                  783
                ]
              }
            }
          },
          {
            "id": 786,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidNewValue",
                      "index": 0,
                      "docs": [
                        "The new value for a configuration parameter is invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 787,
            "type": {
              "def": {
                "sequence": {
                  "type": 439
                }
              }
            }
          },
          {
            "id": 788,
            "type": {
              "def": {
                "sequence": {
                  "type": 382
                }
              }
            }
          },
          {
            "id": 789,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "AvailabilityBitfieldRecord"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bitfield",
                      "type": 436,
                      "typeName": "AvailabilityBitfield"
                    },
                    {
                      "name": "submitted_at",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 790,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "CandidatePendingAvailability"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "core",
                      "type": 100,
                      "typeName": "CoreIndex"
                    },
                    {
                      "name": "hash",
                      "type": 106,
                      "typeName": "CandidateHash"
                    },
                    {
                      "name": "descriptor",
                      "type": 92,
                      "typeName": "CandidateDescriptor<H>"
                    },
                    {
                      "name": "availability_votes",
                      "type": 437,
                      "typeName": "BitVec<u8, BitOrderLsb0>"
                    },
                    {
                      "name": "backers",
                      "type": 437,
                      "typeName": "BitVec<u8, BitOrderLsb0>"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "backed_in_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "backing_group",
                      "type": 101,
                      "typeName": "GroupIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 791,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnsortedOrDuplicateValidatorIndices",
                      "index": 0,
                      "docs": [
                        "Validator indices are out of order or contains duplicates."
                      ]
                    },
                    {
                      "name": "UnsortedOrDuplicateDisputeStatementSet",
                      "index": 1,
                      "docs": [
                        "Dispute statement sets are out of order or contain duplicates."
                      ]
                    },
                    {
                      "name": "UnsortedOrDuplicateBackedCandidates",
                      "index": 2,
                      "docs": [
                        "Backed candidates are out of order (core index) or contain duplicates."
                      ]
                    },
                    {
                      "name": "UnexpectedRelayParent",
                      "index": 3,
                      "docs": [
                        "A different relay parent was provided compared to the on-chain stored one."
                      ]
                    },
                    {
                      "name": "WrongBitfieldSize",
                      "index": 4,
                      "docs": [
                        "Availability bitfield has unexpected size."
                      ]
                    },
                    {
                      "name": "BitfieldAllZeros",
                      "index": 5,
                      "docs": [
                        "Bitfield consists of zeros only."
                      ]
                    },
                    {
                      "name": "BitfieldDuplicateOrUnordered",
                      "index": 6,
                      "docs": [
                        "Multiple bitfields submitted by same validator or validators out of order by index."
                      ]
                    },
                    {
                      "name": "ValidatorIndexOutOfBounds",
                      "index": 7,
                      "docs": [
                        "Validator index out of bounds."
                      ]
                    },
                    {
                      "name": "InvalidBitfieldSignature",
                      "index": 8,
                      "docs": [
                        "Invalid signature"
                      ]
                    },
                    {
                      "name": "UnscheduledCandidate",
                      "index": 9,
                      "docs": [
                        "Candidate submitted but para not scheduled."
                      ]
                    },
                    {
                      "name": "CandidateScheduledBeforeParaFree",
                      "index": 10,
                      "docs": [
                        "Candidate scheduled despite pending candidate already existing for the para."
                      ]
                    },
                    {
                      "name": "WrongCollator",
                      "index": 11,
                      "docs": [
                        "Candidate included with the wrong collator."
                      ]
                    },
                    {
                      "name": "ScheduledOutOfOrder",
                      "index": 12,
                      "docs": [
                        "Scheduled cores out of order."
                      ]
                    },
                    {
                      "name": "HeadDataTooLarge",
                      "index": 13,
                      "docs": [
                        "Head data exceeds the configured maximum."
                      ]
                    },
                    {
                      "name": "PrematureCodeUpgrade",
                      "index": 14,
                      "docs": [
                        "Code upgrade prematurely."
                      ]
                    },
                    {
                      "name": "NewCodeTooLarge",
                      "index": 15,
                      "docs": [
                        "Output code is too large"
                      ]
                    },
                    {
                      "name": "CandidateNotInParentContext",
                      "index": 16,
                      "docs": [
                        "Candidate not in parent context."
                      ]
                    },
                    {
                      "name": "InvalidGroupIndex",
                      "index": 17,
                      "docs": [
                        "Invalid group index in core assignment."
                      ]
                    },
                    {
                      "name": "InsufficientBacking",
                      "index": 18,
                      "docs": [
                        "Insufficient (non-majority) backing."
                      ]
                    },
                    {
                      "name": "InvalidBacking",
                      "index": 19,
                      "docs": [
                        "Invalid (bad signature, unknown validator, etc.) backing."
                      ]
                    },
                    {
                      "name": "NotCollatorSigned",
                      "index": 20,
                      "docs": [
                        "Collator did not sign PoV."
                      ]
                    },
                    {
                      "name": "ValidationDataHashMismatch",
                      "index": 21,
                      "docs": [
                        "The validation data hash does not match expected."
                      ]
                    },
                    {
                      "name": "IncorrectDownwardMessageHandling",
                      "index": 22,
                      "docs": [
                        "The downward message queue is not processed correctly."
                      ]
                    },
                    {
                      "name": "InvalidUpwardMessages",
                      "index": 23,
                      "docs": [
                        "At least one upward message sent does not pass the acceptance criteria."
                      ]
                    },
                    {
                      "name": "HrmpWatermarkMishandling",
                      "index": 24,
                      "docs": [
                        "The candidate didn't follow the rules of HRMP watermark advancement."
                      ]
                    },
                    {
                      "name": "InvalidOutboundHrmp",
                      "index": 25,
                      "docs": [
                        "The HRMP messages sent by the candidate is not valid."
                      ]
                    },
                    {
                      "name": "InvalidValidationCodeHash",
                      "index": 26,
                      "docs": [
                        "The validation code hash of the candidate is not valid."
                      ]
                    },
                    {
                      "name": "ParaHeadMismatch",
                      "index": 27,
                      "docs": [
                        "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the",
                        "commitments."
                      ]
                    },
                    {
                      "name": "BitfieldReferencesFreedCore",
                      "index": 28,
                      "docs": [
                        "A bitfield that references a freed core,",
                        "either intentionally or as part of a concluded",
                        "invalid dispute."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 792,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "ScrapedOnChainVotes"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "backing_validators_per_candidate",
                      "type": 793,
                      "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>"
                    },
                    {
                      "name": "disputes",
                      "type": 453,
                      "typeName": "MultiDisputeStatementSet"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 793,
            "type": {
              "def": {
                "sequence": {
                  "type": 794
                }
              }
            }
          },
          {
            "id": 794,
            "type": {
              "def": {
                "tuple": [
                  91,
                  795
                ]
              }
            }
          },
          {
            "id": 795,
            "type": {
              "def": {
                "sequence": {
                  "type": 796
                }
              }
            }
          },
          {
            "id": 796,
            "type": {
              "def": {
                "tuple": [
                  439,
                  452
                ]
              }
            }
          },
          {
            "id": 797,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras_inherent",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyInclusionInherents",
                      "index": 0,
                      "docs": [
                        "Inclusion inherent called more than once per block."
                      ]
                    },
                    {
                      "name": "InvalidParentHeader",
                      "index": 1,
                      "docs": [
                        "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                        "the parent."
                      ]
                    },
                    {
                      "name": "CandidateConcludedInvalid",
                      "index": 2,
                      "docs": [
                        "Disputed candidate that was concluded invalid."
                      ]
                    },
                    {
                      "name": "InherentOverweight",
                      "index": 3,
                      "docs": [
                        "The data given to the inherent will result in an overweight block."
                      ]
                    },
                    {
                      "name": "DisputeStatementsUnsortedOrDuplicates",
                      "index": 4,
                      "docs": [
                        "The ordering of dispute statements was invalid."
                      ]
                    },
                    {
                      "name": "DisputeInvalid",
                      "index": 5,
                      "docs": [
                        "A dispute statement was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 798,
            "type": {
              "def": {
                "sequence": {
                  "type": 787
                }
              }
            }
          },
          {
            "id": 799,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "ParathreadClaimQueue"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "queue",
                      "type": 800,
                      "typeName": "Vec<QueuedParathread>"
                    },
                    {
                      "name": "next_core_offset",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 800,
            "type": {
              "def": {
                "sequence": {
                  "type": 801
                }
              }
            }
          },
          {
            "id": 801,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "QueuedParathread"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "claim",
                      "type": 802,
                      "typeName": "ParathreadEntry"
                    },
                    {
                      "name": "core_offset",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 802,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "ParathreadEntry"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "claim",
                      "type": 803,
                      "typeName": "ParathreadClaim"
                    },
                    {
                      "name": "retries",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 803,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "ParathreadClaim"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 93,
                      "typeName": "Id"
                    },
                    {
                      "type": 94,
                      "typeName": "CollatorId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 804,
            "type": {
              "def": {
                "sequence": {
                  "type": 805
                }
              }
            }
          },
          {
            "id": 805,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 806
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 806
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 806,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "CoreOccupied"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parathread",
                      "fields": [
                        {
                          "type": 802,
                          "typeName": "ParathreadEntry"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Parachain",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 807,
            "type": {
              "def": {
                "sequence": {
                  "type": 93
                }
              }
            }
          },
          {
            "id": 808,
            "type": {
              "def": {
                "sequence": {
                  "type": 809
                }
              }
            }
          },
          {
            "id": 809,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "CoreAssignment"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "core",
                      "type": 100,
                      "typeName": "CoreIndex"
                    },
                    {
                      "name": "para_id",
                      "type": 93,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "kind",
                      "type": 810,
                      "typeName": "AssignmentKind"
                    },
                    {
                      "name": "group_idx",
                      "type": 101,
                      "typeName": "GroupIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 810,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "AssignmentKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "index": 0
                    },
                    {
                      "name": "Parathread",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "CollatorId"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 811,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "PvfCheckActiveVoteState"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes_accept",
                      "type": 437,
                      "typeName": "BitVec<u8, BitOrderLsb0>"
                    },
                    {
                      "name": "votes_reject",
                      "type": 437,
                      "typeName": "BitVec<u8, BitOrderLsb0>"
                    },
                    {
                      "name": "age",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "created_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "causes",
                      "type": 812,
                      "typeName": "Vec<PvfCheckCause<BlockNumber>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 812,
            "type": {
              "def": {
                "sequence": {
                  "type": 813
                }
              }
            }
          },
          {
            "id": 813,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "PvfCheckCause"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Onboarding",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Upgrade",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "relay_parent_number",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 814,
            "type": {
              "def": {
                "sequence": {
                  "type": 98
                }
              }
            }
          },
          {
            "id": 815,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaLifecycle"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Onboarding",
                      "index": 0
                    },
                    {
                      "name": "Parathread",
                      "index": 1
                    },
                    {
                      "name": "Parachain",
                      "index": 2
                    },
                    {
                      "name": "UpgradingParathread",
                      "index": 3
                    },
                    {
                      "name": "DowngradingParachain",
                      "index": 4
                    },
                    {
                      "name": "OffboardingParathread",
                      "index": 5
                    },
                    {
                      "name": "OffboardingParachain",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 816,
            "type": {
              "def": {
                "tuple": [
                  93,
                  4
                ]
              }
            }
          },
          {
            "id": 817,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaPastCodeMeta"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "upgrade_times",
                      "type": 818,
                      "typeName": "Vec<ReplacementTimes<N>>"
                    },
                    {
                      "name": "last_pruned",
                      "type": 73,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 818,
            "type": {
              "def": {
                "sequence": {
                  "type": 819
                }
              }
            }
          },
          {
            "id": 819,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ReplacementTimes"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "expected_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "activated_at",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 820,
            "type": {
              "def": {
                "sequence": {
                  "type": 816
                }
              }
            }
          },
          {
            "id": 821,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "UpgradeGoAhead"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Abort",
                      "index": 0
                    },
                    {
                      "name": "GoAhead",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 822,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 823,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotRegistered",
                      "index": 0,
                      "docs": [
                        "Para is not registered in our system."
                      ]
                    },
                    {
                      "name": "CannotOnboard",
                      "index": 1,
                      "docs": [
                        "Para cannot be onboarded because it is already tracked by our system."
                      ]
                    },
                    {
                      "name": "CannotOffboard",
                      "index": 2,
                      "docs": [
                        "Para cannot be offboarded at this time."
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 3,
                      "docs": [
                        "Para cannot be upgraded to a parachain."
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 4,
                      "docs": [
                        "Para cannot be downgraded to a parathread."
                      ]
                    },
                    {
                      "name": "PvfCheckStatementStale",
                      "index": 5,
                      "docs": [
                        "The statement for PVF pre-checking is stale."
                      ]
                    },
                    {
                      "name": "PvfCheckStatementFuture",
                      "index": 6,
                      "docs": [
                        "The statement for PVF pre-checking is for a future session."
                      ]
                    },
                    {
                      "name": "PvfCheckValidatorIndexOutOfBounds",
                      "index": 7,
                      "docs": [
                        "Claimed validator index is out of bounds."
                      ]
                    },
                    {
                      "name": "PvfCheckInvalidSignature",
                      "index": 8,
                      "docs": [
                        "The signature for the PVF pre-checking is invalid."
                      ]
                    },
                    {
                      "name": "PvfCheckDoubleVote",
                      "index": 9,
                      "docs": [
                        "The given validator already has cast a vote."
                      ]
                    },
                    {
                      "name": "PvfCheckSubjectInvalid",
                      "index": 10,
                      "docs": [
                        "The given PVF does not exist at the moment of process a vote."
                      ]
                    },
                    {
                      "name": "CannotUpgradeCode",
                      "index": 11,
                      "docs": [
                        "Parachain cannot currently schedule a code upgrade."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 824,
            "type": {
              "def": {
                "sequence": {
                  "type": 825
                }
              }
            }
          },
          {
            "id": 825,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "initializer",
                "BufferedSessionChange"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validators",
                      "type": 788,
                      "typeName": "Vec<ValidatorId>"
                    },
                    {
                      "name": "queued",
                      "type": 788,
                      "typeName": "Vec<ValidatorId>"
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 826,
            "type": {
              "def": {
                "sequence": {
                  "type": 827
                }
              }
            }
          },
          {
            "id": 827,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 13,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 828,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "HrmpOpenChannelRequest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "confirmed",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "_age",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "sender_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 829,
            "type": {
              "def": {
                "sequence": {
                  "type": 104
                }
              }
            }
          },
          {
            "id": 830,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "HrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 593,
                      "typeName": "Option<Hash>"
                    },
                    {
                      "name": "sender_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "recipient_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 831,
            "type": {
              "def": {
                "sequence": {
                  "type": 832
                }
              }
            }
          },
          {
            "id": 832,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 833,
            "type": {
              "def": {
                "sequence": {
                  "type": 834
                }
              }
            }
          },
          {
            "id": 834,
            "type": {
              "def": {
                "tuple": [
                  4,
                  807
                ]
              }
            }
          },
          {
            "id": 835,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OpenHrmpChannelToSelf",
                      "index": 0,
                      "docs": [
                        "The sender tried to open a channel to themselves."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelInvalidRecipient",
                      "index": 1,
                      "docs": [
                        "The recipient is not a valid para."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelZeroCapacity",
                      "index": 2,
                      "docs": [
                        "The requested capacity is zero."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelCapacityExceedsLimit",
                      "index": 3,
                      "docs": [
                        "The requested capacity exceeds the global limit."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelZeroMessageSize",
                      "index": 4,
                      "docs": [
                        "The requested maximum message size is 0."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelMessageSizeExceedsLimit",
                      "index": 5,
                      "docs": [
                        "The open request requested the message size that exceeds the global limit."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelAlreadyExists",
                      "index": 6,
                      "docs": [
                        "The channel already exists"
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelAlreadyRequested",
                      "index": 7,
                      "docs": [
                        "There is already a request to open the same channel."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelLimitExceeded",
                      "index": 8,
                      "docs": [
                        "The sender already has the maximum number of allowed outbound channels."
                      ]
                    },
                    {
                      "name": "AcceptHrmpChannelDoesntExist",
                      "index": 9,
                      "docs": [
                        "The channel from the sender to the origin doesn't exist."
                      ]
                    },
                    {
                      "name": "AcceptHrmpChannelAlreadyConfirmed",
                      "index": 10,
                      "docs": [
                        "The channel is already confirmed."
                      ]
                    },
                    {
                      "name": "AcceptHrmpChannelLimitExceeded",
                      "index": 11,
                      "docs": [
                        "The recipient already has the maximum number of allowed inbound channels."
                      ]
                    },
                    {
                      "name": "CloseHrmpChannelUnauthorized",
                      "index": 12,
                      "docs": [
                        "The origin tries to close a channel where it is neither the sender nor the recipient."
                      ]
                    },
                    {
                      "name": "CloseHrmpChannelDoesntExist",
                      "index": 13,
                      "docs": [
                        "The channel to be closed doesn't exist."
                      ]
                    },
                    {
                      "name": "CloseHrmpChannelAlreadyUnderway",
                      "index": 14,
                      "docs": [
                        "The channel close request is already requested."
                      ]
                    },
                    {
                      "name": "CancelHrmpOpenChannelUnauthorized",
                      "index": 15,
                      "docs": [
                        "Canceling is requested by neither the sender nor recipient of the open channel request."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelDoesntExist",
                      "index": 16,
                      "docs": [
                        "The open request doesn't exist."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelAlreadyConfirmed",
                      "index": 17,
                      "docs": [
                        "Cannot cancel an HRMP open channel request because it is already confirmed."
                      ]
                    },
                    {
                      "name": "WrongWitness",
                      "index": 18,
                      "docs": [
                        "The provided witness data is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 836,
            "type": {
              "def": {
                "sequence": {
                  "type": 383
                }
              }
            }
          },
          {
            "id": 837,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "SessionInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "active_validator_indices",
                      "type": 787,
                      "typeName": "Vec<ValidatorIndex>"
                    },
                    {
                      "name": "random_seed",
                      "type": 1,
                      "typeName": "[u8; 32]"
                    },
                    {
                      "name": "dispute_period",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "validators",
                      "type": 838,
                      "typeName": "IndexedVec<ValidatorIndex, ValidatorId>"
                    },
                    {
                      "name": "discovery_keys",
                      "type": 839,
                      "typeName": "Vec<AuthorityDiscoveryId>"
                    },
                    {
                      "name": "assignment_keys",
                      "type": 836,
                      "typeName": "Vec<AssignmentId>"
                    },
                    {
                      "name": "validator_groups",
                      "type": 840,
                      "typeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>"
                    },
                    {
                      "name": "n_cores",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "zeroth_delay_tranche_width",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "relay_vrf_modulo_samples",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "n_delay_tranches",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "no_show_slots",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "needed_approvals",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 838,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "IndexedVec"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 439
                },
                {
                  "name": "V",
                  "type": 382
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 788,
                      "typeName": "Vec<V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 839,
            "type": {
              "def": {
                "sequence": {
                  "type": 384
                }
              }
            }
          },
          {
            "id": 840,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "IndexedVec"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 101
                },
                {
                  "name": "V",
                  "type": 787
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 798,
                      "typeName": "Vec<V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 841,
            "type": {
              "def": {
                "tuple": [
                  4,
                  106
                ]
              }
            }
          },
          {
            "id": 842,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "DisputeState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validators_for",
                      "type": 437,
                      "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                    },
                    {
                      "name": "validators_against",
                      "type": 437,
                      "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                    },
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "concluded_at",
                      "type": 73,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 843,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 439
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 787
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 844,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DuplicateDisputeStatementSets",
                      "index": 0,
                      "docs": [
                        "Duplicate dispute statement sets provided."
                      ]
                    },
                    {
                      "name": "AncientDisputeStatement",
                      "index": 1,
                      "docs": [
                        "Ancient dispute statement provided."
                      ]
                    },
                    {
                      "name": "ValidatorIndexOutOfBounds",
                      "index": 2,
                      "docs": [
                        "Validator index on statement is out of bounds for session."
                      ]
                    },
                    {
                      "name": "InvalidSignature",
                      "index": 3,
                      "docs": [
                        "Invalid signature on statement."
                      ]
                    },
                    {
                      "name": "DuplicateStatement",
                      "index": 4,
                      "docs": [
                        "Validator vote submitted more than once to dispute."
                      ]
                    },
                    {
                      "name": "SingleSidedDispute",
                      "index": 5,
                      "docs": [
                        "A dispute where there are only votes on one side."
                      ]
                    },
                    {
                      "name": "MaliciousBacker",
                      "index": 6,
                      "docs": [
                        "A dispute vote from a malicious backer."
                      ]
                    },
                    {
                      "name": "MissingBackingVotes",
                      "index": 7,
                      "docs": [
                        "No backing votes were provides along dispute statements."
                      ]
                    },
                    {
                      "name": "UnconfirmedDispute",
                      "index": 8,
                      "docs": [
                        "Unconfirmed dispute statement sets provided."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 845,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "PendingSlashes"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "keys",
                      "type": 846,
                      "typeName": "BTreeMap<ValidatorIndex, ValidatorId>"
                    },
                    {
                      "name": "kind",
                      "type": 468,
                      "typeName": "SlashingOffenceKind"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 846,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 439
                },
                {
                  "name": "V",
                  "type": 382
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 847
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 847,
            "type": {
              "def": {
                "sequence": {
                  "type": 848
                }
              }
            }
          },
          {
            "id": 848,
            "type": {
              "def": {
                "tuple": [
                  439,
                  382
                ]
              }
            }
          },
          {
            "id": 849,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 0,
                      "docs": [
                        "The key ownership proof is invalid."
                      ]
                    },
                    {
                      "name": "InvalidSessionIndex",
                      "index": 1,
                      "docs": [
                        "The session index is too old or invalid."
                      ]
                    },
                    {
                      "name": "InvalidCandidateHash",
                      "index": 2,
                      "docs": [
                        "The candidate hash is invalid."
                      ]
                    },
                    {
                      "name": "InvalidValidatorIndex",
                      "index": 3,
                      "docs": [
                        "There is no pending slash for the given validator index and time",
                        "slot."
                      ]
                    },
                    {
                      "name": "ValidatorIndexIdMismatch",
                      "index": 4,
                      "docs": [
                        "The validator index does not match the validator id."
                      ]
                    },
                    {
                      "name": "DuplicateSlashingReport",
                      "index": 5,
                      "docs": [
                        "The given slashing report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 850,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "ParaInfo"
              ],
              "params": [
                {
                  "name": "Account",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "manager",
                      "type": 0,
                      "typeName": "Account"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "locked",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 851,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotRegistered",
                      "index": 0,
                      "docs": [
                        "The ID is not registered."
                      ]
                    },
                    {
                      "name": "AlreadyRegistered",
                      "index": 1,
                      "docs": [
                        "The ID is already registered."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 2,
                      "docs": [
                        "The caller is not the owner of this Id."
                      ]
                    },
                    {
                      "name": "CodeTooLarge",
                      "index": 3,
                      "docs": [
                        "Invalid para code size."
                      ]
                    },
                    {
                      "name": "HeadDataTooLarge",
                      "index": 4,
                      "docs": [
                        "Invalid para head data size."
                      ]
                    },
                    {
                      "name": "NotParachain",
                      "index": 5,
                      "docs": [
                        "Para is not a Parachain."
                      ]
                    },
                    {
                      "name": "NotParathread",
                      "index": 6,
                      "docs": [
                        "Para is not a Parathread."
                      ]
                    },
                    {
                      "name": "CannotDeregister",
                      "index": 7,
                      "docs": [
                        "Cannot deregister para"
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 8,
                      "docs": [
                        "Cannot schedule downgrade of parachain to parathread"
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 9,
                      "docs": [
                        "Cannot schedule upgrade of parathread to parachain"
                      ]
                    },
                    {
                      "name": "ParaLocked",
                      "index": 10,
                      "docs": [
                        "Para is locked from manipulation by the manager. Must use parachain or relay chain governance."
                      ]
                    },
                    {
                      "name": "NotReserved",
                      "index": 11,
                      "docs": [
                        "The ID given for registration has not been reserved."
                      ]
                    },
                    {
                      "name": "EmptyCode",
                      "index": 12,
                      "docs": [
                        "Registering parachain with empty code is not allowed."
                      ]
                    },
                    {
                      "name": "CannotSwap",
                      "index": 13,
                      "docs": [
                        "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras are",
                        "correct for the swap to work."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 852,
            "type": {
              "def": {
                "sequence": {
                  "type": 853
                }
              }
            }
          },
          {
            "id": 853,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 370
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 370
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 854,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParaNotOnboarding",
                      "index": 0,
                      "docs": [
                        "The parachain ID is not onboarding."
                      ]
                    },
                    {
                      "name": "LeaseError",
                      "index": 1,
                      "docs": [
                        "There was an error with the lease."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 855,
            "type": {
              "def": {
                "tuple": [
                  0,
                  93
                ]
              }
            }
          },
          {
            "id": 856,
            "type": {
              "def": {
                "array": {
                  "len": 36,
                  "type": 857
                }
              }
            }
          },
          {
            "id": 857,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 858
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 858
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 858,
            "type": {
              "def": {
                "tuple": [
                  0,
                  93,
                  6
                ]
              }
            }
          },
          {
            "id": 859,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuctionInProgress",
                      "index": 0,
                      "docs": [
                        "This auction is already in progress."
                      ]
                    },
                    {
                      "name": "LeasePeriodInPast",
                      "index": 1,
                      "docs": [
                        "The lease period is in the past."
                      ]
                    },
                    {
                      "name": "ParaNotRegistered",
                      "index": 2,
                      "docs": [
                        "Para is not registered"
                      ]
                    },
                    {
                      "name": "NotCurrentAuction",
                      "index": 3,
                      "docs": [
                        "Not a current auction."
                      ]
                    },
                    {
                      "name": "NotAuction",
                      "index": 4,
                      "docs": [
                        "Not an auction."
                      ]
                    },
                    {
                      "name": "AuctionEnded",
                      "index": 5,
                      "docs": [
                        "Auction has already ended."
                      ]
                    },
                    {
                      "name": "AlreadyLeasedOut",
                      "index": 6,
                      "docs": [
                        "The para is already leased out for part of this range."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 860,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "FundInfo"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "LeasePeriod",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "verifier",
                      "type": 474,
                      "typeName": "Option<MultiSigner>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "raised",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "cap",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "last_contribution",
                      "type": 861,
                      "typeName": "LastContribution<BlockNumber>"
                    },
                    {
                      "name": "first_period",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "last_period",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "fund_index",
                      "type": 4,
                      "typeName": "FundIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 861,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "LastContribution"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Never",
                      "index": 0
                    },
                    {
                      "name": "PreEnding",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ending",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 862,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FirstPeriodInPast",
                      "index": 0,
                      "docs": [
                        "The current lease period is more than the first lease period."
                      ]
                    },
                    {
                      "name": "FirstPeriodTooFarInFuture",
                      "index": 1,
                      "docs": [
                        "The first lease period needs to at least be less than 3 `max_value`."
                      ]
                    },
                    {
                      "name": "LastPeriodBeforeFirstPeriod",
                      "index": 2,
                      "docs": [
                        "Last lease period must be greater than first lease period."
                      ]
                    },
                    {
                      "name": "LastPeriodTooFarInFuture",
                      "index": 3,
                      "docs": [
                        "The last lease period cannot be more than 3 periods after the first period."
                      ]
                    },
                    {
                      "name": "CannotEndInPast",
                      "index": 4,
                      "docs": [
                        "The campaign ends before the current block number. The end must be in the future."
                      ]
                    },
                    {
                      "name": "EndTooFarInFuture",
                      "index": 5,
                      "docs": [
                        "The end date for this crowdloan is not sensible."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 6,
                      "docs": [
                        "There was an overflow."
                      ]
                    },
                    {
                      "name": "ContributionTooSmall",
                      "index": 7,
                      "docs": [
                        "The contribution was below the minimum, `MinContribution`."
                      ]
                    },
                    {
                      "name": "InvalidParaId",
                      "index": 8,
                      "docs": [
                        "Invalid fund index."
                      ]
                    },
                    {
                      "name": "CapExceeded",
                      "index": 9,
                      "docs": [
                        "Contributions exceed maximum amount."
                      ]
                    },
                    {
                      "name": "ContributionPeriodOver",
                      "index": 10,
                      "docs": [
                        "The contribution period has already ended."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 11,
                      "docs": [
                        "The origin of this call is invalid."
                      ]
                    },
                    {
                      "name": "NotParachain",
                      "index": 12,
                      "docs": [
                        "This crowdloan does not correspond to a parachain."
                      ]
                    },
                    {
                      "name": "LeaseActive",
                      "index": 13,
                      "docs": [
                        "This parachain lease is still active and retirement cannot yet begin."
                      ]
                    },
                    {
                      "name": "BidOrLeaseActive",
                      "index": 14,
                      "docs": [
                        "This parachain's bid or lease is still active and withdraw cannot yet begin."
                      ]
                    },
                    {
                      "name": "FundNotEnded",
                      "index": 15,
                      "docs": [
                        "The crowdloan has not yet ended."
                      ]
                    },
                    {
                      "name": "NoContributions",
                      "index": 16,
                      "docs": [
                        "There are no contributions stored in this crowdloan."
                      ]
                    },
                    {
                      "name": "NotReadyToDissolve",
                      "index": 17,
                      "docs": [
                        "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."
                      ]
                    },
                    {
                      "name": "InvalidSignature",
                      "index": 18,
                      "docs": [
                        "Invalid signature."
                      ]
                    },
                    {
                      "name": "MemoTooLarge",
                      "index": 19,
                      "docs": [
                        "The provided memo is too large."
                      ]
                    },
                    {
                      "name": "AlreadyInNewRaise",
                      "index": 20,
                      "docs": [
                        "The fund is already in `NewRaise`"
                      ]
                    },
                    {
                      "name": "VrfDelayInProgress",
                      "index": 21,
                      "docs": [
                        "No contributions allowed during the VRF delay"
                      ]
                    },
                    {
                      "name": "NoLeasePeriod",
                      "index": 22,
                      "docs": [
                        "A lease period has not started yet, due to an offset in the starting block."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 863,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 166,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "maybe_match_querier",
                          "type": 864,
                          "typeName": "Option<VersionedMultiLocation>"
                        },
                        {
                          "name": "maybe_notify",
                          "type": 865,
                          "typeName": "Option<(u8, u8)>"
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 166,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "is_active",
                          "type": 37,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 867,
                          "typeName": "VersionedResponse"
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 864,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 166
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 166
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 865,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 866
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 866
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 866,
            "type": {
              "def": {
                "tuple": [
                  2,
                  2
                ]
              }
            }
          },
          {
            "id": 867,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 487,
                          "typeName": "v2::Response"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 135,
                          "typeName": "v3::Response"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 868,
            "type": {
              "def": {
                "tuple": [
                  4,
                  166
                ]
              }
            }
          },
          {
            "id": 869,
            "type": {
              "def": {
                "tuple": [
                  11,
                  9,
                  4
                ]
              }
            }
          },
          {
            "id": 870,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 871
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 872,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 871,
            "type": {
              "def": {
                "tuple": [
                  166,
                  4
                ]
              }
            }
          },
          {
            "id": 872,
            "type": {
              "def": {
                "sequence": {
                  "type": 871
                }
              }
            }
          },
          {
            "id": 873,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "index": 0
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "index": 1
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "type": 874,
                          "typeName": "Option<Vec<u8>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 874,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 13
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 875,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0,
                  876
                ]
              }
            }
          },
          {
            "id": 876,
            "type": {
              "path": [
                "xcm",
                "VersionedAssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "v3::AssetId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 877,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "RemoteLockedFungibleRecord"
              ],
              "params": [
                {
                  "name": "ConsumerIdentifier",
                  "type": 56
                },
                {
                  "name": "MaxConsumers",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "owner",
                      "type": 166,
                      "typeName": "VersionedMultiLocation"
                    },
                    {
                      "name": "locker",
                      "type": 166,
                      "typeName": "VersionedMultiLocation"
                    },
                    {
                      "name": "consumers",
                      "type": 878,
                      "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 878,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 879
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 880,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 879,
            "type": {
              "def": {
                "tuple": [
                  56,
                  6
                ]
              }
            }
          },
          {
            "id": 880,
            "type": {
              "def": {
                "sequence": {
                  "type": 879
                }
              }
            }
          },
          {
            "id": 881,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 882
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 883,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 882,
            "type": {
              "def": {
                "tuple": [
                  6,
                  166
                ]
              }
            }
          },
          {
            "id": 883,
            "type": {
              "def": {
                "sequence": {
                  "type": 882
                }
              }
            }
          },
          {
            "id": 884,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "index": 13,
                      "docs": [
                        "Invalid asset for the operation."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 14,
                      "docs": [
                        "The owner does not own (all) of the asset that they wish to do the operation on."
                      ]
                    },
                    {
                      "name": "TooManyLocks",
                      "index": 15,
                      "docs": [
                        "The asset owner has too many locks on the asset."
                      ]
                    },
                    {
                      "name": "AccountNotSovereign",
                      "index": 16,
                      "docs": [
                        "The given account is not an identifiable sovereign account for any location."
                      ]
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 17,
                      "docs": [
                        "The operation required fees to be paid which the initiator could not meet."
                      ]
                    },
                    {
                      "name": "LockNotFound",
                      "index": 18,
                      "docs": [
                        "A remote lock with the corresponding data could not be found."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 19,
                      "docs": [
                        "The unlock operation cannot succeed because there are still consumers of the lock."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 885,
            "type": {
              "path": [
                "pallet_message_queue",
                "BookState"
              ],
              "params": [
                {
                  "name": "MessageOrigin",
                  "type": 168
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "count",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "ready_neighbours",
                      "type": 886,
                      "typeName": "Option<Neighbours<MessageOrigin>>"
                    },
                    {
                      "name": "message_count",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "size",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 886,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 887
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 887
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 887,
            "type": {
              "path": [
                "pallet_message_queue",
                "Neighbours"
              ],
              "params": [
                {
                  "name": "MessageOrigin",
                  "type": 168
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "prev",
                      "type": 168,
                      "typeName": "MessageOrigin"
                    },
                    {
                      "name": "next",
                      "type": 168,
                      "typeName": "MessageOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 888,
            "type": {
              "def": {
                "tuple": [
                  168,
                  4
                ]
              }
            }
          },
          {
            "id": 889,
            "type": {
              "path": [
                "pallet_message_queue",
                "Page"
              ],
              "params": [
                {
                  "name": "Size",
                  "type": 4
                },
                {
                  "name": "HeapSize",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "remaining",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "remaining_size",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "first_index",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "last",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "heap",
                      "type": 890,
                      "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 890,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 891,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotReapable",
                      "index": 0,
                      "docs": [
                        "Page is not reapable because it has items remaining to be processed and is not old",
                        "enough."
                      ]
                    },
                    {
                      "name": "NoPage",
                      "index": 1,
                      "docs": [
                        "Page to be reaped does not exist."
                      ]
                    },
                    {
                      "name": "NoMessage",
                      "index": 2,
                      "docs": [
                        "The referenced message could not be found."
                      ]
                    },
                    {
                      "name": "AlreadyProcessed",
                      "index": 3,
                      "docs": [
                        "The message was already processed and cannot be processed again."
                      ]
                    },
                    {
                      "name": "Queued",
                      "index": 4,
                      "docs": [
                        "The message is queued for future execution."
                      ]
                    },
                    {
                      "name": "InsufficientWeight",
                      "index": 5,
                      "docs": [
                        "There is temporarily not enough weight to continue servicing messages."
                      ]
                    },
                    {
                      "name": "TemporarilyUnprocessable",
                      "index": 6,
                      "docs": [
                        "This message is temporarily unprocessable.",
                        "",
                        "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                        "retrying."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 892,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_sudo_wrapper",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParaDoesntExist",
                      "index": 0,
                      "docs": [
                        "The specified parachain or parathread is not registered."
                      ]
                    },
                    {
                      "name": "ParaAlreadyExists",
                      "index": 1,
                      "docs": [
                        "The specified parachain or parathread is already registered."
                      ]
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 2,
                      "docs": [
                        "A DMP message couldn't be sent because it exceeds the maximum size allowed for a downward",
                        "message."
                      ]
                    },
                    {
                      "name": "CouldntCleanup",
                      "index": 3,
                      "docs": [
                        "Could not schedule para cleanup."
                      ]
                    },
                    {
                      "name": "NotParathread",
                      "index": 4,
                      "docs": [
                        "Not a parathread."
                      ]
                    },
                    {
                      "name": "NotParachain",
                      "index": 5,
                      "docs": [
                        "Not a parachain."
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 6,
                      "docs": [
                        "Cannot upgrade parathread."
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 7,
                      "docs": [
                        "Cannot downgrade parachain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 893,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "assigned_slots",
                "ParachainTemporarySlot"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "LeasePeriod",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "manager",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "period_begin",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "period_count",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "last_lease",
                      "type": 73,
                      "typeName": "Option<LeasePeriod>"
                    },
                    {
                      "name": "lease_count",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 894,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "assigned_slots",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParaDoesntExist",
                      "index": 0,
                      "docs": [
                        "The specified parachain or parathread is not registered."
                      ]
                    },
                    {
                      "name": "NotParathread",
                      "index": 1,
                      "docs": [
                        "Not a parathread."
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 2,
                      "docs": [
                        "Cannot upgrade parathread."
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 3,
                      "docs": [
                        "Cannot downgrade parachain."
                      ]
                    },
                    {
                      "name": "SlotAlreadyAssigned",
                      "index": 4,
                      "docs": [
                        "Permanent or Temporary slot already assigned."
                      ]
                    },
                    {
                      "name": "SlotNotAssigned",
                      "index": 5,
                      "docs": [
                        "Permanent or Temporary slot has not been assigned."
                      ]
                    },
                    {
                      "name": "OngoingLeaseExists",
                      "index": 6,
                      "docs": [
                        "An ongoing lease already exists."
                      ]
                    },
                    {
                      "name": "MaxPermanentSlotsExceeded",
                      "index": 7
                    },
                    {
                      "name": "MaxTemporarySlotsExceeded",
                      "index": 8
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 895,
            "type": {
              "def": {
                "tuple": [
                  6,
                  6,
                  0
                ]
              }
            }
          },
          {
            "id": 896,
            "type": {
              "def": {
                "tuple": [
                  6,
                  6
                ]
              }
            }
          },
          {
            "id": 897,
            "type": {
              "def": {
                "tuple": [
                  6,
                  0
                ]
              }
            }
          },
          {
            "id": 898,
            "type": {
              "def": {
                "tuple": [
                  6,
                  77,
                  201
                ]
              }
            }
          },
          {
            "id": 899,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 900,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "migrations",
                "Migration"
              ],
              "params": [
                {
                  "name": "MaxMigrationKeyLength",
                  "type": 901
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "stage",
                      "type": 243,
                      "typeName": "MigrationStage"
                    },
                    {
                      "name": "last_iterated_key",
                      "type": 902,
                      "typeName": "Option<BoundedVec<u8, MaxMigrationKeyLength>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 901,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxMigrationKeyLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 902,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 899
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 899
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 903,
            "type": {
              "path": [
                "ep_multi_tokens",
                "types",
                "NativeAssetInfo"
              ],
              "params": [
                {
                  "name": "AssetId",
                  "type": 177
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 177,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "units_per_second",
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 904,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 905
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 907,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 905,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "types",
                "ExtrinsicInfo"
              ],
              "params": [
                {
                  "name": "MaxNameLength",
                  "type": 272
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pallet_name",
                      "type": 271,
                      "typeName": "BoundedString<MaxNameLength>"
                    },
                    {
                      "name": "extrinsic_name",
                      "type": 906,
                      "typeName": "Option<BoundedString<MaxNameLength>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 906,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 271
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 271
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 907,
            "type": {
              "def": {
                "sequence": {
                  "type": 905
                }
              }
            }
          },
          {
            "id": 908,
            "type": {
              "path": [
                "pallet_multi_tokens",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollectionNotFound",
                      "index": 0,
                      "docs": [
                        "Collection was not found"
                      ]
                    },
                    {
                      "name": "CollectionAccountNotFound",
                      "index": 1,
                      "docs": [
                        "CollectionAccount was not found"
                      ]
                    },
                    {
                      "name": "TokenNotFound",
                      "index": 2,
                      "docs": [
                        "Token was not found"
                      ]
                    },
                    {
                      "name": "TokenAccountNotFound",
                      "index": 3,
                      "docs": [
                        "TokenAccount was not found"
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 4,
                      "docs": [
                        "Caller is not allowed to execute this extrinsic"
                      ]
                    },
                    {
                      "name": "BalanceLow",
                      "index": 5,
                      "docs": [
                        "Not enough balance to perform the operation."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "index": 6,
                      "docs": [
                        "The operation failed due to an item being frozen"
                      ]
                    },
                    {
                      "name": "HasNeverFreezeState",
                      "index": 7,
                      "docs": [
                        "The token has a never freeze state. The state cannot be changed and the token cannot be",
                        "frozen."
                      ]
                    },
                    {
                      "name": "PermanentlyFrozen",
                      "index": 8,
                      "docs": [
                        "The token is permanently frozen"
                      ]
                    },
                    {
                      "name": "InvalidFreezeState",
                      "index": 9,
                      "docs": [
                        "The freeze state is not valid"
                      ]
                    },
                    {
                      "name": "AmountZero",
                      "index": 10,
                      "docs": [
                        "An amount of zero was used when it's not allowed"
                      ]
                    },
                    {
                      "name": "InvalidAttributeKey",
                      "index": 11,
                      "docs": [
                        "Attribute key invalid"
                      ]
                    },
                    {
                      "name": "MaxTokenCountExceeded",
                      "index": 12,
                      "docs": [
                        "Tried to mint more tokens than allowed"
                      ]
                    },
                    {
                      "name": "TokenMintCapExceeded",
                      "index": 13,
                      "docs": [
                        "The cap for the token was exceeded during mint"
                      ]
                    },
                    {
                      "name": "TokenAlreadyExists",
                      "index": 14,
                      "docs": [
                        "Tried to create Token that already exists"
                      ]
                    },
                    {
                      "name": "DestroyForbiddenByAttributeCount",
                      "index": 15,
                      "docs": [
                        "The collection or token cannot be destroyed because it has attributes"
                      ]
                    },
                    {
                      "name": "DestroyForbiddenByRemainingTokens",
                      "index": 16,
                      "docs": [
                        "Destroy is not allowed on collections that have tokens. Destroy all tokens before",
                        "calling [`destroy_collection`](Pallet::destroy_collection). Keep in mind that the",
                        "[`Tokens`] storage can remain even if all of [`Token`](ep_multi_tokens::Token)'s units",
                        "were burned. A token can only be destroyed by setting",
                        "[`remove_token_storage`](OnBurnInput::remove_token_storage) to true in",
                        "[`burn`](Pallet::burn)."
                      ]
                    },
                    {
                      "name": "DestroyForbiddenByCollectionEvent",
                      "index": 17,
                      "docs": [
                        "The `OnCollectionEvent` trait has forbidden burning of the collection"
                      ]
                    },
                    {
                      "name": "DepositReserveFailed",
                      "index": 18,
                      "docs": [
                        "Unable to reserve the amount to create a new collection/token"
                      ]
                    },
                    {
                      "name": "DepositUnreserveFailed",
                      "index": 19,
                      "docs": [
                        "Unable to unreserve the amount to burn an existing collection/token"
                      ]
                    },
                    {
                      "name": "InvalidUnitPrice",
                      "index": 20,
                      "docs": [
                        "The unit price cannot be zero, cannot decrease, and `unit_price * total_supply` must",
                        "be greater than `TokenAccountDeposit`"
                      ]
                    },
                    {
                      "name": "BalanceBelowMinimumRequirement",
                      "index": 21,
                      "docs": [
                        "The balance is below the minimum required balance"
                      ]
                    },
                    {
                      "name": "MintFailedRequirements",
                      "index": 22,
                      "docs": [
                        "The minting did not meet the requirements set by the mint policy"
                      ]
                    },
                    {
                      "name": "IdleOperationQueueFull",
                      "index": 23,
                      "docs": [
                        "The idle operation queue is full and cannot accept new operations"
                      ]
                    },
                    {
                      "name": "ReservesLow",
                      "index": 24,
                      "docs": [
                        "Reserved balance is not enough to perform the operation"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 25,
                      "docs": [
                        "Max named reserves for an account are exceeded"
                      ]
                    },
                    {
                      "name": "TooManyLocks",
                      "index": 26,
                      "docs": [
                        "Max named locks for an account are exceeded"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 27,
                      "docs": [
                        "The balance is locked or restricted"
                      ]
                    },
                    {
                      "name": "PercentageOutOfBounds",
                      "index": 28,
                      "docs": [
                        "Royalty percentage is above or below allowed bounds"
                      ]
                    },
                    {
                      "name": "CurrencyIncompatibleWithCollectionRoyalty",
                      "index": 29,
                      "docs": [
                        "Token cannot act as both a currency and a royalty"
                      ]
                    },
                    {
                      "name": "MaxApprovalsExceeded",
                      "index": 30,
                      "docs": [
                        "The max number of approvals for this account was exceeded"
                      ]
                    },
                    {
                      "name": "AlreadyExpired",
                      "index": 31,
                      "docs": [
                        "Tried to set an expiration that has already passed"
                      ]
                    },
                    {
                      "name": "CollectionAlreadyApproved",
                      "index": 32,
                      "docs": [
                        "The collection is already approved for all, so it is useless to approve for a single",
                        "token"
                      ]
                    },
                    {
                      "name": "InsufficientAllowance",
                      "index": 33,
                      "docs": [
                        "Not enough allowance to perform the operation"
                      ]
                    },
                    {
                      "name": "WrongCurrentApprovedAmount",
                      "index": 34,
                      "docs": [
                        "The passed `current_amount` does not match the actual current amount of the approval"
                      ]
                    },
                    {
                      "name": "CannotApproveSelf",
                      "index": 35,
                      "docs": [
                        "An account cannot approve itself as an operator"
                      ]
                    },
                    {
                      "name": "CannotTransferToSelf",
                      "index": 36,
                      "docs": [
                        "An account cannot transfer tokens to itself"
                      ]
                    },
                    {
                      "name": "TransferParamCreationFailed",
                      "index": 37,
                      "docs": [
                        "Transfer params could not be created"
                      ]
                    },
                    {
                      "name": "OperationNotAllowedForNativeToken",
                      "index": 38,
                      "docs": [
                        "This operation is not allowed for the native token"
                      ]
                    },
                    {
                      "name": "InvalidExplicitRoyaltyCurrencies",
                      "index": 39,
                      "docs": [
                        "One or more of the explicit royalty currencies are invalid"
                      ]
                    },
                    {
                      "name": "InvalidAttributeCount",
                      "index": 40,
                      "docs": [
                        "Provided attribute count doesnt match the count is storage"
                      ]
                    },
                    {
                      "name": "ConflictingLocation",
                      "index": 41,
                      "docs": [
                        "Conflicting MultiLocation for an AssetId"
                      ]
                    },
                    {
                      "name": "CollectionIdAlreadyInUse",
                      "index": 42,
                      "docs": [
                        "Collection ID is already in use"
                      ]
                    },
                    {
                      "name": "FreezeStateRequired",
                      "index": 43,
                      "docs": [
                        "Freeze state is required when freezing a token"
                      ]
                    },
                    {
                      "name": "PremintExceeded",
                      "index": 44,
                      "docs": [
                        "The preminted amount would be exceeded by the mint operation"
                      ]
                    },
                    {
                      "name": "TokenMetadataCreationFailed",
                      "index": 45,
                      "docs": [
                        "Token metadata could not be created from mint params"
                      ]
                    },
                    {
                      "name": "NoClaimAvailable",
                      "index": 46,
                      "docs": [
                        "There is nothing to claim"
                      ]
                    },
                    {
                      "name": "InvalidEthereumSignature",
                      "index": 47,
                      "docs": [
                        "The ethereum signature is invalid"
                      ]
                    },
                    {
                      "name": "InvalidEthereumAddress",
                      "index": 48,
                      "docs": [
                        "The ethereum address does not match the signature"
                      ]
                    },
                    {
                      "name": "EthereumCollectionIdConversionFailed",
                      "index": 49,
                      "docs": [
                        "The ethereum collection id could not be converted to a native collection id"
                      ]
                    },
                    {
                      "name": "TokenIdReservedForClaim",
                      "index": 50,
                      "docs": [
                        "The token id cannot be minted because it's reserved for claiming"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 909,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "FuelTank"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 250
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DispatchRuleSets",
                  "type": 910
                },
                {
                  "name": "AccountRuleSets",
                  "type": 929
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "name",
                      "type": 250,
                      "typeName": "Name"
                    },
                    {
                      "name": "rule_sets",
                      "type": 910,
                      "typeName": "DispatchRuleSets"
                    },
                    {
                      "name": "total_reserved",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "account_count",
                      "type": 119,
                      "typeName": "u32"
                    },
                    {
                      "name": "user_account_management",
                      "type": 256,
                      "typeName": "Option<UserAccountManagement>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "provides_deposit",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "account_rules",
                      "type": 929,
                      "typeName": "AccountRuleSets"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 910,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 911
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 926,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 911,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "RuleSet"
              ],
              "params": [
                {
                  "name": "Rule",
                  "type": 912
                },
                {
                  "name": "MaxRules",
                  "type": 561
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "rules",
                      "type": 922,
                      "typeName": "BoundedBTreeMap<DispatchRuleKind, Rule, MaxRules>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 912,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "DispatchRuleWrapper"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WhitelistedCallers",
                      "fields": [
                        {
                          "type": 262,
                          "typeName": "WhitelistedCallersRuleOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "WhitelistedCollections",
                      "fields": [
                        {
                          "type": 545,
                          "typeName": "WhitelistedCollectionsRuleOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "MaxFuelBurnPerTransaction",
                      "fields": [
                        {
                          "type": 548,
                          "typeName": "MaxFuelBurnPerTransactionRuleOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "UserFuelBudget",
                      "fields": [
                        {
                          "type": 913,
                          "typeName": "UserFuelBudgetRuleOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TankFuelBudget",
                      "fields": [
                        {
                          "type": 914,
                          "typeName": "TankFuelBudgetRuleOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "RequireToken",
                      "fields": [
                        {
                          "type": 266,
                          "typeName": "RequireTokenRuleOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "PermittedCalls",
                      "fields": [
                        {
                          "type": 552,
                          "typeName": "PermittedCallsRuleOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "PermittedExtrinsics",
                      "fields": [
                        {
                          "type": 915,
                          "typeName": "PermittedExtrinsicsRuleOf<T>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 913,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "user_fuel_budget",
                "UserFuelBudgetRule"
              ],
              "params": [
                {
                  "name": "Budget",
                  "type": 550
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "budget",
                      "type": 550,
                      "typeName": "Budget"
                    },
                    {
                      "name": "user_count",
                      "type": 119,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 914,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "tank_fuel_budget",
                "TankFuelBudgetRule"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "budget",
                      "type": 550,
                      "typeName": "Budget<Balance, BlockNumber>"
                    },
                    {
                      "name": "consumption",
                      "type": 269,
                      "typeName": "Consumption<Balance, BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 915,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "permitted_extrinsics",
                "PermittedExtrinsicsRule"
              ],
              "params": [
                {
                  "name": "ExtrinsicInfo",
                  "type": 916
                },
                {
                  "name": "Max",
                  "type": 559
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 920,
                      "typeName": "BoundedVec<ExtrinsicInfo, Max>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 916,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "ExtrinsicInfo"
              ],
              "params": [
                {
                  "name": "MaxNameLength",
                  "type": 917
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pallet_name",
                      "type": 918,
                      "typeName": "BoundedString<MaxNameLength>"
                    },
                    {
                      "name": "extrinsic_name",
                      "type": 918,
                      "typeName": "BoundedString<MaxNameLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 917,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxExtrinsicNameLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 918,
            "type": {
              "path": [
                "ep_core",
                "frame",
                "types",
                "BoundedString"
              ],
              "params": [
                {
                  "name": "MaxLength",
                  "type": 917
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 919,
                      "typeName": "BoundedVec<u8, MaxLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 919,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 920,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 916
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 921,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 921,
            "type": {
              "def": {
                "sequence": {
                  "type": 916
                }
              }
            }
          },
          {
            "id": 922,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 268
                },
                {
                  "name": "V",
                  "type": 912
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 923,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 923,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 268
                },
                {
                  "name": "V",
                  "type": 912
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 924
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 924,
            "type": {
              "def": {
                "sequence": {
                  "type": 925
                }
              }
            }
          },
          {
            "id": 925,
            "type": {
              "def": {
                "tuple": [
                  268,
                  912
                ]
              }
            }
          },
          {
            "id": 926,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 911
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 927
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 927,
            "type": {
              "def": {
                "sequence": {
                  "type": 928
                }
              }
            }
          },
          {
            "id": 928,
            "type": {
              "def": {
                "tuple": [
                  4,
                  911
                ]
              }
            }
          },
          {
            "id": 929,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 930
                },
                {
                  "name": "V",
                  "type": 931
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 932,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 930,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "AccountRuleKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WhitelistedCallers",
                      "index": 0
                    },
                    {
                      "name": "RequireToken",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 931,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "rules",
                "AccountRuleWrapper"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WhitelistedCallers",
                      "fields": [
                        {
                          "type": 262,
                          "typeName": "WhitelistedCallersRuleOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RequireToken",
                      "fields": [
                        {
                          "type": 266,
                          "typeName": "RequireTokenRuleOf<T>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 932,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 930
                },
                {
                  "name": "V",
                  "type": 931
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 933
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 933,
            "type": {
              "def": {
                "sequence": {
                  "type": 934
                }
              }
            }
          },
          {
            "id": 934,
            "type": {
              "def": {
                "tuple": [
                  930,
                  931
                ]
              }
            }
          },
          {
            "id": 935,
            "type": {
              "def": {
                "tuple": [
                  0,
                  0
                ]
              }
            }
          },
          {
            "id": 936,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "UserAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "RuleSetId",
                  "type": 4
                },
                {
                  "name": "MaxRuleSets",
                  "type": 937
                },
                {
                  "name": "MaxRuleCount",
                  "type": 561
                },
                {
                  "name": "MaxRuleDataLength",
                  "type": 938
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tank_deposit",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "user_deposit",
                      "type": 63,
                      "typeName": "Balance"
                    },
                    {
                      "name": "rule_data_sets",
                      "type": 939,
                      "typeName": "BoundedBTreeMap<RuleSetId, BoundedBTreeMap<DispatchRuleKind, BoundedVec<\nu8, MaxRuleDataLength>, MaxRuleCount>, MaxRuleSets,>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 937,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxRuleSets"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 938,
            "type": {
              "path": [
                "enjin_runtime",
                "MaxAccountRuleDataLength"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 939,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 940
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 945,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 940,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 268
                },
                {
                  "name": "V",
                  "type": 941
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 942,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 941,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 942,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 268
                },
                {
                  "name": "V",
                  "type": 941
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 943
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 943,
            "type": {
              "def": {
                "sequence": {
                  "type": 944
                }
              }
            }
          },
          {
            "id": 944,
            "type": {
              "def": {
                "tuple": [
                  268,
                  941
                ]
              }
            }
          },
          {
            "id": 945,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 940
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 946
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 946,
            "type": {
              "def": {
                "sequence": {
                  "type": 947
                }
              }
            }
          },
          {
            "id": 947,
            "type": {
              "def": {
                "tuple": [
                  4,
                  940
                ]
              }
            }
          },
          {
            "id": 948,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 949
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 950,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 949,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "types",
                "FreezeQueueItem"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RuleSetId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tank_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "rule_set_id",
                      "type": 73,
                      "typeName": "Option<RuleSetId>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 37,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 950,
            "type": {
              "def": {
                "sequence": {
                  "type": 949
                }
              }
            }
          },
          {
            "id": 951,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FuelTankNotFound",
                      "index": 0,
                      "docs": [
                        "Fuel Tank not found"
                      ]
                    },
                    {
                      "name": "FuelTankAlreadyExists",
                      "index": 1,
                      "docs": [
                        "Fuel Tank already exists"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Not enough funds to perform operation"
                      ]
                    },
                    {
                      "name": "UsageRestricted",
                      "index": 3,
                      "docs": [
                        "Fuel tank cannot be used due to restrictions"
                      ]
                    },
                    {
                      "name": "FuelTankOutOfFunds",
                      "index": 4,
                      "docs": [
                        "Fuel tank doesnt have enough funds"
                      ]
                    },
                    {
                      "name": "RuleSetNotFound",
                      "index": 5,
                      "docs": [
                        "The rule set does not exist"
                      ]
                    },
                    {
                      "name": "RuleNotFound",
                      "index": 6,
                      "docs": [
                        "The rule is missing"
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 7,
                      "docs": [
                        "User does not have permission to perform operation"
                      ]
                    },
                    {
                      "name": "AccountAlreadyExists",
                      "index": 8,
                      "docs": [
                        "The account already exists"
                      ]
                    },
                    {
                      "name": "AccountNotFound",
                      "index": 9,
                      "docs": [
                        "The account was not found"
                      ]
                    },
                    {
                      "name": "DestroyWithExistingAccounts",
                      "index": 10,
                      "docs": [
                        "Destroying fuel tank is not possible while it has existing accounts attached"
                      ]
                    },
                    {
                      "name": "DestroyUnfrozenTank",
                      "index": 11,
                      "docs": [
                        "Destroying fuel tank is not possible while it is not frozen"
                      ]
                    },
                    {
                      "name": "MaxRuleSetsExceeded",
                      "index": 12,
                      "docs": [
                        "Max number of rules sets per fuel tank was exceeded"
                      ]
                    },
                    {
                      "name": "UserRuleDataExceededMaxSize",
                      "index": 13,
                      "docs": [
                        "The size of the user rule data is greater than the allowed amount"
                      ]
                    },
                    {
                      "name": "DecodeUserRuleDataFailed",
                      "index": 14,
                      "docs": [
                        "The user rule data could not be decoded"
                      ]
                    },
                    {
                      "name": "FreezeQueueFull",
                      "index": 15,
                      "docs": [
                        "The queue for fuel tank and rule set freezing is full"
                      ]
                    },
                    {
                      "name": "RequiresFrozenTankOrRuleset",
                      "index": 16,
                      "docs": [
                        "Either the tank or ruleset must be frozen for this operation"
                      ]
                    },
                    {
                      "name": "RequiresFrozenTank",
                      "index": 17,
                      "docs": [
                        "The fuel tank must be frozen for this operation"
                      ]
                    },
                    {
                      "name": "MissingRequiredRule",
                      "index": 18,
                      "docs": [
                        "A rule that is required for this operation does not exist"
                      ]
                    },
                    {
                      "name": "MissingRequiredRuleUserData",
                      "index": 19,
                      "docs": [
                        "User data for the required rule does not exist"
                      ]
                    },
                    {
                      "name": "InvalidRuleSet",
                      "index": 20,
                      "docs": [
                        "The rule set of the fuel tank is misconfigured. This error should never occur."
                      ]
                    },
                    {
                      "name": "AccountContainsRuleData",
                      "index": 21,
                      "docs": [
                        "A user cannot remove an account that is storing data for a rule"
                      ]
                    },
                    {
                      "name": "CannotRemoveRuleThatIsStoringAccountData",
                      "index": 22,
                      "docs": [
                        "A rule cannot be removed from a rule set if it is storing data on any account"
                      ]
                    },
                    {
                      "name": "DuplicateRuleKinds",
                      "index": 23,
                      "docs": [
                        "A fuel tank cannot have more than one rule of the same kind"
                      ]
                    },
                    {
                      "name": "MintDepositCalculationError",
                      "index": 24,
                      "docs": [
                        "Problems calculating the mint deposit for a call"
                      ]
                    },
                    {
                      "name": "FuelTankFrozen",
                      "index": 25,
                      "docs": [
                        "The fuel tank is frozen"
                      ]
                    },
                    {
                      "name": "CallerDoesNotHaveRuleSetTokenBalance",
                      "index": 26,
                      "docs": [
                        "The user does not have the token required by rule set"
                      ]
                    },
                    {
                      "name": "NoDataToRemove",
                      "index": 27,
                      "docs": [
                        "The user does not have any data stored for rule set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 952,
            "type": {
              "path": [
                "pallet_extrinsic_pause",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotPauseSelf",
                      "index": 0,
                      "docs": [
                        "Cannot pause this pallet or it's extrinsic"
                      ]
                    },
                    {
                      "name": "CannotProcessInput",
                      "index": 1,
                      "docs": [
                        "Cannot read the pallet or extrinsic name"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Pallet's error type."
              ]
            }
          },
          {
            "id": 953,
            "type": {
              "path": [
                "pallet_marketplace",
                "types",
                "MarketPlaceInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "protocol_fee",
                      "type": 44,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 954,
            "type": {
              "path": [
                "pallet_marketplace",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToFill",
                      "index": 0,
                      "docs": [
                        "the order cannot be filled"
                      ]
                    },
                    {
                      "name": "ListingNotFound",
                      "index": 1,
                      "docs": [
                        "The listing does not exist"
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The caller does not have permission for this operation"
                      ]
                    },
                    {
                      "name": "MaxRoundingErrorExceeded",
                      "index": 3,
                      "docs": [
                        "The max rounding error was exceeded"
                      ]
                    },
                    {
                      "name": "LowBaseCurrencyBalance",
                      "index": 4,
                      "docs": [
                        "The base currency balance is too low"
                      ]
                    },
                    {
                      "name": "LowTokenBalance",
                      "index": 5,
                      "docs": [
                        "The token balance is too low"
                      ]
                    },
                    {
                      "name": "TransferParamCreationFailed",
                      "index": 6,
                      "docs": [
                        "Transfer params could not be created"
                      ]
                    },
                    {
                      "name": "TakeValueUnderMinimum",
                      "index": 7,
                      "docs": [
                        "The take value is under the minimum requirement"
                      ]
                    },
                    {
                      "name": "ListingAlreadyExists",
                      "index": 8,
                      "docs": [
                        "A listing with this id already exists"
                      ]
                    },
                    {
                      "name": "InvalidAuctionStart",
                      "index": 9,
                      "docs": [
                        "The start time of the auction must be greater than the current block plus the",
                        "minimum requirement"
                      ]
                    },
                    {
                      "name": "InvalidAuctionEnd",
                      "index": 10,
                      "docs": [
                        "The end time of the auction must be after the start"
                      ]
                    },
                    {
                      "name": "InactiveAuction",
                      "index": 11,
                      "docs": [
                        "Cannot bid on an auction that has not started or is over"
                      ]
                    },
                    {
                      "name": "AuctionNotOver",
                      "index": 12,
                      "docs": [
                        "Cannot finalize an auction that is not over"
                      ]
                    },
                    {
                      "name": "ListingIsWrongType",
                      "index": 13,
                      "docs": [
                        "An action was taken that is not compatible with the listing's type."
                      ]
                    },
                    {
                      "name": "InvalidAmount",
                      "index": 14,
                      "docs": [
                        "The amount is invalid"
                      ]
                    },
                    {
                      "name": "InvalidPrice",
                      "index": 15,
                      "docs": [
                        "The price is invalid"
                      ]
                    },
                    {
                      "name": "ListingForbidden",
                      "index": 16,
                      "docs": [
                        "Listing is forbidden for this token"
                      ]
                    },
                    {
                      "name": "NoCurrency",
                      "index": 17,
                      "docs": [
                        "Neither the make side or the take side of the listing is considered a currency"
                      ]
                    },
                    {
                      "name": "ListingNotActive",
                      "index": 18,
                      "docs": [
                        "The listing has not crossed the mandatory delay before its considered active"
                      ]
                    },
                    {
                      "name": "CurrencyNotAllowedAsRoyalty",
                      "index": 19,
                      "docs": [
                        "The currency is not allowed to be used as a royalty payment"
                      ]
                    },
                    {
                      "name": "BuyerIsSeller",
                      "index": 20,
                      "docs": [
                        "The seller is not allowed to buy their own listing"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The error for this pallet"
              ]
            }
          },
          {
            "id": 955,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 575
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 956,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 956,
            "type": {
              "def": {
                "sequence": {
                  "type": 575
                }
              }
            }
          },
          {
            "id": 957,
            "type": {
              "path": [
                "pallet_beefy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 0,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 1,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 2,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 958,
            "type": {
              "path": [
                "sp_consensus_beefy",
                "mmr",
                "BeefyAuthoritySet"
              ],
              "params": [
                {
                  "name": "MerkleRoot",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 11,
                      "typeName": "crate::ValidatorSetId"
                    },
                    {
                      "name": "len",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "root",
                      "type": 12,
                      "typeName": "MerkleRoot"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 959,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 960
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 962,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 960,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 961
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 961
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 961,
            "type": {
              "path": [
                "pallet_scheduler",
                "Scheduled"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 1
                },
                {
                  "name": "Call",
                  "type": 291
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 415
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 286,
                      "typeName": "Option<Name>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 291,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 584,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 415,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 962,
            "type": {
              "def": {
                "sequence": {
                  "type": 960
                }
              }
            }
          },
          {
            "id": 963,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    },
                    {
                      "name": "Named",
                      "index": 4,
                      "docs": [
                        "Attempt to use a non-named function on a named task."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 964,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 370,
                          "typeName": "(AccountId, Balance)"
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 853,
                          "typeName": "Option<(AccountId, Balance)>"
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "len",
                          "type": 73,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 965,
            "type": {
              "def": {
                "tuple": [
                  12,
                  4
                ]
              }
            }
          },
          {
            "id": 966,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 967,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooBig",
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 968,
            "type": {
              "def": {
                "tuple": [
                  0,
                  290
                ]
              }
            }
          },
          {
            "id": 969,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PollIndex",
                  "type": 4
                },
                {
                  "name": "MaxVotes",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Casting",
                      "fields": [
                        {
                          "type": 970,
                          "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "type": 976,
                          "typeName": "Delegating<Balance, AccountId, BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 970,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Casting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PollIndex",
                  "type": 4
                },
                {
                  "name": "MaxVotes",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 971,
                      "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>"
                    },
                    {
                      "name": "delegations",
                      "type": 974,
                      "typeName": "Delegations<Balance>"
                    },
                    {
                      "name": "prior",
                      "type": 975,
                      "typeName": "PriorLock<BlockNumber, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 971,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 972
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 973,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 972,
            "type": {
              "def": {
                "tuple": [
                  4,
                  587
                ]
              }
            }
          },
          {
            "id": 973,
            "type": {
              "def": {
                "sequence": {
                  "type": 972
                }
              }
            }
          },
          {
            "id": 974,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 975,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 976,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Delegating"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "conviction",
                      "type": 589,
                      "typeName": "Conviction"
                    },
                    {
                      "name": "delegations",
                      "type": 974,
                      "typeName": "Delegations<Balance>"
                    },
                    {
                      "name": "prior",
                      "type": 975,
                      "typeName": "PriorLock<BlockNumber, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 977,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 978
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 979,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 978,
            "type": {
              "def": {
                "tuple": [
                  290,
                  6
                ]
              }
            }
          },
          {
            "id": 979,
            "type": {
              "def": {
                "sequence": {
                  "type": 978
                }
              }
            }
          },
          {
            "id": 980,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOngoing",
                      "index": 0,
                      "docs": [
                        "Poll is not ongoing."
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "index": 1,
                      "docs": [
                        "The given account did not vote on the poll."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "NoPermissionYet",
                      "index": 3,
                      "docs": [
                        "The actor has no permission to conduct the action right now but will do in the future."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 4,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "AlreadyVoting",
                      "index": 5,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 6,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "index": 7,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "index": 8,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 9,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "ClassNeeded",
                      "index": 10,
                      "docs": [
                        "The class must be supplied since it is not easily determinable from the state."
                      ]
                    },
                    {
                      "name": "BadClass",
                      "index": 11,
                      "docs": [
                        "The class ID supplied is invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 981,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 290
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 415
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 291
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 639
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 285
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 982,
                          "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 982,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 290
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 415
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 291
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 639
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 285
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "track",
                      "type": 290,
                      "typeName": "TrackId"
                    },
                    {
                      "name": "origin",
                      "type": 415,
                      "typeName": "RuntimeOrigin"
                    },
                    {
                      "name": "proposal",
                      "type": 291,
                      "typeName": "Call"
                    },
                    {
                      "name": "enactment",
                      "type": 592,
                      "typeName": "DispatchTime<Moment>"
                    },
                    {
                      "name": "submitted",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "submission_deposit",
                      "type": 983,
                      "typeName": "Deposit<AccountId, Balance>"
                    },
                    {
                      "name": "decision_deposit",
                      "type": 984,
                      "typeName": "Option<Deposit<AccountId, Balance>>"
                    },
                    {
                      "name": "deciding",
                      "type": 985,
                      "typeName": "Option<DecidingStatus<Moment>>"
                    },
                    {
                      "name": "tally",
                      "type": 639,
                      "typeName": "Tally"
                    },
                    {
                      "name": "in_queue",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "alarm",
                      "type": 987,
                      "typeName": "Option<(Moment, ScheduleAddress)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 983,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "Deposit"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 984,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 983
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 983
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 985,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 986
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 986
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 986,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "DecidingStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "since",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "confirming",
                      "type": 73,
                      "typeName": "Option<BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 987,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 988
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 988
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 988,
            "type": {
              "def": {
                "tuple": [
                  4,
                  285
                ]
              }
            }
          },
          {
            "id": 989,
            "type": {
              "def": {
                "sequence": {
                  "type": 990
                }
              }
            }
          },
          {
            "id": 990,
            "type": {
              "def": {
                "tuple": [
                  290,
                  991
                ]
              }
            }
          },
          {
            "id": 991,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "TrackInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Moment",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 655,
                      "typeName": "&'static str"
                    },
                    {
                      "name": "max_deciding",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "decision_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "prepare_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "decision_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "confirm_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "min_enactment_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "min_approval",
                      "type": 992,
                      "typeName": "Curve"
                    },
                    {
                      "name": "min_support",
                      "type": 992,
                      "typeName": "Curve"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 992,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "Curve"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LinearDecreasing",
                      "fields": [
                        {
                          "name": "length",
                          "type": 42,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "floor",
                          "type": 42,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "ceil",
                          "type": 42,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "SteppedDecreasing",
                      "fields": [
                        {
                          "name": "begin",
                          "type": 42,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "end",
                          "type": 42,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "step",
                          "type": 42,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "period",
                          "type": 42,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reciprocal",
                      "fields": [
                        {
                          "name": "factor",
                          "type": 993,
                          "typeName": "FixedI64"
                        },
                        {
                          "name": "x_offset",
                          "type": 993,
                          "typeName": "FixedI64"
                        },
                        {
                          "name": "y_offset",
                          "type": 993,
                          "typeName": "FixedI64"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 993,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedI64"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 994,
                      "typeName": "i64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 994,
            "type": {
              "def": {
                "primitive": "i64"
              }
            }
          },
          {
            "id": 995,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOngoing",
                      "index": 0,
                      "docs": [
                        "Referendum is not ongoing."
                      ]
                    },
                    {
                      "name": "HasDeposit",
                      "index": 1,
                      "docs": [
                        "Referendum's decision deposit is already paid."
                      ]
                    },
                    {
                      "name": "BadTrack",
                      "index": 2,
                      "docs": [
                        "The track identifier given was invalid."
                      ]
                    },
                    {
                      "name": "Full",
                      "index": 3,
                      "docs": [
                        "There are already a full complement of referenda in progress for this track."
                      ]
                    },
                    {
                      "name": "QueueEmpty",
                      "index": 4,
                      "docs": [
                        "The queue of the track is empty."
                      ]
                    },
                    {
                      "name": "BadReferendum",
                      "index": 5,
                      "docs": [
                        "The referendum index provided is invalid in this context."
                      ]
                    },
                    {
                      "name": "NothingToDo",
                      "index": 6,
                      "docs": [
                        "There was nothing to do in the advancement."
                      ]
                    },
                    {
                      "name": "NoTrack",
                      "index": 7,
                      "docs": [
                        "No track exists for the proposal origin."
                      ]
                    },
                    {
                      "name": "Unfinished",
                      "index": 8,
                      "docs": [
                        "Any deposit cannot be refunded until after the decision is over."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 9,
                      "docs": [
                        "The deposit refunder is not the depositor."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 10,
                      "docs": [
                        "The deposit cannot be refunded since none was made."
                      ]
                    },
                    {
                      "name": "BadStatus",
                      "index": 11,
                      "docs": [
                        "The referendum status is invalid for this operation."
                      ]
                    },
                    {
                      "name": "PreimageNotExist",
                      "index": 12,
                      "docs": [
                        "The preimage does not exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 996,
            "type": {
              "path": [
                "pallet_whitelist",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnavailablePreImage",
                      "index": 0,
                      "docs": [
                        "The preimage of the call hash could not be loaded."
                      ]
                    },
                    {
                      "name": "UndecodableCall",
                      "index": 1,
                      "docs": [
                        "The call could not be decoded."
                      ]
                    },
                    {
                      "name": "InvalidCallWeightWitness",
                      "index": 2,
                      "docs": [
                        "The weight of the decoded call was higher than the witness."
                      ]
                    },
                    {
                      "name": "CallIsNotWhitelisted",
                      "index": 3,
                      "docs": [
                        "The call was not whitelisted."
                      ]
                    },
                    {
                      "name": "CallAlreadyWhitelisted",
                      "index": 4,
                      "docs": [
                        "The call was already whitelisted; No-Op."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 997,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "MemberRecord"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "rank",
                      "type": 290,
                      "typeName": "Rank"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 998,
            "type": {
              "def": {
                "tuple": [
                  290,
                  0
                ]
              }
            }
          },
          {
            "id": 999,
            "type": {
              "def": {
                "tuple": [
                  290,
                  4
                ]
              }
            }
          },
          {
            "id": 1000,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1001,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Account is already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Account is not a member."
                      ]
                    },
                    {
                      "name": "NotPolling",
                      "index": 2,
                      "docs": [
                        "The given poll index is unknown or has closed."
                      ]
                    },
                    {
                      "name": "Ongoing",
                      "index": 3,
                      "docs": [
                        "The given poll is still ongoing."
                      ]
                    },
                    {
                      "name": "NoneRemaining",
                      "index": 4,
                      "docs": [
                        "There are no further records to be removed."
                      ]
                    },
                    {
                      "name": "Corruption",
                      "index": 5,
                      "docs": [
                        "Unexpected error in state."
                      ]
                    },
                    {
                      "name": "RankTooLow",
                      "index": 6,
                      "docs": [
                        "The member's rank is too low to vote."
                      ]
                    },
                    {
                      "name": "InvalidWitness",
                      "index": 7,
                      "docs": [
                        "The information provided is incorrect."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 8,
                      "docs": [
                        "The origin is not sufficiently privileged to do the operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 1002,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 290
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 415
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 291
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 647
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 285
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 1003,
                          "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 984,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1003,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 290
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 415
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 291
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 647
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 285
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "track",
                      "type": 290,
                      "typeName": "TrackId"
                    },
                    {
                      "name": "origin",
                      "type": 415,
                      "typeName": "RuntimeOrigin"
                    },
                    {
                      "name": "proposal",
                      "type": 291,
                      "typeName": "Call"
                    },
                    {
                      "name": "enactment",
                      "type": 592,
                      "typeName": "DispatchTime<Moment>"
                    },
                    {
                      "name": "submitted",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "submission_deposit",
                      "type": 983,
                      "typeName": "Deposit<AccountId, Balance>"
                    },
                    {
                      "name": "decision_deposit",
                      "type": 984,
                      "typeName": "Option<Deposit<AccountId, Balance>>"
                    },
                    {
                      "name": "deciding",
                      "type": 985,
                      "typeName": "Option<DecidingStatus<Moment>>"
                    },
                    {
                      "name": "tally",
                      "type": 647,
                      "typeName": "Tally"
                    },
                    {
                      "name": "in_queue",
                      "type": 37,
                      "typeName": "bool"
                    },
                    {
                      "name": "alarm",
                      "type": 987,
                      "typeName": "Option<(Moment, ScheduleAddress)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1004,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 285
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 653,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1005,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOngoing",
                      "index": 0,
                      "docs": [
                        "Referendum is not ongoing."
                      ]
                    },
                    {
                      "name": "HasDeposit",
                      "index": 1,
                      "docs": [
                        "Referendum's decision deposit is already paid."
                      ]
                    },
                    {
                      "name": "BadTrack",
                      "index": 2,
                      "docs": [
                        "The track identifier given was invalid."
                      ]
                    },
                    {
                      "name": "Full",
                      "index": 3,
                      "docs": [
                        "There are already a full complement of referenda in progress for this track."
                      ]
                    },
                    {
                      "name": "QueueEmpty",
                      "index": 4,
                      "docs": [
                        "The queue of the track is empty."
                      ]
                    },
                    {
                      "name": "BadReferendum",
                      "index": 5,
                      "docs": [
                        "The referendum index provided is invalid in this context."
                      ]
                    },
                    {
                      "name": "NothingToDo",
                      "index": 6,
                      "docs": [
                        "There was nothing to do in the advancement."
                      ]
                    },
                    {
                      "name": "NoTrack",
                      "index": 7,
                      "docs": [
                        "No track exists for the proposal origin."
                      ]
                    },
                    {
                      "name": "Unfinished",
                      "index": 8,
                      "docs": [
                        "Any deposit cannot be refunded until after the decision is over."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 9,
                      "docs": [
                        "The deposit refunder is not the depositor."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 10,
                      "docs": [
                        "The deposit cannot be refunded since none was made."
                      ]
                    },
                    {
                      "name": "BadStatus",
                      "index": 11,
                      "docs": [
                        "The referendum status is invalid for this operation."
                      ]
                    },
                    {
                      "name": "PreimageNotExist",
                      "index": 12,
                      "docs": [
                        "The preimage does not exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 1006,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 1007,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "info",
                      "type": 598,
                      "typeName": "IdentityInfo<MaxAdditionalFields>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1007,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1008
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1009,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1008,
            "type": {
              "def": {
                "tuple": [
                  4,
                  635
                ]
              }
            }
          },
          {
            "id": 1009,
            "type": {
              "def": {
                "sequence": {
                  "type": 1008
                }
              }
            }
          },
          {
            "id": 1010,
            "type": {
              "def": {
                "tuple": [
                  6,
                  1011
                ]
              }
            }
          },
          {
            "id": 1011,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 78,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1012,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1013
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1015,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1013,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1014
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1014
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1014,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fields",
                      "type": 633,
                      "typeName": "IdentityFields"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1015,
            "type": {
              "def": {
                "sequence": {
                  "type": 1013
                }
              }
            }
          },
          {
            "id": 1016,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    },
                    {
                      "name": "JudgementForDifferentIdentity",
                      "index": 16,
                      "docs": [
                        "The provided judgement was for a different identity."
                      ]
                    },
                    {
                      "name": "JudgementPaymentFailed",
                      "index": 17,
                      "docs": [
                        "Error that occurs when there is an issue paying for judgement."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 1017,
            "type": {
              "path": [
                "pallet_vote_manager",
                "types",
                "BalanceToUnlock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "TokenId",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "currency",
                      "type": 637,
                      "typeName": "VoteCurrency<TokenId>"
                    },
                    {
                      "name": "unlocks_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1018,
            "type": {
              "path": [
                "pallet_vote_manager",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyDelegating",
                      "index": 0,
                      "docs": [
                        "The account is already delegating their vote."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 1,
                      "docs": [
                        "The account has insufficient funds to cast the vote."
                      ]
                    },
                    {
                      "name": "NotOngoing",
                      "index": 2,
                      "docs": [
                        "The maximum number of votes for this referendum has been reached."
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "index": 3,
                      "docs": [
                        "The account is not a registered voter for the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 4,
                      "docs": [
                        "The account does not have permission to perform the operation."
                      ]
                    },
                    {
                      "name": "UnlockVoteNotFound",
                      "index": 5,
                      "docs": [
                        "The vote unlock information was not found."
                      ]
                    },
                    {
                      "name": "UnlockPeriodNotPassed",
                      "index": 6,
                      "docs": [
                        "The unlock period for the vote has not yet passed."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 7,
                      "docs": [
                        "Max votes exceeded"
                      ]
                    },
                    {
                      "name": "ClassNeeded",
                      "index": 8,
                      "docs": [
                        "Class info missing"
                      ]
                    },
                    {
                      "name": "NoPermissionYet",
                      "index": 9,
                      "docs": [
                        "The account does not have permission, usually related to unlock periods"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 1019,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 309
                },
                {
                  "name": "Call",
                  "type": 292
                },
                {
                  "name": "Signature",
                  "type": 479
                },
                {
                  "name": "Extra",
                  "type": 1020
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1020,
            "type": {
              "def": {
                "tuple": [
                  1021,
                  1022,
                  1023,
                  1024,
                  1025,
                  1027,
                  1028,
                  1029,
                  1030
                ]
              }
            }
          },
          {
            "id": 1021,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 1022,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 1023,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 1024,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 1025,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1026,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1026,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1027,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 119,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1028,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 1029,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 63,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1030,
            "type": {
              "path": [
                "pallet_fuel_tanks",
                "extension",
                "CheckFuelTank"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 18
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 12,
                    "value": 653
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 654
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 651
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 293
          },
          "event": {
            "ty": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 656,
              "value": [
                2,
                3,
                129,
                93,
                0,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                194,
                233,
                23,
                27,
                0,
                1,
                11,
                144,
                213,
                25,
                144,
                88,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                189,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                191,
                1,
                0,
                0,
                194,
                233,
                23,
                27,
                0,
                1,
                11,
                144,
                93,
                108,
                250,
                204,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                253,
                1,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                194,
                233,
                23,
                27,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 659,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 661,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 662,
              "value": [
                20,
                101,
                110,
                106,
                105,
                110,
                20,
                101,
                110,
                106,
                105,
                110,
                1,
                0,
                0,
                0,
                120,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                60,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                203,
                202,
                37,
                227,
                159,
                20,
                35,
                135,
                2,
                0,
                0,
                0,
                73,
                234,
                175,
                27,
                84,
                138,
                12,
                176,
                2,
                0,
                0,
                0,
                145,
                213,
                223,
                24,
                176,
                210,
                207,
                88,
                2,
                0,
                0,
                0,
                104,
                122,
                212,
                74,
                211,
                127,
                3,
                194,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                237,
                153,
                197,
                172,
                178,
                94,
                237,
                245,
                3,
                0,
                0,
                0,
                175,
                44,
                2,
                151,
                162,
                62,
                109,
                61,
                4,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                243,
                255,
                20,
                213,
                171,
                82,
                112,
                89,
                3,
                0,
                0,
                0,
                4,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 290,
              "value": [
                87,
                8
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 666
          },
          "index": 0
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "entries": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "ty": {
                  "Plain": 667
                },
                "default": [
                  0
                ],
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 297
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 11,
              "value": [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 2
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "entries": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 668
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 303
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 303
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "ty": {
                  "Plain": 1
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 305
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "ty": {
                  "Plain": 1
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 668
                },
                "default": [
                  0
                ],
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 671
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "ty": {
                  "Plain": 673
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "ty": {
                  "Plain": 286
                },
                "default": [
                  0
                ],
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_finalize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "ty": {
                  "Plain": 285
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "ty": {
                  "Plain": 679
                },
                "default": [
                  0
                ],
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "ty": {
                  "Plain": 679
                },
                "default": [
                  0
                ],
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              },
              {
                "name": "SkippedEpochs",
                "modifier": "Default",
                "ty": {
                  "Plain": 680
                },
                "default": [
                  0
                ],
                "docs": [
                  " A list of the last 100 skipped epochs and the corresponding session index",
                  " when the epoch was skipped.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof",
                  " must contains a key-ownership proof for a given session, therefore we need a",
                  " way to tie together sessions and epoch indices, i.e. we need to validate that",
                  " a validator was the owner of a given key on a given session, and what the",
                  " active epoch index was during that session."
                ]
              }
            ]
          },
          "calls": {
            "ty": 298
          },
          "event": null,
          "constants": [
            {
              "name": "EpochDuration",
              "ty": 11,
              "value": [
                96,
                9,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "ty": 11,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "error": {
            "ty": 683
          },
          "index": 3
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 4
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 5
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 684
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 688
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 691
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 691
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 308
          },
          "event": {
            "ty": 30
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                138,
                93,
                120,
                69,
                99,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            },
            {
              "name": "MaxHolds",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of holds that can exist on an account at any time."
              ]
            },
            {
              "name": "MaxFreezes",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "error": {
            "ty": 694
          },
          "index": 6
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "entries": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 12,
                    "value": 695
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 696,
                    "value": 652
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 32
          },
          "constants": [],
          "error": null,
          "index": 7
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "entries": [
              {
                "name": "Round",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  1,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "ty": {
                  "Plain": 39
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "ty": {
                  "Plain": 697
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                  "",
                  " Always sorted by score."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "ty": {
                  "Plain": 699
                },
                "default": [
                  0
                ],
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "ty": {
                  "Plain": 364
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "ty": {
                  "Plain": 703
                },
                "default": [
                  0
                ],
                "docs": [
                  " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                  " value in `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 706
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 311
          },
          "event": {
            "ty": 34
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "ty": 4,
              "value": [
                88,
                2,
                0,
                0
              ],
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "ty": 4,
              "value": [
                88,
                2,
                0,
                0
              ],
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "BetterSignedThreshold",
              "ty": 42,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Signed phase."
              ]
            },
            {
              "name": "BetterUnsignedThreshold",
              "ty": 42,
              "value": [
                160,
                134,
                1,
                0
              ],
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Unsigned phase."
              ]
            },
            {
              "name": "OffchainRepeat",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "ty": 11,
              "value": [
                254,
                255,
                255,
                255,
                255,
                255,
                255,
                127
              ],
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "ty": 9,
              "value": [
                11,
                208,
                148,
                185,
                120,
                88,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                189
              ],
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                " this value."
              ]
            },
            {
              "name": "SignedMaxRefunds",
              "ty": 4,
              "value": [
                3,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of unchecked solutions to refund the call fee for."
              ]
            },
            {
              "name": "SignedRewardBase",
              "ty": 6,
              "value": [
                0,
                0,
                122,
                34,
                193,
                200,
                177,
                34,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                122,
                34,
                193,
                200,
                177,
                34,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "ty": 6,
              "value": [
                0,
                128,
                98,
                23,
                94,
                209,
                88,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "MaxElectingVoters",
              "ty": 4,
              "value": [
                64,
                156,
                0,
                0
              ],
              "docs": [
                " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
                " are only over a single block, but once multi-block elections are introduced they will",
                " take place over multiple blocks."
              ]
            },
            {
              "name": "MaxElectableTargets",
              "ty": 290,
              "value": [
                16,
                39
              ],
              "docs": [
                " The maximum number of electable targets to put in the snapshot."
              ]
            },
            {
              "name": "MaxWinners",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum number of winners that can be elected by this `ElectionProvider`",
                " implementation.",
                "",
                " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
              ]
            },
            {
              "name": "MinerMaxLength",
              "ty": 4,
              "value": [
                0,
                0,
                54,
                0
              ],
              "docs": []
            },
            {
              "name": "MinerMaxWeight",
              "ty": 9,
              "value": [
                11,
                208,
                148,
                185,
                120,
                88,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                189
              ],
              "docs": []
            },
            {
              "name": "MinerMaxVotesPerVoter",
              "ty": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MinerMaxWinners",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 707
          },
          "index": 8
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "entries": [
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The ideal number of active validators."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "ty": {
                  "Plain": 78
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "MinimumActiveStake",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active nominator stake of the last successful election."
                ]
              },
              {
                "name": "MinCommission",
                "modifier": "Default",
                "ty": {
                  "Plain": 42
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of commission that validators can set.",
                  "",
                  " If set to `0`, no limit exists."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 708
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 372
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Where the reward payment should be made. Keyed by stash.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 43
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 713
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The map from nominator stash key to their nomination preferences, namely the validators that",
                  " they wish to support.",
                  "",
                  " Note that the keys of this storage map might become non-decodable in case the",
                  " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
                  " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                  " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                  " nominators will effectively not-exist, until they re-submit their preferences such that it",
                  " is within the bounds of the newly set `Config::MaxNominations`.",
                  "",
                  " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                  " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                  " number of keys that exist.",
                  "",
                  " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                  " [`Call::chill_other`] dispatchable by anyone.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "ty": {
                  "Plain": 714
                },
                "default": [
                  0
                ],
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 62
                  }
                },
                "default": [
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 62
                  }
                },
                "default": [
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 43
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 716
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "ty": {
                  "Plain": 45
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "ty": {
                  "Plain": 42
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 720
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "ty": {
                  "Plain": 653
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 722
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 723
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 719,
                    "value": 724
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 725
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "ty": {
                  "Plain": 374
                },
                "default": [
                  0
                ],
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 371
          },
          "event": {
            "ty": 41
          },
          "constants": [
            {
              "name": "MaxNominations",
              "ty": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of nominations per nominator."
              ]
            },
            {
              "name": "HistoryDepth",
              "ty": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras to keep in history.",
                "",
                " Following information is kept for eras in `[current_era -",
                " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                " `ErasTotalStake`, `ErasStartSessionIndex`,",
                " `StakingLedger.claimed_rewards`.",
                "",
                " Must be more than the number of eras delayed by session.",
                " I.e. active era must always be in history. I.e. `active_era >",
                " current_era - history_depth` must be guaranteed.",
                "",
                " If migrating an existing pallet from storage value to config value,",
                " this should be set to same value or greater as in storage.",
                "",
                " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                " item `StakingLedger.claimed_rewards`. Setting this value lower than",
                " the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a migration.",
                " The test `reducing_history_depth_abrupt` shows this effect."
              ]
            },
            {
              "name": "SessionsPerEra",
              "ty": 4,
              "value": [
                6,
                0,
                0,
                0
              ],
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "ty": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "ty": 4,
              "value": [
                27,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "MaxUnlockingChunks",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                " have. Effectively determines how many unique eras a staker may be",
                " unbonding in.",
                "",
                " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                " lower than the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a runtime",
                " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                " this effect."
              ]
            }
          ],
          "error": {
            "ty": 727
          },
          "index": 9
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 78
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 728
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 375
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 381
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 730,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 380
          },
          "event": {
            "ty": 46
          },
          "constants": [],
          "error": {
            "ty": 732
          },
          "index": 10
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": "Default",
                "ty": {
                  "Plain": 733
                },
                "default": [
                  0
                ],
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 734
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "ty": {
                  "Plain": 285
                },
                "default": [
                  0
                ],
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "ty": 385
          },
          "event": {
            "ty": 47
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " Max Authorities in use"
              ]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "ty": 11,
              "value": [
                168,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "error": {
            "ty": 736
          },
          "index": 11
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 737
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Deactivated",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 738
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 396
          },
          "event": {
            "ty": 52
          },
          "constants": [
            {
              "name": "ProposalBond",
              "ty": 739,
              "value": [
                80,
                195,
                0,
                0
              ],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "ty": 6,
              "value": [
                0,
                0,
                64,
                178,
                186,
                201,
                224,
                25,
                30,
                2,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "ty": 77,
              "value": [
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "ty": 739,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "ty": 740,
              "value": [
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": {
            "ty": 741
          },
          "index": 12
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 742
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 743
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 53
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 13
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 397
          },
          "event": {
            "ty": 54
          },
          "constants": [],
          "error": {
            "ty": 744
          },
          "index": 14
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "entries": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "ty": {
                  "Plain": 745
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 285,
                    "value": 747
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": {
            "ty": 398
          },
          "event": {
            "ty": 57
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "ty": 11,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "error": {
            "ty": 752
          },
          "index": 15
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 16
        },
        {
          "name": "VoterList",
          "storage": {
            "prefix": "VoterList",
            "entries": [
              {
                "name": "ListNodes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 753
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A single node, within some bag.",
                  "",
                  " Nodes store links forward and back within their respective bags."
                ]
              },
              {
                "name": "CounterForListNodes",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ListBags",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 754
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A bag stored in storage.",
                  "",
                  " Stores a `Bag` struct, which stores head and tail pointers to itself."
                ]
              }
            ]
          },
          "calls": {
            "ty": 405
          },
          "event": {
            "ty": 66
          },
          "constants": [
            {
              "name": "BagThresholds",
              "ty": 755,
              "value": [
                33,
                3,
                171,
                47,
                184,
                68,
                0,
                0,
                0,
                0,
                213,
                225,
                84,
                77,
                0,
                0,
                0,
                0,
                67,
                224,
                5,
                87,
                0,
                0,
                0,
                0,
                76,
                203,
                237,
                97,
                0,
                0,
                0,
                0,
                46,
                154,
                51,
                110,
                0,
                0,
                0,
                0,
                70,
                38,
                3,
                124,
                0,
                0,
                0,
                0,
                188,
                199,
                141,
                139,
                0,
                0,
                0,
                0,
                206,
                5,
                11,
                157,
                0,
                0,
                0,
                0,
                57,
                93,
                185,
                176,
                0,
                0,
                0,
                0,
                122,
                31,
                223,
                198,
                0,
                0,
                0,
                0,
                11,
                110,
                203,
                223,
                0,
                0,
                0,
                0,
                29,
                85,
                215,
                251,
                0,
                0,
                0,
                0,
                193,
                9,
                103,
                27,
                1,
                0,
                0,
                0,
                241,
                79,
                235,
                62,
                1,
                0,
                0,
                0,
                117,
                13,
                227,
                102,
                1,
                0,
                0,
                0,
                70,
                15,
                221,
                147,
                1,
                0,
                0,
                0,
                200,
                7,
                122,
                198,
                1,
                0,
                0,
                0,
                238,
                204,
                110,
                255,
                1,
                0,
                0,
                0,
                87,
                222,
                134,
                63,
                2,
                0,
                0,
                0,
                99,
                60,
                167,
                135,
                2,
                0,
                0,
                0,
                100,
                154,
                209,
                216,
                2,
                0,
                0,
                0,
                94,
                247,
                39,
                52,
                3,
                0,
                0,
                0,
                36,
                170,
                240,
                154,
                3,
                0,
                0,
                0,
                85,
                239,
                154,
                14,
                4,
                0,
                0,
                0,
                115,
                9,
                196,
                144,
                4,
                0,
                0,
                0,
                111,
                5,
                61,
                35,
                5,
                0,
                0,
                0,
                59,
                56,
                17,
                200,
                5,
                0,
                0,
                0,
                155,
                140,
                141,
                129,
                6,
                0,
                0,
                0,
                72,
                187,
                72,
                82,
                7,
                0,
                0,
                0,
                199,
                138,
                44,
                61,
                8,
                0,
                0,
                0,
                254,
                55,
                128,
                69,
                9,
                0,
                0,
                0,
                183,
                44,
                244,
                110,
                10,
                0,
                0,
                0,
                235,
                45,
                175,
                189,
                11,
                0,
                0,
                0,
                237,
                48,
                93,
                54,
                13,
                0,
                0,
                0,
                115,
                12,
                64,
                222,
                14,
                0,
                0,
                0,
                35,
                65,
                66,
                187,
                16,
                0,
                0,
                0,
                189,
                28,
                12,
                212,
                18,
                0,
                0,
                0,
                105,
                131,
                27,
                48,
                21,
                0,
                0,
                0,
                37,
                180,
                222,
                215,
                23,
                0,
                0,
                0,
                249,
                103,
                210,
                212,
                26,
                0,
                0,
                0,
                137,
                183,
                163,
                49,
                30,
                0,
                0,
                0,
                43,
                64,
                86,
                250,
                33,
                0,
                0,
                0,
                195,
                16,
                111,
                60,
                38,
                0,
                0,
                0,
                198,
                247,
                36,
                7,
                43,
                0,
                0,
                0,
                251,
                222,
                150,
                107,
                48,
                0,
                0,
                0,
                45,
                247,
                8,
                125,
                54,
                0,
                0,
                0,
                103,
                142,
                41,
                81,
                61,
                0,
                0,
                0,
                160,
                134,
                94,
                0,
                69,
                0,
                0,
                0,
                165,
                129,
                28,
                166,
                77,
                0,
                0,
                0,
                175,
                249,
                72,
                97,
                87,
                0,
                0,
                0,
                41,
                165,
                168,
                84,
                98,
                0,
                0,
                0,
                9,
                176,
                91,
                167,
                110,
                0,
                0,
                0,
                148,
                134,
                105,
                133,
                124,
                0,
                0,
                0,
                9,
                37,
                94,
                32,
                140,
                0,
                0,
                0,
                58,
                30,
                251,
                175,
                157,
                0,
                0,
                0,
                148,
                209,
                254,
                114,
                177,
                0,
                0,
                0,
                95,
                152,
                4,
                176,
                199,
                0,
                0,
                0,
                36,
                11,
                129,
                182,
                224,
                0,
                0,
                0,
                144,
                228,
                221,
                223,
                252,
                0,
                0,
                0,
                43,
                120,
                185,
                144,
                28,
                1,
                0,
                0,
                58,
                50,
                78,
                58,
                64,
                1,
                0,
                0,
                85,
                37,
                7,
                92,
                104,
                1,
                0,
                0,
                12,
                75,
                71,
                133,
                149,
                1,
                0,
                0,
                60,
                210,
                105,
                87,
                200,
                1,
                0,
                0,
                116,
                161,
                2,
                136,
                1,
                2,
                0,
                0,
                65,
                25,
                103,
                227,
                65,
                2,
                0,
                0,
                79,
                36,
                136,
                79,
                138,
                2,
                0,
                0,
                211,
                197,
                39,
                207,
                219,
                2,
                0,
                0,
                149,
                157,
                117,
                133,
                55,
                3,
                0,
                0,
                202,
                72,
                31,
                186,
                158,
                3,
                0,
                0,
                236,
                36,
                227,
                221,
                18,
                4,
                0,
                0,
                147,
                203,
                181,
                143,
                149,
                4,
                0,
                0,
                137,
                170,
                140,
                162,
                40,
                5,
                0,
                0,
                68,
                105,
                226,
                35,
                206,
                5,
                0,
                0,
                202,
                100,
                12,
                99,
                136,
                6,
                0,
                0,
                9,
                118,
                123,
                249,
                89,
                7,
                0,
                0,
                103,
                127,
                5,
                212,
                69,
                8,
                0,
                0,
                68,
                240,
                88,
                61,
                79,
                9,
                0,
                0,
                201,
                149,
                191,
                233,
                121,
                10,
                0,
                0,
                92,
                190,
                90,
                4,
                202,
                11,
                0,
                0,
                47,
                249,
                7,
                62,
                68,
                13,
                0,
                0,
                128,
                168,
                35,
                222,
                237,
                14,
                0,
                0,
                78,
                72,
                101,
                213,
                204,
                16,
                0,
                0,
                117,
                204,
                24,
                211,
                231,
                18,
                0,
                0,
                21,
                235,
                0,
                93,
                70,
                21,
                0,
                0,
                248,
                168,
                55,
                234,
                240,
                23,
                0,
                0,
                135,
                47,
                109,
                1,
                241,
                26,
                0,
                0,
                162,
                252,
                240,
                90,
                81,
                30,
                0,
                0,
                181,
                7,
                255,
                6,
                30,
                34,
                0,
                0,
                217,
                180,
                217,
                152,
                100,
                38,
                0,
                0,
                44,
                149,
                74,
                87,
                52,
                43,
                0,
                0,
                47,
                64,
                55,
                115,
                158,
                48,
                0,
                0,
                194,
                73,
                13,
                69,
                182,
                54,
                0,
                0,
                218,
                200,
                224,
                145,
                145,
                61,
                0,
                0,
                183,
                99,
                52,
                217,
                72,
                69,
                0,
                0,
                83,
                201,
                128,
                172,
                247,
                77,
                0,
                0,
                181,
                83,
                180,
                17,
                189,
                87,
                0,
                0,
                17,
                192,
                10,
                242,
                187,
                98,
                0,
                0,
                70,
                4,
                201,
                150,
                27,
                111,
                0,
                0,
                254,
                234,
                154,
                53,
                8,
                125,
                0,
                0,
                143,
                249,
                135,
                142,
                179,
                140,
                0,
                0,
                156,
                252,
                179,
                157,
                85,
                158,
                0,
                0,
                155,
                82,
                102,
                99,
                45,
                178,
                0,
                0,
                194,
                162,
                34,
                197,
                129,
                200,
                0,
                0,
                164,
                63,
                247,
                138,
                162,
                225,
                0,
                0,
                22,
                63,
                138,
                124,
                233,
                253,
                0,
                0,
                229,
                188,
                223,
                161,
                187,
                29,
                1,
                0,
                152,
                96,
                83,
                172,
                138,
                65,
                1,
                0,
                46,
                224,
                206,
                140,
                214,
                105,
                1,
                0,
                116,
                219,
                232,
                60,
                47,
                151,
                1,
                0,
                207,
                78,
                77,
                193,
                54,
                202,
                1,
                0,
                10,
                139,
                157,
                108,
                163,
                3,
                2,
                0,
                33,
                245,
                219,
                106,
                66,
                68,
                2,
                0,
                23,
                4,
                123,
                158,
                250,
                140,
                2,
                0,
                205,
                161,
                74,
                217,
                207,
                222,
                2,
                0,
                161,
                80,
                199,
                124,
                230,
                58,
                3,
                0,
                35,
                215,
                191,
                142,
                135,
                162,
                3,
                0,
                35,
                221,
                229,
                80,
                37,
                23,
                4,
                0,
                222,
                166,
                177,
                107,
                96,
                154,
                4,
                0,
                93,
                123,
                15,
                191,
                13,
                46,
                5,
                0,
                238,
                154,
                157,
                237,
                60,
                212,
                5,
                0,
                68,
                62,
                220,
                185,
                63,
                143,
                6,
                0,
                1,
                52,
                159,
                79,
                178,
                97,
                7,
                0,
                19,
                209,
                92,
                151,
                132,
                78,
                8,
                0,
                164,
                208,
                171,
                180,
                4,
                89,
                9,
                0,
                255,
                179,
                110,
                213,
                234,
                132,
                10,
                0,
                54,
                29,
                222,
                123,
                102,
                214,
                11,
                0,
                85,
                74,
                237,
                114,
                45,
                82,
                13,
                0,
                6,
                39,
                119,
                162,
                140,
                253,
                14,
                0,
                115,
                162,
                84,
                255,
                122,
                222,
                16,
                0,
                128,
                3,
                6,
                219,
                174,
                251,
                18,
                0,
                177,
                194,
                19,
                223,
                181,
                92,
                21,
                0,
                245,
                74,
                214,
                9,
                16,
                10,
                24,
                0,
                139,
                1,
                17,
                13,
                78,
                13,
                27,
                0,
                208,
                118,
                226,
                122,
                51,
                113,
                30,
                0,
                12,
                211,
                36,
                59,
                221,
                65,
                34,
                0,
                32,
                9,
                167,
                210,
                236,
                140,
                38,
                0,
                222,
                193,
                223,
                22,
                185,
                97,
                43,
                0,
                4,
                213,
                27,
                252,
                132,
                209,
                48,
                0,
                120,
                188,
                248,
                65,
                189,
                239,
                54,
                0,
                16,
                166,
                133,
                218,
                61,
                210,
                61,
                0,
                80,
                77,
                3,
                4,
                160,
                145,
                69,
                0,
                244,
                67,
                78,
                44,
                146,
                73,
                78,
                0,
                192,
                205,
                247,
                215,
                58,
                25,
                88,
                0,
                144,
                228,
                107,
                238,
                167,
                35,
                99,
                0,
                240,
                247,
                203,
                248,
                75,
                144,
                111,
                0,
                32,
                193,
                251,
                18,
                139,
                139,
                125,
                0,
                8,
                32,
                114,
                134,
                89,
                71,
                141,
                0,
                16,
                198,
                123,
                69,
                238,
                251,
                158,
                0,
                120,
                243,
                161,
                196,
                139,
                232,
                178,
                0,
                104,
                120,
                210,
                255,
                97,
                84,
                201,
                0,
                72,
                14,
                213,
                210,
                140,
                143,
                226,
                0,
                136,
                73,
                206,
                49,
                50,
                244,
                254,
                0,
                64,
                112,
                115,
                64,
                196,
                231,
                30,
                1,
                112,
                86,
                187,
                198,
                107,
                220,
                66,
                1,
                240,
                227,
                16,
                18,
                160,
                82,
                107,
                1,
                240,
                98,
                87,
                244,
                241,
                218,
                152,
                1,
                32,
                7,
                179,
                72,
                16,
                24,
                204,
                1,
                128,
                202,
                141,
                51,
                13,
                193,
                5,
                2,
                0,
                25,
                152,
                58,
                236,
                163,
                70,
                2,
                0,
                32,
                200,
                85,
                130,
                168,
                143,
                2,
                160,
                222,
                59,
                63,
                178,
                211,
                225,
                2,
                32,
                172,
                119,
                145,
                16,
                75,
                62,
                3,
                96,
                111,
                94,
                182,
                252,
                88,
                166,
                3,
                128,
                84,
                159,
                74,
                61,
                113,
                27,
                4,
                192,
                162,
                1,
                111,
                48,
                54,
                159,
                4,
                64,
                146,
                128,
                145,
                162,
                126,
                51,
                5,
                0,
                252,
                238,
                138,
                96,
                92,
                218,
                5,
                128,
                157,
                42,
                139,
                156,
                35,
                150,
                6,
                192,
                187,
                23,
                63,
                64,
                115,
                105,
                7,
                128,
                85,
                51,
                235,
                73,
                62,
                87,
                8,
                0,
                31,
                88,
                239,
                85,
                214,
                98,
                9,
                0,
                7,
                169,
                89,
                122,
                247,
                143,
                10,
                0,
                243,
                109,
                230,
                158,
                213,
                226,
                11,
                128,
                72,
                232,
                25,
                129,
                43,
                96,
                13,
                128,
                8,
                181,
                26,
                154,
                75,
                13,
                15,
                0,
                194,
                146,
                172,
                34,
                51,
                240,
                16,
                0,
                66,
                88,
                60,
                121,
                159,
                15,
                19,
                0,
                75,
                158,
                113,
                54,
                38,
                115,
                21,
                0,
                130,
                126,
                79,
                70,
                80,
                35,
                24,
                0,
                71,
                16,
                182,
                102,
                184,
                41,
                27,
                0,
                55,
                127,
                56,
                120,
                45,
                145,
                30,
                0,
                0,
                17,
                227,
                27,
                217,
                101,
                34,
                0,
                224,
                249,
                233,
                39,
                107,
                181,
                38,
                0,
                192,
                94,
                132,
                142,
                74,
                143,
                43,
                0,
                202,
                32,
                172,
                101,
                204,
                4,
                49,
                0,
                40,
                142,
                96,
                212,
                113,
                41,
                55,
                0,
                252,
                17,
                174,
                194,
                45,
                19,
                62,
                0,
                172,
                132,
                119,
                69,
                179,
                218,
                69,
                0,
                100,
                223,
                49,
                222,
                205,
                155,
                78,
                0,
                40,
                79,
                224,
                201,
                196,
                117,
                88,
                0,
                128,
                106,
                34,
                194,
                202,
                139,
                99,
                0,
                80,
                207,
                157,
                191,
                123,
                5,
                112,
                0,
                4,
                141,
                22,
                127,
                106,
                15,
                126,
                0,
                32,
                67,
                217,
                194,
                191,
                219,
                141,
                0,
                96,
                246,
                119,
                137,
                237,
                162,
                159,
                0,
                144,
                183,
                41,
                186,
                120,
                164,
                179,
                0,
                168,
                21,
                92,
                23,
                220,
                39,
                202,
                0,
                72,
                175,
                82,
                162,
                135,
                125,
                227,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " The list of thresholds separating the various bags.",
                "",
                " Ids are separated into unsorted bags according to their score. This specifies the",
                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                " is less than or equal to its upper threshold.",
                "",
                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                " score, but peer ids within a particular bag are sorted in insertion order.",
                "",
                " # Expressing the constant",
                "",
                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                " permitted.",
                "",
                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                " specified within the bag. For any two threshold lists, if one ends with",
                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                " lists will behave identically.",
                "",
                " # Calculation",
                "",
                " It is recommended to generate the set of thresholds in a geometric series, such that",
                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                "",
                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                "",
                " # Examples",
                "",
                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                "   iteration is strictly in insertion order.",
                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is equal to 2.",
                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                "",
                " # Migration",
                "",
                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                " With that `List::migrate` can be called, which will perform the appropriate migration."
              ]
            }
          ],
          "error": {
            "ty": 756
          },
          "index": 17
        },
        {
          "name": "NominationPools",
          "storage": {
            "prefix": "NominationPools",
            "entries": [
              {
                "name": "MinJoinBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum amount to bond to join a pool."
                ]
              },
              {
                "name": "MinCreateBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum bond required to create a pool.",
                  "",
                  " This is the amount that the pool creator must put as their initial stake in the pool, as an",
                  " indication of \"skin in the game\".",
                  "",
                  " This is the value that will always exist in the staking ledger of the pool bonded account",
                  " while all other accounts leave."
                ]
              },
              {
                "name": "UnbondingMembers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 758
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pool Members who are Unbonding.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "BondedPools",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 763
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage for bonded pools."
                ]
              },
              {
                "name": "CounterForBondedPools",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "SubPoolsStorage",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 766
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,",
                  " hence the name sub-pools. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForSubPoolsStorage",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "NextPoolId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next pool id that will be used in [`create`](Pallet::create). Increments by one with",
                  " each pool created."
                ]
              },
              {
                "name": "ReversePoolIdLookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A reverse lookup from the pool's account id to its id.",
                  "",
                  " This is only used for slashing. In all other instances, the pool id is used, and the",
                  " accounts are deterministically derived from it."
                ]
              },
              {
                "name": "CounterForReversePoolIdLookup",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "UsedPoolTokenIds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 6,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A reverse lookup from the token_id to pool_id.",
                  "",
                  " This is used for making sure the same token is not used to create multiple pools"
                ]
              },
              {
                "name": "GlobalMaxCommission",
                "modifier": "Optional",
                "ty": {
                  "Plain": 42
                },
                "default": [
                  0
                ],
                "docs": [
                  " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                  " pool commissions that are > `GlobalMaxCommission`, necessary if a future"
                ]
              },
              {
                "name": "StakingInformation",
                "modifier": "Optional",
                "ty": {
                  "Plain": 410
                },
                "default": [
                  0
                ],
                "docs": [
                  " The general staking parameters"
                ]
              },
              {
                "name": "EarlyBirdBonusInfo",
                "modifier": "Default",
                "ty": {
                  "Plain": 772
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " The queue of bonuses that should be distributed to the pools"
                ]
              },
              {
                "name": "EraPayoutInfo",
                "modifier": "Default",
                "ty": {
                  "Plain": 774
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  202,
                  154,
                  59
                ],
                "docs": [
                  " Tracks payout information for an era"
                ]
              }
            ]
          },
          "calls": {
            "ty": 406
          },
          "event": {
            "ty": 67
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 740,
              "value": [
                112,
                121,
                47,
                110,
                111,
                112,
                108,
                115
              ],
              "docs": [
                " The nomination pool's pallet id."
              ]
            },
            {
              "name": "CollatorRewardPool",
              "ty": 740,
              "value": [
                112,
                121,
                47,
                99,
                111,
                108,
                114,
                112
              ],
              "docs": [
                " The pool ID for system account holding the collator rewards."
              ]
            },
            {
              "name": "MaxPointsToBalance",
              "ty": 2,
              "value": [
                10
              ],
              "docs": [
                " The maximum pool points-to-balance ratio that an `open` pool can have.",
                "",
                " This is important in the event slashing takes place and the pool's points-to-balance",
                " ratio becomes disproportional.",
                "",
                " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                " that the total number of points in the system are at most 10 times the total_issuance of",
                " the chain, in the absolute worse case.",
                "",
                " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                " Such a scenario would also be the equivalent of the pool being 90% slashed."
              ]
            },
            {
              "name": "PostUnbondingPoolsWindow",
              "ty": 4,
              "value": [
                4,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of eras a `SubPools::with_era` pool can exist before it gets merged into the",
                " `SubPools::no_era` pool. In other words, this is the amount of eras a member will be",
                " able to withdraw from an unbonding pool which is guaranteed to have the correct ratio of",
                " points to balance; once the `with_era` pool is merged into the `no_era` pool, the ratio",
                " can become skewed due to some slashed ratio getting merged in at some point."
              ]
            },
            {
              "name": "MaxUnbonding",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of simultaneous unbonding chunks that can exist per member."
              ]
            },
            {
              "name": "MinDuration",
              "ty": 4,
              "value": [
                30,
                0,
                0,
                0
              ],
              "docs": [
                " Min duration of a pool's bonus cycle in eras"
              ]
            },
            {
              "name": "MaxDuration",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Max duration of a pool's bonus cycle in eras"
              ]
            },
            {
              "name": "PoolCollectionId",
              "ty": 6,
              "value": [
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The collection id that is used for pool NFTs"
              ]
            },
            {
              "name": "StakedEnjCollectionId",
              "ty": 6,
              "value": [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The collection id that is used for sENJ tokens"
              ]
            },
            {
              "name": "StakedEnjCollectionOwner",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                112,
                121,
                47,
                110,
                111,
                112,
                108,
                115,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The owner of the sENJ collection"
              ]
            },
            {
              "name": "BonusPercentage",
              "ty": 42,
              "value": [
                0,
                194,
                235,
                11
              ],
              "docs": [
                " The percentage of each pool's rewards that goes to the bonus"
              ]
            },
            {
              "name": "BaseBonusRewardPercentage",
              "ty": 42,
              "value": [
                128,
                178,
                230,
                14
              ],
              "docs": [
                " Share of bonus reward that is distributed to everyone regardless of their weight"
              ]
            },
            {
              "name": "UnclaimedBalanceReceiver",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The account that will receive the deposit and commission if the pool's token is burned.",
                " It also receives the leftover bonus if a pool is destroyed."
              ]
            },
            {
              "name": "CapacityMutationPeriod",
              "ty": 4,
              "value": [
                14,
                0,
                0,
                0
              ],
              "docs": [
                " The number of eras its allowed to mutate the pools capacity"
              ]
            },
            {
              "name": "EarlyBirdBonusDistributionBlock",
              "ty": 4,
              "value": [
                152,
                139,
                49,
                0
              ],
              "docs": [
                " The block number after which the early bird bonus can be distributed"
              ]
            },
            {
              "name": "MaxEarlyBirdBonusQueueItems",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of items in the early bird bonus queue"
              ]
            },
            {
              "name": "EarlyBirdBonusAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                101,
                97,
                114,
                108,
                98,
                105,
                114,
                100,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The account id that holds early bird bonus"
              ]
            },
            {
              "name": "GlobalMaxCapacity",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                148,
                144,
                2,
                40,
                44,
                42,
                139,
                16,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The global maximum pool capacity"
              ]
            },
            {
              "name": "DefaultMaxCapacity",
              "ty": 6,
              "value": [
                0,
                0,
                128,
                208,
                118,
                102,
                231,
                13,
                225,
                105,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The default maximum pool capacity"
              ]
            },
            {
              "name": "AttributeKeyMaxLength",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The max attribute key length"
              ]
            },
            {
              "name": "AttributeValueMaxLength",
              "ty": 4,
              "value": [
                0,
                4,
                0,
                0
              ],
              "docs": [
                " The max attribute value length"
              ]
            },
            {
              "name": "MaxCapacityAttributeKey",
              "ty": 201,
              "value": [
                68,
                109,
                97,
                120,
                95,
                112,
                111,
                111,
                108,
                95,
                99,
                97,
                112,
                97,
                99,
                105,
                116,
                121
              ],
              "docs": [
                " Max pool capacity attribute key"
              ]
            }
          ],
          "error": {
            "ty": 775
          },
          "index": 18
        },
        {
          "name": "StakeExchange",
          "storage": {
            "prefix": "StakeExchange",
            "entries": [
              {
                "name": "LiquidityConfigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 81
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of LP accounts to their configuration"
                ]
              },
              {
                "name": "Offers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 80
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of LPAccountId to their active offer"
                ]
              },
              {
                "name": "NextOfferId",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Value to use for Next offer Id"
                ]
              }
            ]
          },
          "calls": {
            "ty": 411
          },
          "event": {
            "ty": 79
          },
          "constants": [
            {
              "name": "ReserveIdentifier",
              "ty": 134,
              "value": [
                115,
                116,
                97,
                107,
                101,
                101,
                120,
                103
              ],
              "docs": [
                " The id used for making reservations with this pallet"
              ]
            },
            {
              "name": "MaxFilteredTokenCount",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of tokens that can be whitelisted/blacklisted"
              ]
            },
            {
              "name": "OfferDeposit",
              "ty": 6,
              "value": [
                0,
                128,
                74,
                252,
                112,
                192,
                246,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit for creating an offer"
              ]
            }
          ],
          "error": {
            "ty": 777
          },
          "index": 19
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 413
          },
          "event": {
            "ty": 87
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 778
          },
          "index": 20
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 779,
                    "value": 780
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 421
          },
          "event": {
            "ty": 88
          },
          "constants": [
            {
              "name": "DepositBase",
              "ty": 6,
              "value": [
                0,
                128,
                51,
                62,
                61,
                44,
                248,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "ty": 6,
              "value": [
                0,
                0,
                210,
                131,
                152,
                215,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": {
            "ty": 782
          },
          "index": 21
        },
        {
          "name": "ParachainsOrigin",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 50
        },
        {
          "name": "Configuration",
          "storage": {
            "prefix": "Configuration",
            "entries": [
              {
                "name": "ActiveConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 783
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  6,
                  0,
                  0,
                  0,
                  100,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The active configuration for the current session."
                ]
              },
              {
                "name": "PendingConfigs",
                "modifier": "Default",
                "ty": {
                  "Plain": 784
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending configuration changes.",
                  "",
                  " This is a list of configuration changes, each with a session index at which it should",
                  " be applied.",
                  "",
                  " The list is sorted ascending by session index. Also, this list can only contain at most",
                  " 2 items: for the next session and for the `scheduled_session`."
                ]
              },
              {
                "name": "BypassConsistencyCheck",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " If this is set, then the configuration setters will bypass the consistency checks. This",
                  " is meant to be used only as the last resort."
                ]
              }
            ]
          },
          "calls": {
            "ty": 423
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 786
          },
          "index": 51
        },
        {
          "name": "ParasShared",
          "storage": {
            "prefix": "ParasShared",
            "entries": [
              {
                "name": "CurrentSessionIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current session index."
                ]
              },
              {
                "name": "ActiveValidatorIndices",
                "modifier": "Default",
                "ty": {
                  "Plain": 787
                },
                "default": [
                  0
                ],
                "docs": [
                  " All the validators actively participating in parachain consensus.",
                  " Indices are into the broader validator set."
                ]
              },
              {
                "name": "ActiveValidatorKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 788
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain attestation keys of the validators actively participating in parachain consensus.",
                  " This should be the same length as `ActiveValidatorIndices`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 430
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 52
        },
        {
          "name": "ParaInclusion",
          "storage": {
            "prefix": "ParaInclusion",
            "entries": [
              {
                "name": "AvailabilityBitfields",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 439,
                    "value": 789
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The latest bitfield for each validator, referred to by their index in the validator set."
                ]
              },
              {
                "name": "PendingAvailability",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 790
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Candidates pending availability by `ParaId`."
                ]
              },
              {
                "name": "PendingAvailabilityCommitments",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 444
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The commitments of candidates pending availability, by `ParaId`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 431
          },
          "event": {
            "ty": 90
          },
          "constants": [],
          "error": {
            "ty": 791
          },
          "index": 53
        },
        {
          "name": "ParaInherent",
          "storage": {
            "prefix": "ParaInherent",
            "entries": [
              {
                "name": "Included",
                "modifier": "Optional",
                "ty": {
                  "Plain": 56
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the paras inherent was included within this block.",
                  "",
                  " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                  " due to the guarantees of FRAME's storage APIs.",
                  "",
                  " If this is `None` at the end of the block, we panic and render the block invalid."
                ]
              },
              {
                "name": "OnChainVotes",
                "modifier": "Optional",
                "ty": {
                  "Plain": 792
                },
                "default": [
                  0
                ],
                "docs": [
                  " Scraped on chain data for extracting resolved disputes as well as backing votes."
                ]
              }
            ]
          },
          "calls": {
            "ty": 432
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 797
          },
          "index": 54
        },
        {
          "name": "ParaScheduler",
          "storage": {
            "prefix": "ParaScheduler",
            "entries": [
              {
                "name": "ValidatorGroups",
                "modifier": "Default",
                "ty": {
                  "Plain": 798
                },
                "default": [
                  0
                ],
                "docs": [
                  " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                  " broader set of Polkadot validators, but instead just the subset used for parachains during",
                  " this session.",
                  "",
                  " Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.",
                  " Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."
                ]
              },
              {
                "name": "ParathreadQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 799
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A queue of upcoming claims and which core they should be mapped onto.",
                  "",
                  " The number of queued claims is bounded at the `scheduling_lookahead`",
                  " multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."
                ]
              },
              {
                "name": "AvailabilityCores",
                "modifier": "Default",
                "ty": {
                  "Plain": 804
                },
                "default": [
                  0
                ],
                "docs": [
                  " One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be",
                  " temporarily `Some` if scheduled but not occupied.",
                  " The i'th parachain belongs to the i'th core, with the remaining cores all being",
                  " parathread-multiplexers.",
                  "",
                  " Bounded by the maximum of either of these two values:",
                  "   * The number of parachains and parathread multiplexers",
                  "   * The number of validators divided by `configuration.max_validators_per_core`."
                ]
              },
              {
                "name": "ParathreadClaimIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 807
                },
                "default": [
                  0
                ],
                "docs": [
                  " An index used to ensure that only one claim on a parathread exists in the queue or is",
                  " currently being handled by an occupied core.",
                  "",
                  " Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."
                ]
              },
              {
                "name": "SessionStartBlock",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number where the session start occurred. Used to track how many group rotations have occurred.",
                  "",
                  " Note that in the context of parachains modules the session change is signaled during",
                  " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                  " Thus for all intents and purposes the effect of the session change is observed at the",
                  " block following the session change, block number of which we save in this storage value."
                ]
              },
              {
                "name": "Scheduled",
                "modifier": "Default",
                "ty": {
                  "Plain": 808
                },
                "default": [
                  0
                ],
                "docs": [
                  " Currently scheduled cores - free but up to be occupied.",
                  "",
                  " Bounded by the number of cores: one for each parachain and parathread multiplexer.",
                  "",
                  " The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/",
                  " for the upcoming block."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 55
        },
        {
          "name": "Paras",
          "storage": {
            "prefix": "Paras",
            "entries": [
              {
                "name": "PvfActiveVoteMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 98,
                    "value": 811
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All currently active PVF pre-checking votes.",
                  "",
                  " Invariant:",
                  " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "PvfActiveVoteList",
                "modifier": "Default",
                "ty": {
                  "Plain": 814
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."
                ]
              },
              {
                "name": "Parachains",
                "modifier": "Default",
                "ty": {
                  "Plain": 807
                },
                "default": [
                  0
                ],
                "docs": [
                  " All parachains. Ordered ascending by `ParaId`. Parathreads are not included.",
                  "",
                  " Consider using the [`ParachainsCache`] type of modifying."
                ]
              },
              {
                "name": "ParaLifecycles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 815
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current lifecycle of a all known Para IDs."
                ]
              },
              {
                "name": "Heads",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 99
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The head-data of every registered para."
                ]
              },
              {
                "name": "CurrentCodeHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 98
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The validation code hash of every live para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 816,
                    "value": 98
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual past code hash, indicated by the para id as well as the block number at which it",
                  " became outdated.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeMeta",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 817
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " Past code of parachains. The parachains themselves may not be registered anymore,",
                  " but we also keep their code on-chain for the same amount of time as outdated code",
                  " to keep it available for approval checkers."
                ]
              },
              {
                "name": "PastCodePruning",
                "modifier": "Default",
                "ty": {
                  "Plain": 820
                },
                "default": [
                  0
                ],
                "docs": [
                  " Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.",
                  " Note that this is the actual height of the included block, not the expected height at which the",
                  " code upgrade would be applied, although they may be equal.",
                  " This is to ensure the entire acceptance period is covered, not an offset acceptance period starting",
                  " from the time at which the parachain perceives a code upgrade as having occurred.",
                  " Multiple entries for a single para are permitted. Ordered ascending by block number."
                ]
              },
              {
                "name": "FutureCodeUpgrades",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The block number at which the planned code change is expected for a para.",
                  " The change will be applied after the first parablock for this ID included which executes",
                  " in the context of a relay chain block with a number >= `expected_at`."
                ]
              },
              {
                "name": "FutureCodeHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 98
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The actual future code hash of a para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "UpgradeGoAheadSignal",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 821
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.",
                  "",
                  " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                  " performs the checks. It is set at the first relay-chain block when the corresponding parachain",
                  " can switch its upgrade function. As soon as the parachain's block is included, the value",
                  " gets reset to `None`.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 822
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " This is used by the relay-chain to communicate that there are restrictions for performing",
                  " an upgrade for this parachain.",
                  "",
                  " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                  " potential use case is when we want to perform some maintenance (such as storage migration)",
                  " we could restrict upgrades to make the process simpler.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeCooldowns",
                "modifier": "Default",
                "ty": {
                  "Plain": 820
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "UpcomingUpgrades",
                "modifier": "Default",
                "ty": {
                  "Plain": 820
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of upcoming code upgrades. Each item is a pair of which para performs a code",
                  " upgrade and at which relay-chain block it is expected at.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "ActionsQueue",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 807
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The actions to perform during the start of a specific session index."
                ]
              },
              {
                "name": "UpcomingParasGenesis",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 505
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upcoming paras instantiation arguments.",
                  "",
                  " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
                  " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
                ]
              },
              {
                "name": "CodeByHashRefs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 98,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of reference on the validation code in [`CodeByHash`] storage."
                ]
              },
              {
                "name": "CodeByHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 98,
                    "value": 450
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code stored by its hash.",
                  "",
                  " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                  " [`PastCodeHash`]."
                ]
              }
            ]
          },
          "calls": {
            "ty": 460
          },
          "event": {
            "ty": 102
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "ty": 11,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 823
          },
          "index": 56
        },
        {
          "name": "Initializer",
          "storage": {
            "prefix": "Initializer",
            "entries": [
              {
                "name": "HasInitialized",
                "modifier": "Optional",
                "ty": {
                  "Plain": 56
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the parachains modules have been initialized within this block.",
                  "",
                  " Semantically a `bool`, but this guarantees it should never hit the trie,",
                  " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                  "",
                  " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of",
                  " them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for",
                  " the semantics of this variable."
                ]
              },
              {
                "name": "BufferedSessionChanges",
                "modifier": "Default",
                "ty": {
                  "Plain": 824
                },
                "default": [
                  0
                ],
                "docs": [
                  " Buffered session changes along with the block number at which they should be applied.",
                  "",
                  " Typically this will be empty or one element long. Apart from that this item never hits",
                  " the storage.",
                  "",
                  " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                  " upgrade boundaries or if governance intervenes."
                ]
              }
            ]
          },
          "calls": {
            "ty": 462
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 57
        },
        {
          "name": "Dmp",
          "storage": {
            "prefix": "Dmp",
            "entries": [
              {
                "name": "DownwardMessageQueues",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 826
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The downward messages addressed for a certain para."
                ]
              },
              {
                "name": "DownwardMessageQueueHeads",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A mapping that stores the downward message queue MQC head for each para.",
                  "",
                  " Each link in this chain has a form:",
                  " `(prev_head, B, H(M))`, where",
                  " - `prev_head`: is the previous head hash or zero if none.",
                  " - `B`: is the relay-chain block number in which a message was appended.",
                  " - `H(M)`: is the hash of the message being appended."
                ]
              },
              {
                "name": "DeliveryFeeFactor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 742
                  }
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number to multiply the base delivery fee by."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 58
        },
        {
          "name": "Hrmp",
          "storage": {
            "prefix": "Hrmp",
            "entries": [
              {
                "name": "HrmpOpenChannelRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 104,
                    "value": 828
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of pending HRMP open channel requests.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpOpenChannelRequestsList",
                "modifier": "Default",
                "ty": {
                  "Plain": 829
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpOpenChannelRequestCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This mapping tracks how many open channel requests are initiated by a given sender para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
                  " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpAcceptedChannelRequestCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                  " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpCloseChannelRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 104,
                    "value": 56
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A set of pending HRMP close channel requests that are going to be closed during the session",
                  " change. Used for checking if a given channel is registered for closure.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpCloseChannelRequestsList",
                "modifier": "Default",
                "ty": {
                  "Plain": 829
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpWatermarks",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The HRMP watermark associated with each para.",
                  " Invariant:",
                  " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpChannels",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 104,
                    "value": 830
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP channel data associated with each para.",
                  " Invariant:",
                  " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpIngressChannelsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 807
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
                  " I.e.",
                  "",
                  " (a) ingress index allows to find all the senders for a given recipient.",
                  " (b) egress index allows to find all the recipients for a given sender.",
                  "",
                  " Invariants:",
                  " - for each ingress index entry for `P` each item `I` in the index should present in",
                  "   `HrmpChannels` as `(I, P)`.",
                  " - for each egress index entry for `P` each item `E` in the index should present in",
                  "   `HrmpChannels` as `(P, E)`.",
                  " - there should be no other dangling channels in `HrmpChannels`.",
                  " - the vectors are sorted."
                ]
              },
              {
                "name": "HrmpEgressChannelsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 807
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpChannelContents",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 104,
                    "value": 831
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage for the messages for each channel.",
                  " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
                ]
              },
              {
                "name": "HrmpChannelDigests",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 833
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maintains a mapping that can be used to answer the question: What paras sent a message at",
                  " the given block number for a given receiver. Invariants:",
                  " - The inner `Vec<ParaId>` is never empty.",
                  " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                  " - The outer vector is sorted ascending by block number and cannot store two items with the",
                  "   same block number."
                ]
              }
            ]
          },
          "calls": {
            "ty": 463
          },
          "event": {
            "ty": 103
          },
          "constants": [],
          "error": {
            "ty": 835
          },
          "index": 60
        },
        {
          "name": "ParaSessionInfo",
          "storage": {
            "prefix": "ParaSessionInfo",
            "entries": [
              {
                "name": "AssignmentKeysUnsafe",
                "modifier": "Default",
                "ty": {
                  "Plain": 836
                },
                "default": [
                  0
                ],
                "docs": [
                  " Assignment keys for the current session.",
                  " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                  " When in doubt, use `Sessions` API instead."
                ]
              },
              {
                "name": "EarliestStoredSession",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The earliest session for which previous session info is stored."
                ]
              },
              {
                "name": "Sessions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 837
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Session information in a rolling window.",
                  " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                  " Does not have any entries before the session index in the first session change notification."
                ]
              },
              {
                "name": "AccountKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 78
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The validator account keys of the validators actively participating in parachain consensus."
                ]
              },
              {
                "name": "SessionExecutorParams",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 425
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Executor parameter set for a given session index"
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 61
        },
        {
          "name": "ParasDisputes",
          "storage": {
            "prefix": "ParasDisputes",
            "entries": [
              {
                "name": "LastPrunedSession",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The last pruned session, if any. All data stored by this module",
                  " references sessions."
                ]
              },
              {
                "name": "Disputes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 841,
                    "value": 842
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All ongoing or concluded disputes for the last several sessions."
                ]
              },
              {
                "name": "BackersOnDisputes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 841,
                    "value": 843
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Backing votes stored for each dispute.",
                  " This storage is used for slashing."
                ]
              },
              {
                "name": "Included",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 841,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All included blocks on the chain, as well as the block number in this chain that",
                  " should be reverted back to if the candidate is disputed and determined to be invalid."
                ]
              },
              {
                "name": "Frozen",
                "modifier": "Default",
                "ty": {
                  "Plain": 73
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the chain is frozen. Starts as `None`. When this is `Some`,",
                  " the chain will not accept any new parachain blocks for backing or inclusion,",
                  " and its value indicates the last valid block number in the chain.",
                  " It can only be set back to `None` by governance intervention."
                ]
              }
            ]
          },
          "calls": {
            "ty": 464
          },
          "event": {
            "ty": 105
          },
          "constants": [],
          "error": {
            "ty": 844
          },
          "index": 62
        },
        {
          "name": "ParasSlashing",
          "storage": {
            "prefix": "ParasSlashing",
            "entries": [
              {
                "name": "UnappliedSlashes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 841,
                    "value": 845
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validators pending dispute slashes."
                ]
              },
              {
                "name": "ValidatorSetCounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " `ValidatorSetCount` per session."
                ]
              }
            ]
          },
          "calls": {
            "ty": 465
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 849
          },
          "index": 63
        },
        {
          "name": "Registrar",
          "storage": {
            "prefix": "Registrar",
            "entries": [
              {
                "name": "PendingSwap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 93
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending swap operations."
                ]
              },
              {
                "name": "Paras",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 850
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Amount held on deposit for each para and the original depositor.",
                  "",
                  " The given account ID is responsible for registering the code and initial head data, but may only do",
                  " so if it isn't yet registered. (After that, it's up to governance to do so.)"
                ]
              },
              {
                "name": "NextFreeParaId",
                "modifier": "Default",
                "ty": {
                  "Plain": 93
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free `ParaId`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 469
          },
          "event": {
            "ty": 109
          },
          "constants": [
            {
              "name": "ParaDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                64,
                178,
                186,
                201,
                224,
                25,
                30,
                2,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit to be paid to run a parathread.",
                " This should include the cost for storing the genesis head and validation code."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                128,
                98,
                23,
                94,
                209,
                88,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit to be paid per byte stored on chain."
              ]
            }
          ],
          "error": {
            "ty": 851
          },
          "index": 70
        },
        {
          "name": "Slots",
          "storage": {
            "prefix": "Slots",
            "entries": [
              {
                "name": "Leases",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 852
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Amounts held on deposit for each (possibly future) leased parachain.",
                  "",
                  " The actual amount locked on its behalf by any account at any time is the maximum of the second values",
                  " of the items in this list whose first value is the account.",
                  "",
                  " The first item in the list is the amount locked for the current Lease Period. Following",
                  " items are for the subsequent lease periods.",
                  "",
                  " The default value (an empty list) implies that the parachain no longer exists (or never",
                  " existed) as far as this pallet is concerned.",
                  "",
                  " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                  " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                  " deposit for the non-existent chain currently, but is held at some point in the future.",
                  "",
                  " It is illegal for a `None` value to trail in the list."
                ]
              }
            ]
          },
          "calls": {
            "ty": 470
          },
          "event": {
            "ty": 110
          },
          "constants": [
            {
              "name": "LeasePeriod",
              "ty": 4,
              "value": [
                0,
                117,
                18,
                0
              ],
              "docs": [
                " The number of blocks over which a single period lasts."
              ]
            },
            {
              "name": "LeaseOffset",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of blocks to offset each lease period by."
              ]
            }
          ],
          "error": {
            "ty": 854
          },
          "index": 71
        },
        {
          "name": "Auctions",
          "storage": {
            "prefix": "Auctions",
            "entries": [
              {
                "name": "AuctionCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of auctions started so far."
                ]
              },
              {
                "name": "AuctionInfo",
                "modifier": "Optional",
                "ty": {
                  "Plain": 285
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information relating to the current auction, if there is one.",
                  "",
                  " The first item in the tuple is the lease period index that the first of the four",
                  " contiguous lease periods on auction is for. The second is the block number when the",
                  " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
                ]
              },
              {
                "name": "ReservedAmounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 855,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Amounts currently reserved in the accounts of the bidders currently winning",
                  " (sub-)ranges."
                ]
              },
              {
                "name": "Winning",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 856
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                  " the current auction. The map's key is the 0-based index into the Sample Size. The",
                  " first sample of the ending period is 0; the last is `Sample Size - 1`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 471
          },
          "event": {
            "ty": 111
          },
          "constants": [
            {
              "name": "EndingPeriod",
              "ty": 4,
              "value": [
                64,
                25,
                1,
                0
              ],
              "docs": [
                " The number of blocks over which an auction may be retroactively ended."
              ]
            },
            {
              "name": "SampleLength",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The length of each sample to take during the ending period.",
                "",
                " `EndingPeriod` / `SampleLength` = Total # of Samples"
              ]
            },
            {
              "name": "SlotRangeCount",
              "ty": 4,
              "value": [
                36,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "LeasePeriodsPerSlot",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 859
          },
          "index": 72
        },
        {
          "name": "Crowdloan",
          "storage": {
            "prefix": "Crowdloan",
            "entries": [
              {
                "name": "Funds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 860
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Info on all of the funds."
                ]
              },
              {
                "name": "NewRaise",
                "modifier": "Default",
                "ty": {
                  "Plain": 807
                },
                "default": [
                  0
                ],
                "docs": [
                  " The funds that have had additional contributions during the last block. This is used",
                  " in order to determine which funds should submit new or updated bids."
                ]
              },
              {
                "name": "EndingsCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of auctions that have entered into their ending period so far."
                ]
              },
              {
                "name": "NextFundIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next available fund index"
                ]
              }
            ]
          },
          "calls": {
            "ty": 473
          },
          "event": {
            "ty": 112
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 740,
              "value": [
                112,
                121,
                47,
                99,
                102,
                117,
                110,
                100
              ],
              "docs": [
                " `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"
              ]
            },
            {
              "name": "MinContribution",
              "ty": 6,
              "value": [
                0,
                0,
                76,
                10,
                162,
                134,
                213,
                16,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount that may be contributed into a crowdloan. Should almost certainly be at",
                " least `ExistentialDeposit`."
              ]
            },
            {
              "name": "RemoveKeysLimit",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Max number of storage keys to remove per extrinsic call."
              ]
            }
          ],
          "error": {
            "ty": 862
          },
          "index": 73
        },
        {
          "name": "XcmPallet",
          "storage": {
            "prefix": "XcmPallet",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 863
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 868,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 868,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 868,
                    "value": 869
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 870
                },
                "default": [
                  0
                ],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 873
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current migration's stage, if any."
                ]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 875,
                    "value": 877
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on a remote chain."
                ]
              },
              {
                "name": "LockedFungibles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 881
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on this chain."
                ]
              },
              {
                "name": "XcmExecutionSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " Global suspension state of the XCM executor."
                ]
              }
            ]
          },
          "calls": {
            "ty": 482
          },
          "event": {
            "ty": 113
          },
          "constants": [],
          "error": {
            "ty": 884
          },
          "index": 99
        },
        {
          "name": "MessageQueue",
          "storage": {
            "prefix": "MessageQueue",
            "entries": [
              {
                "name": "BookStateFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 168,
                    "value": 885
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The index of the first and last (non-empty) pages."
                ]
              },
              {
                "name": "ServiceHead",
                "modifier": "Optional",
                "ty": {
                  "Plain": 168
                },
                "default": [
                  0
                ],
                "docs": [
                  " The origin at which we should begin servicing."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 888,
                    "value": 889
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The map of page indices to pages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 503
          },
          "event": {
            "ty": 167
          },
          "constants": [
            {
              "name": "HeapSize",
              "ty": 4,
              "value": [
                0,
                0,
                1,
                0
              ],
              "docs": [
                " The size of the page; this implies the maximum message size which can be sent.",
                "",
                " A good value depends on the expected message sizes, their weights, the weight that is",
                " available for processing them and the maximal needed message size. The maximal message",
                " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
              ]
            },
            {
              "name": "MaxStale",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
                " can happen. Once there are more stale pages than this, then historical pages may be",
                " dropped, even if they contain unprocessed overweight messages."
              ]
            },
            {
              "name": "ServiceWeight",
              "ty": 643,
              "value": [
                1,
                7,
                0,
                160,
                219,
                33,
                93,
                19,
                51,
                51,
                51,
                51,
                51,
                51,
                51,
                51
              ],
              "docs": [
                " The amount of weight (if any) which should be provided to the message queue for",
                " servicing enqueued items.",
                "",
                " This may be legitimately `None` in the case that you will call",
                " `ServiceQueues::service_queues` manually."
              ]
            }
          ],
          "error": {
            "ty": 891
          },
          "index": 110
        },
        {
          "name": "ParasSudoWrapper",
          "storage": null,
          "calls": {
            "ty": 504
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 892
          },
          "index": 250
        },
        {
          "name": "AssignedSlots",
          "storage": {
            "prefix": "AssignedSlots",
            "entries": [
              {
                "name": "PermanentSlots",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 285
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Assigned permanent slots, with their start lease period, and duration."
                ]
              },
              {
                "name": "PermanentSlotCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of assigned (and active) permanent slots."
                ]
              },
              {
                "name": "TemporarySlots",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 93,
                    "value": 893
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Assigned temporary slots."
                ]
              },
              {
                "name": "TemporarySlotCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of assigned temporary slots."
                ]
              },
              {
                "name": "ActiveTemporarySlotCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of active temporary slots in current slot lease period."
                ]
              }
            ]
          },
          "calls": {
            "ty": 506
          },
          "event": {
            "ty": 171
          },
          "constants": [
            {
              "name": "PermanentSlotLeasePeriodLength",
              "ty": 4,
              "value": [
                109,
                1,
                0,
                0
              ],
              "docs": [
                " The number of lease periods a permanent parachain slot lasts."
              ]
            },
            {
              "name": "TemporarySlotLeasePeriodLength",
              "ty": 4,
              "value": [
                3,
                0,
                0,
                0
              ],
              "docs": [
                " The number of lease periods a temporary parachain slot lasts."
              ]
            },
            {
              "name": "MaxPermanentSlots",
              "ty": 4,
              "value": [
                40,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of permanent slots that can be assigned."
              ]
            },
            {
              "name": "MaxTemporarySlots",
              "ty": 4,
              "value": [
                40,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of temporary slots that can be assigned."
              ]
            },
            {
              "name": "MaxTemporarySlotPerLeasePeriod",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of temporary slots to be scheduled per lease periods."
              ]
            }
          ],
          "error": {
            "ty": 894
          },
          "index": 251
        },
        {
          "name": "ValidatorManager",
          "storage": {
            "prefix": "ValidatorManager",
            "entries": [
              {
                "name": "ValidatorsToRetire",
                "modifier": "Default",
                "ty": {
                  "Plain": 78
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validators that should be retired, because their Parachain was deregistered."
                ]
              },
              {
                "name": "ValidatorsToAdd",
                "modifier": "Default",
                "ty": {
                  "Plain": 78
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validators that should be added."
                ]
              }
            ]
          },
          "calls": {
            "ty": 508
          },
          "event": {
            "ty": 172
          },
          "constants": [],
          "error": null,
          "index": 252
        },
        {
          "name": "MultiTokens",
          "storage": {
            "prefix": "MultiTokens",
            "entries": [
              {
                "name": "TokenAccounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 895,
                    "value": 230
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Accounts per token"
                ]
              },
              {
                "name": "Collections",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 205
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collections in existence and their ownership details."
                ]
              },
              {
                "name": "Tokens",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 896,
                    "value": 218
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Tokens storage"
                ]
              },
              {
                "name": "NextCollectionId",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Sequencer for collectionID generators."
                ]
              },
              {
                "name": "CollectionAccounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 897,
                    "value": 223
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores information for an account per collection"
                ]
              },
              {
                "name": "Attributes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 898,
                    "value": 534
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of collections and tokens."
                ]
              },
              {
                "name": "AssetIdsByLocation",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 116,
                    "value": 177
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of Locations to AssetIds of Foreign Tokens"
                ]
              },
              {
                "name": "Migrations",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 899,
                    "value": 900
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores last iterated keys for migrations. Used by multi block migrations",
                  " to resume from the last iterated key.",
                  "",
                  " Key is the storage prefix, value is the status of migration and last iterated key, if any.",
                  " i.e `[\"MultiTokens\", \"TokenAccounts\"] -> (collection_id, token_id, account_id)`"
                ]
              },
              {
                "name": "MigrationStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 243
                },
                "default": [
                  0
                ],
                "docs": [
                  " Status of the current multi-block migration"
                ]
              },
              {
                "name": "ClaimableCollectionIds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 244,
                    "value": 537
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores data for an ethereum address"
                ]
              },
              {
                "name": "UnmintableTokenIds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 6,
                    "value": 539
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " These token ids can only be minted by calling `claim_token`"
                ]
              },
              {
                "name": "NativeCollectionIds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 6,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of ethereum collection id to the native collection id"
                ]
              }
            ]
          },
          "calls": {
            "ty": 509
          },
          "event": {
            "ty": 173
          },
          "constants": [
            {
              "name": "AttributeDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                197,
                46,
                188,
                162,
                177,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base deposit required for setting an attribute"
              ]
            },
            {
              "name": "AttributeDepositPerByte",
              "ty": 6,
              "value": [
                0,
                144,
                30,
                196,
                188,
                22,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Additional deposit per byte for setting an attribute"
              ]
            },
            {
              "name": "MaxRecipientsPerBatchTransfer",
              "ty": 4,
              "value": [
                250,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of recipients allowed in a batch transfer"
              ]
            },
            {
              "name": "MaxTokensPerBatchTransfer",
              "ty": 4,
              "value": [
                244,
                1,
                0,
                0
              ],
              "docs": [
                " The max number of tokens allowed in a batch transfer"
              ]
            },
            {
              "name": "MaxBatchAttributesPerCall",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of attributes to set in one call"
              ]
            },
            {
              "name": "MaxRecipientsPerBatchMint",
              "ty": 4,
              "value": [
                250,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of recipients allowed in a batch mint"
              ]
            },
            {
              "name": "CollectionCreationDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                49,
                214,
                226,
                117,
                188,
                86,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Amount of [`Balance`](BalanceOf) reserved to create a collection"
              ]
            },
            {
              "name": "TokenAccountDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                193,
                111,
                242,
                134,
                35,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of [`Balance`](BalanceOf) that must be reserved for a token account to be",
                " maintained"
              ]
            },
            {
              "name": "MaxIdleOperationQueueLength",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum length of the idle operation queue"
              ]
            },
            {
              "name": "MaxIdleOperationQueueWeight",
              "ty": 9,
              "value": [
                7,
                0,
                232,
                118,
                72,
                23,
                0
              ],
              "docs": [
                " The maximum weight of the idle operation queue"
              ]
            },
            {
              "name": "MaxOperatorsPerAccount",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of operators a [`TokenAccount`] and an [`CollectionAccount`] can have"
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                2,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account"
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                2,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that can exist on a token account"
              ]
            },
            {
              "name": "MaxExplicitRoyaltyCurrencies",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of explicit royalty currencies"
              ]
            },
            {
              "name": "NativeAssetInfo",
              "ty": 903,
              "value": [
                0,
                0,
                0,
                192,
                167,
                198,
                179,
                209,
                70,
                49,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The [`NativeAssetInfo`](ep_multi_tokens::NativeAssetInfo) for this pallet"
              ]
            },
            {
              "name": "ReserveIdentifier",
              "ty": 134,
              "value": [
                109,
                117,
                108,
                116,
                111,
                107,
                101,
                110
              ],
              "docs": [
                " The id used for making reservations with this pallet"
              ]
            },
            {
              "name": "TokenMetadataMaxNameLength",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " Max length of name stored in [`TokenMetadata`]"
              ]
            },
            {
              "name": "TokenMetadataMaxSymbolLength",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": [
                " Max length of symbol stored in [`TokenMetadata`]"
              ]
            },
            {
              "name": "MaxMigrationKeyLength",
              "ty": 4,
              "value": [
                0,
                4,
                0,
                0
              ],
              "docs": [
                " Max length for the [`Migrations`] storage"
              ]
            },
            {
              "name": "MigrationWeightLimitPercentage",
              "ty": 42,
              "value": [
                0,
                225,
                245,
                5
              ],
              "docs": [
                " Percentage of block weight to consume during migration"
              ]
            },
            {
              "name": "MaxMigrationExtrinsicInfosToPause",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Bound for the number of extrinsics to pause during multi block migration"
              ]
            },
            {
              "name": "MigrationExtrinsicsInfosToPause",
              "ty": 904,
              "value": [
                16,
                36,
                70,
                117,
                101,
                108,
                84,
                97,
                110,
                107,
                115,
                0,
                44,
                77,
                117,
                108,
                116,
                105,
                84,
                111,
                107,
                101,
                110,
                115,
                0,
                52,
                83,
                116,
                97,
                107,
                101,
                69,
                120,
                99,
                104,
                97,
                110,
                103,
                101,
                0,
                60,
                78,
                111,
                109,
                105,
                110,
                97,
                116,
                105,
                111,
                110,
                80,
                111,
                111,
                108,
                115,
                0
              ],
              "docs": [
                " List of extrinsics to pause during multi block migration (this pallet is excluded)"
              ]
            },
            {
              "name": "MaxClaimableCollectionsPerAccount",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Max number of collections that can be claimed by an account"
              ]
            },
            {
              "name": "MaxClaimableTokensPerCall",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of tokens that can be claimed in a single call to `claim_tokens`"
              ]
            },
            {
              "name": "ClaimCollectionsPrefix",
              "ty": 13,
              "value": [
                128,
                84,
                114,
                97,
                110,
                115,
                102,
                101,
                114,
                32,
                99,
                111,
                108,
                108,
                101,
                99,
                116,
                105,
                111,
                110,
                115,
                32,
                116,
                111,
                32,
                97,
                99,
                99,
                111,
                117,
                110,
                116,
                58
              ],
              "docs": [
                " The prefix of the message used to claim collections"
              ]
            },
            {
              "name": "ClaimTokensPrefix",
              "ty": 13,
              "value": [
                108,
                84,
                114,
                97,
                110,
                115,
                102,
                101,
                114,
                32,
                116,
                111,
                107,
                101,
                110,
                115,
                32,
                116,
                111,
                32,
                97,
                99,
                99,
                111,
                117,
                110,
                116,
                58
              ],
              "docs": [
                " The prefix of the message used to claim tokens"
              ]
            },
            {
              "name": "ClaimsAccountId",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                101,
                102,
                47,
                102,
                117,
                101,
                108,
                116,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The account id that owns unclaimed collections and tokens. This account also pays",
                " deposits if needed when claiming."
              ]
            }
          ],
          "error": {
            "ty": 908
          },
          "index": 253
        },
        {
          "name": "FuelTanks",
          "storage": {
            "prefix": "FuelTanks",
            "entries": [
              {
                "name": "Tanks",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 909
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Fuel Tanks accounts to their data"
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 935,
                    "value": 936
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Fuel Tanks and their user Accounts to account data"
                ]
              },
              {
                "name": "FreezeQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 948
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queue for fuel tank and rule set freezing",
                  " Composed of (`tank_id`, `rule_set_id`, new `is_frozen` value)"
                ]
              }
            ]
          },
          "calls": {
            "ty": 540
          },
          "event": {
            "ty": 249
          },
          "constants": [
            {
              "name": "Salt",
              "ty": 134,
              "value": [
                101,
                102,
                105,
                110,
                105,
                116,
                121,
                121
              ],
              "docs": [
                " The salt used for address generation"
              ]
            },
            {
              "name": "MaxWhitelistedCallers",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of whitelisted callers per fuel tank"
              ]
            },
            {
              "name": "MaxRuleSets",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of rule sets per fuel tank"
              ]
            },
            {
              "name": "MaxRulesPerSet",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of rules in a ruleset"
              ]
            },
            {
              "name": "MaxAccountRuleDataLength",
              "ty": 4,
              "value": [
                128,
                0,
                0,
                0
              ],
              "docs": [
                " Max length of data a rule can store per account"
              ]
            },
            {
              "name": "MaxCallFilters",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of permitted calls"
              ]
            },
            {
              "name": "MaxWhitelistedCollections",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " Maximum number of whitelisted collections for a fuel tank"
              ]
            },
            {
              "name": "MaxCallSize",
              "ty": 4,
              "value": [
                244,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum number of rule sets per fuel tank"
              ]
            },
            {
              "name": "MaxFreezeQueueLength",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of fuel tank freeze state mutations that can be queued"
              ]
            },
            {
              "name": "MaxUserHistorySize",
              "ty": 4,
              "value": [
                16,
                39,
                0,
                0
              ],
              "docs": [
                " The maximum number of user history that can be stored"
              ]
            },
            {
              "name": "MaxBatchAccounts",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of accounts for batch operations"
              ]
            },
            {
              "name": "MaxFuelTankNameLength",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length for fuel tank name"
              ]
            },
            {
              "name": "MaxExtrinsicNameLength",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length for extrinsics for PermittedExtrinsic rule"
              ]
            },
            {
              "name": "MaxPermittedExtrinsicLength",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of extrinsics to allow for PermittedExtrinsic rule"
              ]
            },
            {
              "name": "TankCreationDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                122,
                34,
                193,
                200,
                177,
                34,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Deposit for creating a new fuel tank"
              ]
            },
            {
              "name": "AccountCreationDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                217,
                233,
                172,
                45,
                120,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Deposit for creating an account"
              ]
            },
            {
              "name": "ReserveIdentifier",
              "ty": 134,
              "value": [
                102,
                117,
                101,
                108,
                116,
                97,
                110,
                107
              ],
              "docs": [
                " The identifier used for currency reserves"
              ]
            },
            {
              "name": "LevyScale",
              "ty": 4,
              "value": [
                184,
                11,
                0,
                0
              ],
              "docs": [
                " value of a unit of the independant variable in EFI for the levy discount according to",
                " f(x) = (1/2)^x. Cannot be 0."
              ]
            },
            {
              "name": "Levy",
              "ty": 42,
              "value": [
                128,
                23,
                180,
                44
              ],
              "docs": [
                " The Levy applied to all transactions in Matrix."
              ]
            }
          ],
          "error": {
            "ty": 951
          },
          "index": 254
        },
        {
          "name": "ExtrinsicPause",
          "storage": {
            "prefix": "ExtrinsicPause",
            "entries": [
              {
                "name": "PausedExtrinsics",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 905,
                    "value": 56
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Paused extrinsics map",
                  "",
                  " The key is tuple with the name of the pallet and the extrinsic name and value is",
                  " an Option<()> which is None if the extrinsic is not paused and Some(()) if it is."
                ]
              }
            ]
          },
          "calls": {
            "ty": 570
          },
          "event": {
            "ty": 270
          },
          "constants": [
            {
              "name": "MaxNameLength",
              "ty": 4,
              "value": [
                64,
                0,
                0,
                0
              ],
              "docs": [
                " Max number of characters in pallet or extrinsic name."
              ]
            }
          ],
          "error": {
            "ty": 952
          },
          "index": 255
        },
        {
          "name": "Marketplace",
          "storage": {
            "prefix": "Marketplace",
            "entries": [
              {
                "name": "Info",
                "modifier": "Default",
                "ty": {
                  "Plain": 953
                },
                "default": [
                  2,
                  225,
                  245,
                  5
                ],
                "docs": [
                  " Stores information about the marketplace"
                ]
              },
              {
                "name": "Listings",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 275
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Listings by ID"
                ]
              }
            ]
          },
          "calls": {
            "ty": 571
          },
          "event": {
            "ty": 274
          },
          "constants": [
            {
              "name": "MinimumBidIncreasePercentage",
              "ty": 42,
              "value": [
                128,
                240,
                250,
                2
              ],
              "docs": [
                " The percentage the minimum bid in an auction must increase by"
              ]
            },
            {
              "name": "ReserveIdentifier",
              "ty": 134,
              "value": [
                109,
                97,
                114,
                107,
                116,
                112,
                108,
                99
              ],
              "docs": [
                " ID used by the pallet for making reservations"
              ]
            },
            {
              "name": "ListingDeposit",
              "ty": 6,
              "value": [
                0,
                144,
                96,
                182,
                218,
                46,
                7,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit for creating a listing"
              ]
            },
            {
              "name": "ListingActiveDelay",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The delay before a listing is considered active"
              ]
            },
            {
              "name": "MaxRoundingError",
              "ty": 6,
              "value": [
                232,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The max amount that can be lost due to rounding before failing"
              ]
            },
            {
              "name": "MaxSaltLength",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " Max length of salt used when creating listings and bids"
              ]
            }
          ],
          "error": {
            "ty": 954
          },
          "index": 249
        },
        {
          "name": "Beefy",
          "storage": {
            "prefix": "Beefy",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 955
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current authorities set"
                ]
              },
              {
                "name": "ValidatorSetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current validator set id"
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 955
                },
                "default": [
                  0
                ],
                "docs": [
                  " Authorities set scheduled to be used with the next session"
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from BEEFY set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and BEEFY set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `ValidatorSetId` is not under user control."
                ]
              },
              {
                "name": "GenesisBlock",
                "modifier": "Default",
                "ty": {
                  "Plain": 73
                },
                "default": [
                  0
                ],
                "docs": [
                  " Block number where BEEFY consensus is enabled/started.",
                  " By changing this (through governance or sudo), BEEFY consensus is effectively",
                  " restarted from the new block number."
                ]
              }
            ]
          },
          "calls": {
            "ty": 573
          },
          "event": null,
          "constants": [
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of authorities that can be added."
              ]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "ty": 11,
              "value": [
                168,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "error": {
            "ty": 957
          },
          "index": 240
        },
        {
          "name": "Mmr",
          "storage": {
            "prefix": "Mmr",
            "entries": [
              {
                "name": "RootHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Latest MMR Root hash."
                ]
              },
              {
                "name": "NumberOfLeaves",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current size of the MMR (number of leaves)."
                ]
              },
              {
                "name": "Nodes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Hashes of the nodes in the MMR.",
                  "",
                  " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
                  " are pruned and only stored in the Offchain DB."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 241
        },
        {
          "name": "MmrLeaf",
          "storage": {
            "prefix": "MmrLeaf",
            "entries": [
              {
                "name": "BeefyAuthorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 958
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Details of current BEEFY authority set."
                ]
              },
              {
                "name": "BeefyNextAuthorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 958
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Details of next BEEFY authority set.",
                  "",
                  " This storage entry is used as cache for calls to `update_beefy_next_authority_set`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 242
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "IncompleteSince",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 959
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 1,
                    "value": 285
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": {
            "ty": 583
          },
          "event": {
            "ty": 284
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 9,
              "value": [
                11,
                0,
                128,
                110,
                135,
                116,
                1,
                19,
                204,
                204,
                204,
                204,
                204,
                204,
                204,
                204
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                "",
                " NOTE:",
                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                " higher limit under `runtime-benchmarks` feature."
              ]
            }
          ],
          "error": {
            "ty": 963
          },
          "index": 100
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 964
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 965,
                    "value": 966
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 585
          },
          "event": {
            "ty": 287
          },
          "constants": [],
          "error": {
            "ty": 967
          },
          "index": 101
        },
        {
          "name": "ConvictionVoting",
          "storage": {
            "prefix": "ConvictionVoting",
            "entries": [
              {
                "name": "VotingFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 968,
                    "value": 969
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All voting for a particular voter in a particular voting class. We store the balance for the",
                  " number of votes that we have recorded."
                ]
              },
              {
                "name": "ClassLocksFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 977
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                  " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                  " this list."
                ]
              }
            ]
          },
          "calls": {
            "ty": 586
          },
          "event": {
            "ty": 288
          },
          "constants": [
            {
              "name": "MaxVotes",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": [
                " The maximum number of concurrent votes an account may have.",
                "",
                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                " weight estimation: see `delegate` for instance."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "ty": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            }
          ],
          "error": {
            "ty": 980
          },
          "index": 102
        },
        {
          "name": "Referenda",
          "storage": {
            "prefix": "Referenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 981
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "TrackQueue",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 290,
                    "value": 773
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 290,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of referenda being decided currently."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 591
          },
          "event": {
            "ty": 289
          },
          "constants": [
            {
              "name": "SubmissionDeposit",
              "ty": 6,
              "value": [
                0,
                128,
                98,
                23,
                94,
                209,
                88,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "MaxQueued",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ]
            },
            {
              "name": "UndecidingTimeout",
              "ty": 4,
              "value": [
                128,
                19,
                3,
                0
              ],
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "ty": 989,
              "value": [
                88,
                0,
                0,
                16,
                114,
                111,
                111,
                116,
                1,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                64,
                56,
                0,
                0,
                64,
                56,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                1,
                0,
                72,
                119,
                104,
                105,
                116,
                101,
                108,
                105,
                115,
                116,
                101,
                100,
                95,
                99,
                97,
                108,
                108,
                101,
                114,
                100,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                0,
                0,
                0,
                192,
                137,
                1,
                0,
                100,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                2,
                236,
                151,
                37,
                16,
                0,
                0,
                0,
                0,
                123,
                87,
                60,
                23,
                0,
                0,
                0,
                0,
                66,
                57,
                47,
                18,
                0,
                0,
                0,
                0,
                2,
                14,
                0,
                132,
                0,
                0,
                0,
                0,
                0,
                214,
                230,
                31,
                1,
                0,
                0,
                0,
                0,
                57,
                98,
                121,
                2,
                0,
                0,
                0,
                0,
                2,
                0,
                80,
                114,
                101,
                102,
                101,
                114,
                101,
                110,
                100,
                117,
                109,
                95,
                99,
                97,
                110,
                99,
                101,
                108,
                108,
                101,
                114,
                232,
                3,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                192,
                137,
                1,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                3,
                0,
                68,
                114,
                101,
                102,
                101,
                114,
                101,
                110,
                100,
                117,
                109,
                95,
                107,
                105,
                108,
                108,
                101,
                114,
                232,
                3,
                0,
                0,
                0,
                0,
                64,
                178,
                186,
                201,
                224,
                25,
                30,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                100,
                0,
                52,
                115,
                116,
                97,
                107,
                105,
                110,
                103,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                80,
                239,
                226,
                214,
                228,
                26,
                27,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                101,
                0,
                56,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                121,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                64,
                56,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                102,
                0,
                44,
                108,
                101,
                97,
                115,
                101,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                80,
                239,
                226,
                214,
                228,
                26,
                27,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                103,
                0,
                64,
                102,
                101,
                108,
                108,
                111,
                119,
                115,
                104,
                105,
                112,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                104,
                0,
                52,
                103,
                101,
                110,
                101,
                114,
                97,
                108,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                2,
                89,
                162,
                244,
                2,
                0,
                0,
                0,
                0,
                163,
                41,
                107,
                5,
                0,
                0,
                0,
                0,
                46,
                107,
                74,
                253,
                255,
                255,
                255,
                255,
                105,
                0,
                52,
                97,
                117,
                99,
                116,
                105,
                111,
                110,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                2,
                89,
                162,
                244,
                2,
                0,
                0,
                0,
                0,
                163,
                41,
                107,
                5,
                0,
                0,
                0,
                0,
                46,
                107,
                74,
                253,
                255,
                255,
                255,
                255,
                106,
                0,
                72,
                109,
                117,
                108,
                116,
                105,
                95,
                116,
                111,
                107,
                101,
                110,
                115,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                107,
                0,
                64,
                102,
                117,
                101,
                108,
                95,
                116,
                97,
                110,
                107,
                115,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                108,
                0,
                48,
                99,
                108,
                97,
                105,
                109,
                115,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                109,
                0,
                84,
                101,
                120,
                116,
                114,
                105,
                110,
                115,
                105,
                99,
                95,
                112,
                97,
                117,
                115,
                101,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                110,
                0,
                56,
                112,
                114,
                101,
                105,
                109,
                97,
                103,
                101,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                111,
                0,
                60,
                119,
                104,
                105,
                116,
                101,
                108,
                105,
                115,
                116,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                112,
                0,
                64,
                112,
                97,
                114,
                97,
                99,
                104,
                97,
                105,
                110,
                115,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                128,
                19,
                3,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                200,
                0,
                48,
                115,
                109,
                97,
                108,
                108,
                95,
                116,
                105,
                112,
                112,
                101,
                114,
                200,
                0,
                0,
                0,
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                192,
                137,
                1,
                0,
                100,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                73,
                145,
                73,
                21,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                249,
                186,
                24,
                0,
                0,
                0,
                0,
                0,
                42,
                77,
                49,
                0,
                0,
                0,
                0,
                0,
                107,
                89,
                231,
                255,
                255,
                255,
                255,
                255,
                201,
                0,
                40,
                98,
                105,
                103,
                95,
                116,
                105,
                112,
                112,
                101,
                114,
                100,
                0,
                0,
                0,
                0,
                0,
                232,
                137,
                4,
                35,
                199,
                138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                192,
                137,
                1,
                0,
                88,
                2,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                73,
                145,
                73,
                21,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                105,
                79,
                63,
                0,
                0,
                0,
                0,
                0,
                53,
                150,
                125,
                0,
                0,
                0,
                0,
                0,
                229,
                52,
                193,
                255,
                255,
                255,
                255,
                255,
                202,
                0,
                52,
                115,
                109,
                97,
                108,
                108,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                50,
                0,
                0,
                0,
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                128,
                19,
                3,
                0,
                32,
                28,
                0,
                0,
                64,
                56,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                203,
                0,
                56,
                109,
                101,
                100,
                105,
                117,
                109,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                50,
                0,
                0,
                0,
                0,
                0,
                32,
                198,
                90,
                188,
                142,
                215,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                128,
                19,
                3,
                0,
                64,
                56,
                0,
                0,
                64,
                56,
                0,
                0,
                0,
                91,
                1,
                246,
                48,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                17,
                97,
                219,
                0,
                0,
                0,
                0,
                0,
                191,
                209,
                170,
                1,
                0,
                0,
                0,
                0,
                32,
                151,
                42,
                255,
                255,
                255,
                255,
                255,
                204,
                0,
                44,
                98,
                105,
                103,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                50,
                0,
                0,
                0,
                0,
                0,
                64,
                140,
                181,
                120,
                29,
                175,
                21,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                128,
                19,
                3,
                0,
                128,
                112,
                0,
                0,
                64,
                56,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                65,
                60,
                176,
                1,
                0,
                0,
                0,
                0,
                117,
                93,
                52,
                3,
                0,
                0,
                0,
                0,
                69,
                209,
                101,
                254,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " Information concerning the different referendum tracks."
              ]
            }
          ],
          "error": {
            "ty": 995
          },
          "index": 103
        },
        {
          "name": "Whitelist",
          "storage": {
            "prefix": "Whitelist",
            "entries": [
              {
                "name": "WhitelistedCall",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 12,
                    "value": 56
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 594
          },
          "event": {
            "ty": 640
          },
          "constants": [],
          "error": {
            "ty": 996
          },
          "index": 105
        },
        {
          "name": "FellowshipCollective",
          "storage": {
            "prefix": "FellowshipCollective",
            "entries": [
              {
                "name": "MemberCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 290,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of members in the collective who have at least the rank according to the index",
                  " of the vec."
                ]
              },
              {
                "name": "Members",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 997
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective."
                ]
              },
              {
                "name": "IdToIndex",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 998,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The index of each ranks's member into the group of members who have at least that rank."
                ]
              },
              {
                "name": "IndexToId",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 999,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The members in the collective by index. All indices in the range `0..MemberCount` will",
                  " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 715,
                    "value": 646
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "VotingCleanup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 1000
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 595
          },
          "event": {
            "ty": 645
          },
          "constants": [],
          "error": {
            "ty": 1001
          },
          "index": 106
        },
        {
          "name": "FellowshipReferenda",
          "storage": {
            "prefix": "FellowshipReferenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 1002
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "TrackQueue",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 290,
                    "value": 1004
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 290,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of referenda being decided currently."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 596
          },
          "event": {
            "ty": 648
          },
          "constants": [
            {
              "name": "SubmissionDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "MaxQueued",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ]
            },
            {
              "name": "UndecidingTimeout",
              "ty": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "ty": 989,
              "value": [
                40,
                0,
                0,
                40,
                99,
                97,
                110,
                100,
                105,
                100,
                97,
                116,
                101,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                232,
                137,
                4,
                35,
                199,
                138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                88,
                2,
                0,
                0,
                128,
                19,
                3,
                0,
                194,
                1,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                1,
                0,
                28,
                109,
                101,
                109,
                98,
                101,
                114,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                194,
                1,
                0,
                0,
                128,
                50,
                2,
                0,
                44,
                1,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                2,
                0,
                44,
                112,
                114,
                111,
                102,
                105,
                99,
                105,
                101,
                110,
                116,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                32,
                198,
                90,
                188,
                142,
                215,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                44,
                1,
                0,
                0,
                192,
                137,
                1,
                0,
                150,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                3,
                0,
                28,
                102,
                101,
                108,
                108,
                111,
                119,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                160,
                222,
                197,
                173,
                201,
                53,
                54,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                0,
                0,
                0,
                192,
                168,
                0,
                0,
                150,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                4,
                0,
                56,
                115,
                101,
                110,
                105,
                111,
                114,
                32,
                102,
                101,
                108,
                108,
                111,
                119,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                144,
                172,
                110,
                50,
                120,
                134,
                135,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                0,
                0,
                0,
                128,
                112,
                0,
                0,
                100,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                5,
                0,
                28,
                101,
                120,
                112,
                101,
                114,
                116,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                32,
                89,
                221,
                100,
                240,
                12,
                15,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                64,
                56,
                0,
                0,
                100,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                6,
                0,
                56,
                115,
                101,
                110,
                105,
                111,
                114,
                32,
                101,
                120,
                112,
                101,
                114,
                116,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                176,
                5,
                76,
                151,
                104,
                147,
                150,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                128,
                37,
                0,
                0,
                50,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                7,
                0,
                28,
                109,
                97,
                115,
                116,
                101,
                114,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                64,
                178,
                186,
                201,
                224,
                25,
                30,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                50,
                0,
                0,
                0,
                32,
                28,
                0,
                0,
                50,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                8,
                0,
                56,
                115,
                101,
                110,
                105,
                111,
                114,
                32,
                109,
                97,
                115,
                116,
                101,
                114,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                64,
                123,
                165,
                240,
                99,
                129,
                150,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                50,
                0,
                0,
                0,
                192,
                18,
                0,
                0,
                50,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                9,
                0,
                52,
                103,
                114,
                97,
                110,
                100,
                32,
                109,
                97,
                115,
                116,
                101,
                114,
                115,
                10,
                0,
                0,
                0,
                0,
                0,
                128,
                246,
                74,
                225,
                199,
                2,
                45,
                21,
                0,
                0,
                0,
                0,
                0,
                0,
                50,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                50,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29
              ],
              "docs": [
                " Information concerning the different referendum tracks."
              ]
            }
          ],
          "error": {
            "ty": 1005
          },
          "index": 107
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 1006
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 632
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 1010
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "ty": {
                  "Plain": 1012
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "ty": 597
          },
          "event": {
            "ty": 649
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                64,
                140,
                181,
                120,
                29,
                175,
                21,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                61,
                145,
                96,
                228,
                88,
                17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                61,
                145,
                96,
                228,
                88,
                17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": {
            "ty": 1016
          },
          "index": 108
        },
        {
          "name": "VoteManager",
          "storage": {
            "prefix": "VoteManager",
            "entries": [
              {
                "name": "VoteCurrencies",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 719,
                    "value": 637
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The currency used by `AccountId` to vote in Poll with",
                  " `PollIndex`",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "VotesToUnlock",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 719,
                    "value": 1017
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The currency used by `AccountId` to vote in referendum with",
                  " `ReferendumIndex`",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 636
          },
          "event": {
            "ty": 650
          },
          "constants": [],
          "error": {
            "ty": 1018
          },
          "index": 109
        }
      ],
      "extrinsic": {
        "ty": 1019,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 1021,
            "additional_signed": 56
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 1022,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 1023,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 1024,
            "additional_signed": 12
          },
          {
            "identifier": "CheckMortality",
            "ty": 1025,
            "additional_signed": 12
          },
          {
            "identifier": "CheckNonce",
            "ty": 1027,
            "additional_signed": 56
          },
          {
            "identifier": "CheckWeight",
            "ty": 1028,
            "additional_signed": 56
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 1029,
            "additional_signed": 56
          },
          {
            "identifier": "CheckFuelTank",
            "ty": 1030,
            "additional_signed": 56
          }
        ]
      },
      "ty": 254
    }
  }
]